--
-- PostgreSQL database cluster dump
--

SET default_transaction_read_only = off;

SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;

--
-- Roles
--

CREATE ROLE anon;
ALTER ROLE anon WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE authenticated;
ALTER ROLE authenticated WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE authenticator;
ALTER ROLE authenticator WITH NOSUPERUSER NOINHERIT NOCREATEROLE NOCREATEDB LOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE dashboard_user;
ALTER ROLE dashboard_user WITH NOSUPERUSER INHERIT CREATEROLE CREATEDB NOLOGIN REPLICATION NOBYPASSRLS;
CREATE ROLE pgbouncer;
ALTER ROLE pgbouncer WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB LOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE postgres;
ALTER ROLE postgres WITH NOSUPERUSER INHERIT CREATEROLE CREATEDB LOGIN REPLICATION BYPASSRLS;
CREATE ROLE service_role;
ALTER ROLE service_role WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOREPLICATION BYPASSRLS;
CREATE ROLE supabase_admin;
ALTER ROLE supabase_admin WITH SUPERUSER INHERIT CREATEROLE CREATEDB LOGIN REPLICATION BYPASSRLS;
CREATE ROLE supabase_auth_admin;
ALTER ROLE supabase_auth_admin WITH NOSUPERUSER NOINHERIT CREATEROLE NOCREATEDB LOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE supabase_read_only_user;
ALTER ROLE supabase_read_only_user WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB LOGIN NOREPLICATION BYPASSRLS;
CREATE ROLE supabase_realtime_admin;
ALTER ROLE supabase_realtime_admin WITH NOSUPERUSER NOINHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE supabase_replication_admin;
ALTER ROLE supabase_replication_admin WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB LOGIN REPLICATION NOBYPASSRLS;
CREATE ROLE supabase_storage_admin;
ALTER ROLE supabase_storage_admin WITH NOSUPERUSER NOINHERIT CREATEROLE NOCREATEDB LOGIN NOREPLICATION NOBYPASSRLS;

--
-- User Configurations
--

--
-- User Config "anon"
--

ALTER ROLE anon SET statement_timeout TO '3s';

--
-- User Config "authenticated"
--

ALTER ROLE authenticated SET statement_timeout TO '8s';

--
-- User Config "authenticator"
--

ALTER ROLE authenticator SET session_preload_libraries TO 'safeupdate';
ALTER ROLE authenticator SET statement_timeout TO '8s';
ALTER ROLE authenticator SET lock_timeout TO '8s';

--
-- User Config "postgres"
--

ALTER ROLE postgres SET search_path TO E'\\$user', 'public', 'extensions';

--
-- User Config "supabase_admin"
--

ALTER ROLE supabase_admin SET search_path TO '$user', 'public', 'auth', 'extensions';
ALTER ROLE supabase_admin SET log_statement TO 'none';

--
-- User Config "supabase_auth_admin"
--

ALTER ROLE supabase_auth_admin SET search_path TO 'auth';
ALTER ROLE supabase_auth_admin SET idle_in_transaction_session_timeout TO '60000';
ALTER ROLE supabase_auth_admin SET log_statement TO 'none';

--
-- User Config "supabase_storage_admin"
--

ALTER ROLE supabase_storage_admin SET search_path TO 'storage';
ALTER ROLE supabase_storage_admin SET log_statement TO 'none';


--
-- Role memberships
--

GRANT anon TO authenticator GRANTED BY postgres;
GRANT anon TO postgres GRANTED BY supabase_admin;
GRANT authenticated TO authenticator GRANTED BY postgres;
GRANT authenticated TO postgres GRANTED BY supabase_admin;
GRANT authenticator TO supabase_storage_admin GRANTED BY supabase_admin;
GRANT pg_monitor TO postgres GRANTED BY supabase_admin;
GRANT pg_read_all_data TO postgres GRANTED BY supabase_admin;
GRANT pg_read_all_data TO supabase_read_only_user GRANTED BY postgres;
GRANT pg_signal_backend TO postgres GRANTED BY supabase_admin;
GRANT service_role TO authenticator GRANTED BY postgres;
GRANT service_role TO postgres GRANTED BY supabase_admin;
GRANT supabase_realtime_admin TO postgres GRANTED BY supabase_admin;






--
-- Databases
--

--
-- Database "template1" dump
--

\connect template1

--
-- PostgreSQL database dump
--

-- Dumped from database version 15.8
-- Dumped by pg_dump version 15.13 (Debian 15.13-1.pgdg120+1)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- PostgreSQL database dump complete
--

--
-- Database "postgres" dump
--

\connect postgres

--
-- PostgreSQL database dump
--

-- Dumped from database version 15.8
-- Dumped by pg_dump version 15.13 (Debian 15.13-1.pgdg120+1)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: auth; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA auth;


ALTER SCHEMA auth OWNER TO supabase_admin;

--
-- Name: extensions; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA extensions;


ALTER SCHEMA extensions OWNER TO postgres;

--
-- Name: graphql; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA graphql;


ALTER SCHEMA graphql OWNER TO supabase_admin;

--
-- Name: graphql_public; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA graphql_public;


ALTER SCHEMA graphql_public OWNER TO supabase_admin;

--
-- Name: pgbouncer; Type: SCHEMA; Schema: -; Owner: pgbouncer
--

CREATE SCHEMA pgbouncer;


ALTER SCHEMA pgbouncer OWNER TO pgbouncer;

--
-- Name: realtime; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA realtime;


ALTER SCHEMA realtime OWNER TO supabase_admin;

--
-- Name: storage; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA storage;


ALTER SCHEMA storage OWNER TO supabase_admin;

--
-- Name: vault; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA vault;


ALTER SCHEMA vault OWNER TO supabase_admin;

--
-- Name: pg_graphql; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pg_graphql WITH SCHEMA graphql;


--
-- Name: EXTENSION pg_graphql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pg_graphql IS 'pg_graphql: GraphQL support';


--
-- Name: pg_stat_statements; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pg_stat_statements WITH SCHEMA extensions;


--
-- Name: EXTENSION pg_stat_statements; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pg_stat_statements IS 'track planning and execution statistics of all SQL statements executed';


--
-- Name: pgcrypto; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pgcrypto WITH SCHEMA extensions;


--
-- Name: EXTENSION pgcrypto; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pgcrypto IS 'cryptographic functions';


--
-- Name: pgjwt; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pgjwt WITH SCHEMA extensions;


--
-- Name: EXTENSION pgjwt; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pgjwt IS 'JSON Web Token API for Postgresql';


--
-- Name: supabase_vault; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS supabase_vault WITH SCHEMA vault;


--
-- Name: EXTENSION supabase_vault; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION supabase_vault IS 'Supabase Vault Extension';


--
-- Name: uuid-ossp; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA extensions;


--
-- Name: EXTENSION "uuid-ossp"; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION "uuid-ossp" IS 'generate universally unique identifiers (UUIDs)';


--
-- Name: aal_level; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.aal_level AS ENUM (
    'aal1',
    'aal2',
    'aal3'
);


ALTER TYPE auth.aal_level OWNER TO supabase_auth_admin;

--
-- Name: code_challenge_method; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.code_challenge_method AS ENUM (
    's256',
    'plain'
);


ALTER TYPE auth.code_challenge_method OWNER TO supabase_auth_admin;

--
-- Name: factor_status; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.factor_status AS ENUM (
    'unverified',
    'verified'
);


ALTER TYPE auth.factor_status OWNER TO supabase_auth_admin;

--
-- Name: factor_type; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.factor_type AS ENUM (
    'totp',
    'webauthn',
    'phone'
);


ALTER TYPE auth.factor_type OWNER TO supabase_auth_admin;

--
-- Name: one_time_token_type; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.one_time_token_type AS ENUM (
    'confirmation_token',
    'reauthentication_token',
    'recovery_token',
    'email_change_token_new',
    'email_change_token_current',
    'phone_change_token'
);


ALTER TYPE auth.one_time_token_type OWNER TO supabase_auth_admin;

--
-- Name: action; Type: TYPE; Schema: realtime; Owner: supabase_admin
--

CREATE TYPE realtime.action AS ENUM (
    'INSERT',
    'UPDATE',
    'DELETE',
    'TRUNCATE',
    'ERROR'
);


ALTER TYPE realtime.action OWNER TO supabase_admin;

--
-- Name: equality_op; Type: TYPE; Schema: realtime; Owner: supabase_admin
--

CREATE TYPE realtime.equality_op AS ENUM (
    'eq',
    'neq',
    'lt',
    'lte',
    'gt',
    'gte',
    'in'
);


ALTER TYPE realtime.equality_op OWNER TO supabase_admin;

--
-- Name: user_defined_filter; Type: TYPE; Schema: realtime; Owner: supabase_admin
--

CREATE TYPE realtime.user_defined_filter AS (
	column_name text,
	op realtime.equality_op,
	value text
);


ALTER TYPE realtime.user_defined_filter OWNER TO supabase_admin;

--
-- Name: wal_column; Type: TYPE; Schema: realtime; Owner: supabase_admin
--

CREATE TYPE realtime.wal_column AS (
	name text,
	type_name text,
	type_oid oid,
	value jsonb,
	is_pkey boolean,
	is_selectable boolean
);


ALTER TYPE realtime.wal_column OWNER TO supabase_admin;

--
-- Name: wal_rls; Type: TYPE; Schema: realtime; Owner: supabase_admin
--

CREATE TYPE realtime.wal_rls AS (
	wal jsonb,
	is_rls_enabled boolean,
	subscription_ids uuid[],
	errors text[]
);


ALTER TYPE realtime.wal_rls OWNER TO supabase_admin;

--
-- Name: email(); Type: FUNCTION; Schema: auth; Owner: supabase_auth_admin
--

CREATE FUNCTION auth.email() RETURNS text
    LANGUAGE sql STABLE
    AS $$
  select 
  coalesce(
    nullif(current_setting('request.jwt.claim.email', true), ''),
    (nullif(current_setting('request.jwt.claims', true), '')::jsonb ->> 'email')
  )::text
$$;


ALTER FUNCTION auth.email() OWNER TO supabase_auth_admin;

--
-- Name: FUNCTION email(); Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON FUNCTION auth.email() IS 'Deprecated. Use auth.jwt() -> ''email'' instead.';


--
-- Name: jwt(); Type: FUNCTION; Schema: auth; Owner: supabase_auth_admin
--

CREATE FUNCTION auth.jwt() RETURNS jsonb
    LANGUAGE sql STABLE
    AS $$
  select 
    coalesce(
        nullif(current_setting('request.jwt.claim', true), ''),
        nullif(current_setting('request.jwt.claims', true), '')
    )::jsonb
$$;


ALTER FUNCTION auth.jwt() OWNER TO supabase_auth_admin;

--
-- Name: role(); Type: FUNCTION; Schema: auth; Owner: supabase_auth_admin
--

CREATE FUNCTION auth.role() RETURNS text
    LANGUAGE sql STABLE
    AS $$
  select 
  coalesce(
    nullif(current_setting('request.jwt.claim.role', true), ''),
    (nullif(current_setting('request.jwt.claims', true), '')::jsonb ->> 'role')
  )::text
$$;


ALTER FUNCTION auth.role() OWNER TO supabase_auth_admin;

--
-- Name: FUNCTION role(); Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON FUNCTION auth.role() IS 'Deprecated. Use auth.jwt() -> ''role'' instead.';


--
-- Name: uid(); Type: FUNCTION; Schema: auth; Owner: supabase_auth_admin
--

CREATE FUNCTION auth.uid() RETURNS uuid
    LANGUAGE sql STABLE
    AS $$
  select 
  coalesce(
    nullif(current_setting('request.jwt.claim.sub', true), ''),
    (nullif(current_setting('request.jwt.claims', true), '')::jsonb ->> 'sub')
  )::uuid
$$;


ALTER FUNCTION auth.uid() OWNER TO supabase_auth_admin;

--
-- Name: FUNCTION uid(); Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON FUNCTION auth.uid() IS 'Deprecated. Use auth.jwt() -> ''sub'' instead.';


--
-- Name: grant_pg_cron_access(); Type: FUNCTION; Schema: extensions; Owner: supabase_admin
--

CREATE FUNCTION extensions.grant_pg_cron_access() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  IF EXISTS (
    SELECT
    FROM pg_event_trigger_ddl_commands() AS ev
    JOIN pg_extension AS ext
    ON ev.objid = ext.oid
    WHERE ext.extname = 'pg_cron'
  )
  THEN
    grant usage on schema cron to postgres with grant option;

    alter default privileges in schema cron grant all on tables to postgres with grant option;
    alter default privileges in schema cron grant all on functions to postgres with grant option;
    alter default privileges in schema cron grant all on sequences to postgres with grant option;

    alter default privileges for user supabase_admin in schema cron grant all
        on sequences to postgres with grant option;
    alter default privileges for user supabase_admin in schema cron grant all
        on tables to postgres with grant option;
    alter default privileges for user supabase_admin in schema cron grant all
        on functions to postgres with grant option;

    grant all privileges on all tables in schema cron to postgres with grant option;
    revoke all on table cron.job from postgres;
    grant select on table cron.job to postgres with grant option;
  END IF;
END;
$$;


ALTER FUNCTION extensions.grant_pg_cron_access() OWNER TO supabase_admin;

--
-- Name: FUNCTION grant_pg_cron_access(); Type: COMMENT; Schema: extensions; Owner: supabase_admin
--

COMMENT ON FUNCTION extensions.grant_pg_cron_access() IS 'Grants access to pg_cron';


--
-- Name: grant_pg_graphql_access(); Type: FUNCTION; Schema: extensions; Owner: supabase_admin
--

CREATE FUNCTION extensions.grant_pg_graphql_access() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $_$
DECLARE
    func_is_graphql_resolve bool;
BEGIN
    func_is_graphql_resolve = (
        SELECT n.proname = 'resolve'
        FROM pg_event_trigger_ddl_commands() AS ev
        LEFT JOIN pg_catalog.pg_proc AS n
        ON ev.objid = n.oid
    );

    IF func_is_graphql_resolve
    THEN
        -- Update public wrapper to pass all arguments through to the pg_graphql resolve func
        DROP FUNCTION IF EXISTS graphql_public.graphql;
        create or replace function graphql_public.graphql(
            "operationName" text default null,
            query text default null,
            variables jsonb default null,
            extensions jsonb default null
        )
            returns jsonb
            language sql
        as $$
            select graphql.resolve(
                query := query,
                variables := coalesce(variables, '{}'),
                "operationName" := "operationName",
                extensions := extensions
            );
        $$;

        -- This hook executes when `graphql.resolve` is created. That is not necessarily the last
        -- function in the extension so we need to grant permissions on existing entities AND
        -- update default permissions to any others that are created after `graphql.resolve`
        grant usage on schema graphql to postgres, anon, authenticated, service_role;
        grant select on all tables in schema graphql to postgres, anon, authenticated, service_role;
        grant execute on all functions in schema graphql to postgres, anon, authenticated, service_role;
        grant all on all sequences in schema graphql to postgres, anon, authenticated, service_role;
        alter default privileges in schema graphql grant all on tables to postgres, anon, authenticated, service_role;
        alter default privileges in schema graphql grant all on functions to postgres, anon, authenticated, service_role;
        alter default privileges in schema graphql grant all on sequences to postgres, anon, authenticated, service_role;

        -- Allow postgres role to allow granting usage on graphql and graphql_public schemas to custom roles
        grant usage on schema graphql_public to postgres with grant option;
        grant usage on schema graphql to postgres with grant option;
    END IF;

END;
$_$;


ALTER FUNCTION extensions.grant_pg_graphql_access() OWNER TO supabase_admin;

--
-- Name: FUNCTION grant_pg_graphql_access(); Type: COMMENT; Schema: extensions; Owner: supabase_admin
--

COMMENT ON FUNCTION extensions.grant_pg_graphql_access() IS 'Grants access to pg_graphql';


--
-- Name: grant_pg_net_access(); Type: FUNCTION; Schema: extensions; Owner: supabase_admin
--

CREATE FUNCTION extensions.grant_pg_net_access() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  IF EXISTS (
    SELECT 1
    FROM pg_event_trigger_ddl_commands() AS ev
    JOIN pg_extension AS ext
    ON ev.objid = ext.oid
    WHERE ext.extname = 'pg_net'
  )
  THEN
    IF NOT EXISTS (
      SELECT 1
      FROM pg_roles
      WHERE rolname = 'supabase_functions_admin'
    )
    THEN
      CREATE USER supabase_functions_admin NOINHERIT CREATEROLE LOGIN NOREPLICATION;
    END IF;

    GRANT USAGE ON SCHEMA net TO supabase_functions_admin, postgres, anon, authenticated, service_role;

    IF EXISTS (
      SELECT FROM pg_extension
      WHERE extname = 'pg_net'
      -- all versions in use on existing projects as of 2025-02-20
      -- version 0.12.0 onwards don't need these applied
      AND extversion IN ('0.2', '0.6', '0.7', '0.7.1', '0.8', '0.10.0', '0.11.0')
    ) THEN
      ALTER function net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) SECURITY DEFINER;
      ALTER function net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) SECURITY DEFINER;

      ALTER function net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) SET search_path = net;
      ALTER function net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) SET search_path = net;

      REVOKE ALL ON FUNCTION net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) FROM PUBLIC;
      REVOKE ALL ON FUNCTION net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) FROM PUBLIC;

      GRANT EXECUTE ON FUNCTION net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) TO supabase_functions_admin, postgres, anon, authenticated, service_role;
      GRANT EXECUTE ON FUNCTION net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) TO supabase_functions_admin, postgres, anon, authenticated, service_role;
    END IF;
  END IF;
END;
$$;


ALTER FUNCTION extensions.grant_pg_net_access() OWNER TO supabase_admin;

--
-- Name: FUNCTION grant_pg_net_access(); Type: COMMENT; Schema: extensions; Owner: supabase_admin
--

COMMENT ON FUNCTION extensions.grant_pg_net_access() IS 'Grants access to pg_net';


--
-- Name: pgrst_ddl_watch(); Type: FUNCTION; Schema: extensions; Owner: supabase_admin
--

CREATE FUNCTION extensions.pgrst_ddl_watch() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  cmd record;
BEGIN
  FOR cmd IN SELECT * FROM pg_event_trigger_ddl_commands()
  LOOP
    IF cmd.command_tag IN (
      'CREATE SCHEMA', 'ALTER SCHEMA'
    , 'CREATE TABLE', 'CREATE TABLE AS', 'SELECT INTO', 'ALTER TABLE'
    , 'CREATE FOREIGN TABLE', 'ALTER FOREIGN TABLE'
    , 'CREATE VIEW', 'ALTER VIEW'
    , 'CREATE MATERIALIZED VIEW', 'ALTER MATERIALIZED VIEW'
    , 'CREATE FUNCTION', 'ALTER FUNCTION'
    , 'CREATE TRIGGER'
    , 'CREATE TYPE', 'ALTER TYPE'
    , 'CREATE RULE'
    , 'COMMENT'
    )
    -- don't notify in case of CREATE TEMP table or other objects created on pg_temp
    AND cmd.schema_name is distinct from 'pg_temp'
    THEN
      NOTIFY pgrst, 'reload schema';
    END IF;
  END LOOP;
END; $$;


ALTER FUNCTION extensions.pgrst_ddl_watch() OWNER TO supabase_admin;

--
-- Name: pgrst_drop_watch(); Type: FUNCTION; Schema: extensions; Owner: supabase_admin
--

CREATE FUNCTION extensions.pgrst_drop_watch() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  obj record;
BEGIN
  FOR obj IN SELECT * FROM pg_event_trigger_dropped_objects()
  LOOP
    IF obj.object_type IN (
      'schema'
    , 'table'
    , 'foreign table'
    , 'view'
    , 'materialized view'
    , 'function'
    , 'trigger'
    , 'type'
    , 'rule'
    )
    AND obj.is_temporary IS false -- no pg_temp objects
    THEN
      NOTIFY pgrst, 'reload schema';
    END IF;
  END LOOP;
END; $$;


ALTER FUNCTION extensions.pgrst_drop_watch() OWNER TO supabase_admin;

--
-- Name: set_graphql_placeholder(); Type: FUNCTION; Schema: extensions; Owner: supabase_admin
--

CREATE FUNCTION extensions.set_graphql_placeholder() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $_$
    DECLARE
    graphql_is_dropped bool;
    BEGIN
    graphql_is_dropped = (
        SELECT ev.schema_name = 'graphql_public'
        FROM pg_event_trigger_dropped_objects() AS ev
        WHERE ev.schema_name = 'graphql_public'
    );

    IF graphql_is_dropped
    THEN
        create or replace function graphql_public.graphql(
            "operationName" text default null,
            query text default null,
            variables jsonb default null,
            extensions jsonb default null
        )
            returns jsonb
            language plpgsql
        as $$
            DECLARE
                server_version float;
            BEGIN
                server_version = (SELECT (SPLIT_PART((select version()), ' ', 2))::float);

                IF server_version >= 14 THEN
                    RETURN jsonb_build_object(
                        'errors', jsonb_build_array(
                            jsonb_build_object(
                                'message', 'pg_graphql extension is not enabled.'
                            )
                        )
                    );
                ELSE
                    RETURN jsonb_build_object(
                        'errors', jsonb_build_array(
                            jsonb_build_object(
                                'message', 'pg_graphql is only available on projects running Postgres 14 onwards.'
                            )
                        )
                    );
                END IF;
            END;
        $$;
    END IF;

    END;
$_$;


ALTER FUNCTION extensions.set_graphql_placeholder() OWNER TO supabase_admin;

--
-- Name: FUNCTION set_graphql_placeholder(); Type: COMMENT; Schema: extensions; Owner: supabase_admin
--

COMMENT ON FUNCTION extensions.set_graphql_placeholder() IS 'Reintroduces placeholder function for graphql_public.graphql';


--
-- Name: get_auth(text); Type: FUNCTION; Schema: pgbouncer; Owner: supabase_admin
--

CREATE FUNCTION pgbouncer.get_auth(p_usename text) RETURNS TABLE(username text, password text)
    LANGUAGE plpgsql SECURITY DEFINER
    AS $_$
begin
    raise debug 'PgBouncer auth request: %', p_usename;

    return query
    select 
        rolname::text, 
        case when rolvaliduntil < now() 
            then null 
            else rolpassword::text 
        end 
    from pg_authid 
    where rolname=$1 and rolcanlogin;
end;
$_$;


ALTER FUNCTION pgbouncer.get_auth(p_usename text) OWNER TO supabase_admin;

--
-- Name: apply_rls(jsonb, integer); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer DEFAULT (1024 * 1024)) RETURNS SETOF realtime.wal_rls
    LANGUAGE plpgsql
    AS $$
declare
-- Regclass of the table e.g. public.notes
entity_ regclass = (quote_ident(wal ->> 'schema') || '.' || quote_ident(wal ->> 'table'))::regclass;

-- I, U, D, T: insert, update ...
action realtime.action = (
    case wal ->> 'action'
        when 'I' then 'INSERT'
        when 'U' then 'UPDATE'
        when 'D' then 'DELETE'
        else 'ERROR'
    end
);

-- Is row level security enabled for the table
is_rls_enabled bool = relrowsecurity from pg_class where oid = entity_;

subscriptions realtime.subscription[] = array_agg(subs)
    from
        realtime.subscription subs
    where
        subs.entity = entity_;

-- Subscription vars
roles regrole[] = array_agg(distinct us.claims_role::text)
    from
        unnest(subscriptions) us;

working_role regrole;
claimed_role regrole;
claims jsonb;

subscription_id uuid;
subscription_has_access bool;
visible_to_subscription_ids uuid[] = '{}';

-- structured info for wal's columns
columns realtime.wal_column[];
-- previous identity values for update/delete
old_columns realtime.wal_column[];

error_record_exceeds_max_size boolean = octet_length(wal::text) > max_record_bytes;

-- Primary jsonb output for record
output jsonb;

begin
perform set_config('role', null, true);

columns =
    array_agg(
        (
            x->>'name',
            x->>'type',
            x->>'typeoid',
            realtime.cast(
                (x->'value') #>> '{}',
                coalesce(
                    (x->>'typeoid')::regtype, -- null when wal2json version <= 2.4
                    (x->>'type')::regtype
                )
            ),
            (pks ->> 'name') is not null,
            true
        )::realtime.wal_column
    )
    from
        jsonb_array_elements(wal -> 'columns') x
        left join jsonb_array_elements(wal -> 'pk') pks
            on (x ->> 'name') = (pks ->> 'name');

old_columns =
    array_agg(
        (
            x->>'name',
            x->>'type',
            x->>'typeoid',
            realtime.cast(
                (x->'value') #>> '{}',
                coalesce(
                    (x->>'typeoid')::regtype, -- null when wal2json version <= 2.4
                    (x->>'type')::regtype
                )
            ),
            (pks ->> 'name') is not null,
            true
        )::realtime.wal_column
    )
    from
        jsonb_array_elements(wal -> 'identity') x
        left join jsonb_array_elements(wal -> 'pk') pks
            on (x ->> 'name') = (pks ->> 'name');

for working_role in select * from unnest(roles) loop

    -- Update `is_selectable` for columns and old_columns
    columns =
        array_agg(
            (
                c.name,
                c.type_name,
                c.type_oid,
                c.value,
                c.is_pkey,
                pg_catalog.has_column_privilege(working_role, entity_, c.name, 'SELECT')
            )::realtime.wal_column
        )
        from
            unnest(columns) c;

    old_columns =
            array_agg(
                (
                    c.name,
                    c.type_name,
                    c.type_oid,
                    c.value,
                    c.is_pkey,
                    pg_catalog.has_column_privilege(working_role, entity_, c.name, 'SELECT')
                )::realtime.wal_column
            )
            from
                unnest(old_columns) c;

    if action <> 'DELETE' and count(1) = 0 from unnest(columns) c where c.is_pkey then
        return next (
            jsonb_build_object(
                'schema', wal ->> 'schema',
                'table', wal ->> 'table',
                'type', action
            ),
            is_rls_enabled,
            -- subscriptions is already filtered by entity
            (select array_agg(s.subscription_id) from unnest(subscriptions) as s where claims_role = working_role),
            array['Error 400: Bad Request, no primary key']
        )::realtime.wal_rls;

    -- The claims role does not have SELECT permission to the primary key of entity
    elsif action <> 'DELETE' and sum(c.is_selectable::int) <> count(1) from unnest(columns) c where c.is_pkey then
        return next (
            jsonb_build_object(
                'schema', wal ->> 'schema',
                'table', wal ->> 'table',
                'type', action
            ),
            is_rls_enabled,
            (select array_agg(s.subscription_id) from unnest(subscriptions) as s where claims_role = working_role),
            array['Error 401: Unauthorized']
        )::realtime.wal_rls;

    else
        output = jsonb_build_object(
            'schema', wal ->> 'schema',
            'table', wal ->> 'table',
            'type', action,
            'commit_timestamp', to_char(
                ((wal ->> 'timestamp')::timestamptz at time zone 'utc'),
                'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"'
            ),
            'columns', (
                select
                    jsonb_agg(
                        jsonb_build_object(
                            'name', pa.attname,
                            'type', pt.typname
                        )
                        order by pa.attnum asc
                    )
                from
                    pg_attribute pa
                    join pg_type pt
                        on pa.atttypid = pt.oid
                where
                    attrelid = entity_
                    and attnum > 0
                    and pg_catalog.has_column_privilege(working_role, entity_, pa.attname, 'SELECT')
            )
        )
        -- Add "record" key for insert and update
        || case
            when action in ('INSERT', 'UPDATE') then
                jsonb_build_object(
                    'record',
                    (
                        select
                            jsonb_object_agg(
                                -- if unchanged toast, get column name and value from old record
                                coalesce((c).name, (oc).name),
                                case
                                    when (c).name is null then (oc).value
                                    else (c).value
                                end
                            )
                        from
                            unnest(columns) c
                            full outer join unnest(old_columns) oc
                                on (c).name = (oc).name
                        where
                            coalesce((c).is_selectable, (oc).is_selectable)
                            and ( not error_record_exceeds_max_size or (octet_length((c).value::text) <= 64))
                    )
                )
            else '{}'::jsonb
        end
        -- Add "old_record" key for update and delete
        || case
            when action = 'UPDATE' then
                jsonb_build_object(
                        'old_record',
                        (
                            select jsonb_object_agg((c).name, (c).value)
                            from unnest(old_columns) c
                            where
                                (c).is_selectable
                                and ( not error_record_exceeds_max_size or (octet_length((c).value::text) <= 64))
                        )
                    )
            when action = 'DELETE' then
                jsonb_build_object(
                    'old_record',
                    (
                        select jsonb_object_agg((c).name, (c).value)
                        from unnest(old_columns) c
                        where
                            (c).is_selectable
                            and ( not error_record_exceeds_max_size or (octet_length((c).value::text) <= 64))
                            and ( not is_rls_enabled or (c).is_pkey ) -- if RLS enabled, we can't secure deletes so filter to pkey
                    )
                )
            else '{}'::jsonb
        end;

        -- Create the prepared statement
        if is_rls_enabled and action <> 'DELETE' then
            if (select 1 from pg_prepared_statements where name = 'walrus_rls_stmt' limit 1) > 0 then
                deallocate walrus_rls_stmt;
            end if;
            execute realtime.build_prepared_statement_sql('walrus_rls_stmt', entity_, columns);
        end if;

        visible_to_subscription_ids = '{}';

        for subscription_id, claims in (
                select
                    subs.subscription_id,
                    subs.claims
                from
                    unnest(subscriptions) subs
                where
                    subs.entity = entity_
                    and subs.claims_role = working_role
                    and (
                        realtime.is_visible_through_filters(columns, subs.filters)
                        or (
                          action = 'DELETE'
                          and realtime.is_visible_through_filters(old_columns, subs.filters)
                        )
                    )
        ) loop

            if not is_rls_enabled or action = 'DELETE' then
                visible_to_subscription_ids = visible_to_subscription_ids || subscription_id;
            else
                -- Check if RLS allows the role to see the record
                perform
                    -- Trim leading and trailing quotes from working_role because set_config
                    -- doesn't recognize the role as valid if they are included
                    set_config('role', trim(both '"' from working_role::text), true),
                    set_config('request.jwt.claims', claims::text, true);

                execute 'execute walrus_rls_stmt' into subscription_has_access;

                if subscription_has_access then
                    visible_to_subscription_ids = visible_to_subscription_ids || subscription_id;
                end if;
            end if;
        end loop;

        perform set_config('role', null, true);

        return next (
            output,
            is_rls_enabled,
            visible_to_subscription_ids,
            case
                when error_record_exceeds_max_size then array['Error 413: Payload Too Large']
                else '{}'
            end
        )::realtime.wal_rls;

    end if;
end loop;

perform set_config('role', null, true);
end;
$$;


ALTER FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) OWNER TO supabase_admin;

--
-- Name: broadcast_changes(text, text, text, text, text, record, record, text); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.broadcast_changes(topic_name text, event_name text, operation text, table_name text, table_schema text, new record, old record, level text DEFAULT 'ROW'::text) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
    -- Declare a variable to hold the JSONB representation of the row
    row_data jsonb := '{}'::jsonb;
BEGIN
    IF level = 'STATEMENT' THEN
        RAISE EXCEPTION 'function can only be triggered for each row, not for each statement';
    END IF;
    -- Check the operation type and handle accordingly
    IF operation = 'INSERT' OR operation = 'UPDATE' OR operation = 'DELETE' THEN
        row_data := jsonb_build_object('old_record', OLD, 'record', NEW, 'operation', operation, 'table', table_name, 'schema', table_schema);
        PERFORM realtime.send (row_data, event_name, topic_name);
    ELSE
        RAISE EXCEPTION 'Unexpected operation type: %', operation;
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        RAISE EXCEPTION 'Failed to process the row: %', SQLERRM;
END;

$$;


ALTER FUNCTION realtime.broadcast_changes(topic_name text, event_name text, operation text, table_name text, table_schema text, new record, old record, level text) OWNER TO supabase_admin;

--
-- Name: build_prepared_statement_sql(text, regclass, realtime.wal_column[]); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) RETURNS text
    LANGUAGE sql
    AS $$
      /*
      Builds a sql string that, if executed, creates a prepared statement to
      tests retrive a row from *entity* by its primary key columns.
      Example
          select realtime.build_prepared_statement_sql('public.notes', '{"id"}'::text[], '{"bigint"}'::text[])
      */
          select
      'prepare ' || prepared_statement_name || ' as
          select
              exists(
                  select
                      1
                  from
                      ' || entity || '
                  where
                      ' || string_agg(quote_ident(pkc.name) || '=' || quote_nullable(pkc.value #>> '{}') , ' and ') || '
              )'
          from
              unnest(columns) pkc
          where
              pkc.is_pkey
          group by
              entity
      $$;


ALTER FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) OWNER TO supabase_admin;

--
-- Name: cast(text, regtype); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime."cast"(val text, type_ regtype) RETURNS jsonb
    LANGUAGE plpgsql IMMUTABLE
    AS $$
    declare
      res jsonb;
    begin
      execute format('select to_jsonb(%L::'|| type_::text || ')', val)  into res;
      return res;
    end
    $$;


ALTER FUNCTION realtime."cast"(val text, type_ regtype) OWNER TO supabase_admin;

--
-- Name: check_equality_op(realtime.equality_op, regtype, text, text); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) RETURNS boolean
    LANGUAGE plpgsql IMMUTABLE
    AS $$
      /*
      Casts *val_1* and *val_2* as type *type_* and check the *op* condition for truthiness
      */
      declare
          op_symbol text = (
              case
                  when op = 'eq' then '='
                  when op = 'neq' then '!='
                  when op = 'lt' then '<'
                  when op = 'lte' then '<='
                  when op = 'gt' then '>'
                  when op = 'gte' then '>='
                  when op = 'in' then '= any'
                  else 'UNKNOWN OP'
              end
          );
          res boolean;
      begin
          execute format(
              'select %L::'|| type_::text || ' ' || op_symbol
              || ' ( %L::'
              || (
                  case
                      when op = 'in' then type_::text || '[]'
                      else type_::text end
              )
              || ')', val_1, val_2) into res;
          return res;
      end;
      $$;


ALTER FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) OWNER TO supabase_admin;

--
-- Name: is_visible_through_filters(realtime.wal_column[], realtime.user_defined_filter[]); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) RETURNS boolean
    LANGUAGE sql IMMUTABLE
    AS $_$
    /*
    Should the record be visible (true) or filtered out (false) after *filters* are applied
    */
        select
            -- Default to allowed when no filters present
            $2 is null -- no filters. this should not happen because subscriptions has a default
            or array_length($2, 1) is null -- array length of an empty array is null
            or bool_and(
                coalesce(
                    realtime.check_equality_op(
                        op:=f.op,
                        type_:=coalesce(
                            col.type_oid::regtype, -- null when wal2json version <= 2.4
                            col.type_name::regtype
                        ),
                        -- cast jsonb to text
                        val_1:=col.value #>> '{}',
                        val_2:=f.value
                    ),
                    false -- if null, filter does not match
                )
            )
        from
            unnest(filters) f
            join unnest(columns) col
                on f.column_name = col.name;
    $_$;


ALTER FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) OWNER TO supabase_admin;

--
-- Name: list_changes(name, name, integer, integer); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) RETURNS SETOF realtime.wal_rls
    LANGUAGE sql
    SET log_min_messages TO 'fatal'
    AS $$
      with pub as (
        select
          concat_ws(
            ',',
            case when bool_or(pubinsert) then 'insert' else null end,
            case when bool_or(pubupdate) then 'update' else null end,
            case when bool_or(pubdelete) then 'delete' else null end
          ) as w2j_actions,
          coalesce(
            string_agg(
              realtime.quote_wal2json(format('%I.%I', schemaname, tablename)::regclass),
              ','
            ) filter (where ppt.tablename is not null and ppt.tablename not like '% %'),
            ''
          ) w2j_add_tables
        from
          pg_publication pp
          left join pg_publication_tables ppt
            on pp.pubname = ppt.pubname
        where
          pp.pubname = publication
        group by
          pp.pubname
        limit 1
      ),
      w2j as (
        select
          x.*, pub.w2j_add_tables
        from
          pub,
          pg_logical_slot_get_changes(
            slot_name, null, max_changes,
            'include-pk', 'true',
            'include-transaction', 'false',
            'include-timestamp', 'true',
            'include-type-oids', 'true',
            'format-version', '2',
            'actions', pub.w2j_actions,
            'add-tables', pub.w2j_add_tables
          ) x
      )
      select
        xyz.wal,
        xyz.is_rls_enabled,
        xyz.subscription_ids,
        xyz.errors
      from
        w2j,
        realtime.apply_rls(
          wal := w2j.data::jsonb,
          max_record_bytes := max_record_bytes
        ) xyz(wal, is_rls_enabled, subscription_ids, errors)
      where
        w2j.w2j_add_tables <> ''
        and xyz.subscription_ids[1] is not null
    $$;


ALTER FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) OWNER TO supabase_admin;

--
-- Name: quote_wal2json(regclass); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.quote_wal2json(entity regclass) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $$
      select
        (
          select string_agg('' || ch,'')
          from unnest(string_to_array(nsp.nspname::text, null)) with ordinality x(ch, idx)
          where
            not (x.idx = 1 and x.ch = '"')
            and not (
              x.idx = array_length(string_to_array(nsp.nspname::text, null), 1)
              and x.ch = '"'
            )
        )
        || '.'
        || (
          select string_agg('' || ch,'')
          from unnest(string_to_array(pc.relname::text, null)) with ordinality x(ch, idx)
          where
            not (x.idx = 1 and x.ch = '"')
            and not (
              x.idx = array_length(string_to_array(nsp.nspname::text, null), 1)
              and x.ch = '"'
            )
          )
      from
        pg_class pc
        join pg_namespace nsp
          on pc.relnamespace = nsp.oid
      where
        pc.oid = entity
    $$;


ALTER FUNCTION realtime.quote_wal2json(entity regclass) OWNER TO supabase_admin;

--
-- Name: send(jsonb, text, text, boolean); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.send(payload jsonb, event text, topic text, private boolean DEFAULT true) RETURNS void
    LANGUAGE plpgsql
    AS $$
BEGIN
  BEGIN
    -- Set the topic configuration
    EXECUTE format('SET LOCAL realtime.topic TO %L', topic);

    -- Attempt to insert the message
    INSERT INTO realtime.messages (payload, event, topic, private, extension)
    VALUES (payload, event, topic, private, 'broadcast');
  EXCEPTION
    WHEN OTHERS THEN
      -- Capture and notify the error
      PERFORM pg_notify(
          'realtime:system',
          jsonb_build_object(
              'error', SQLERRM,
              'function', 'realtime.send',
              'event', event,
              'topic', topic,
              'private', private
          )::text
      );
  END;
END;
$$;


ALTER FUNCTION realtime.send(payload jsonb, event text, topic text, private boolean) OWNER TO supabase_admin;

--
-- Name: subscription_check_filters(); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.subscription_check_filters() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    /*
    Validates that the user defined filters for a subscription:
    - refer to valid columns that the claimed role may access
    - values are coercable to the correct column type
    */
    declare
        col_names text[] = coalesce(
                array_agg(c.column_name order by c.ordinal_position),
                '{}'::text[]
            )
            from
                information_schema.columns c
            where
                format('%I.%I', c.table_schema, c.table_name)::regclass = new.entity
                and pg_catalog.has_column_privilege(
                    (new.claims ->> 'role'),
                    format('%I.%I', c.table_schema, c.table_name)::regclass,
                    c.column_name,
                    'SELECT'
                );
        filter realtime.user_defined_filter;
        col_type regtype;

        in_val jsonb;
    begin
        for filter in select * from unnest(new.filters) loop
            -- Filtered column is valid
            if not filter.column_name = any(col_names) then
                raise exception 'invalid column for filter %', filter.column_name;
            end if;

            -- Type is sanitized and safe for string interpolation
            col_type = (
                select atttypid::regtype
                from pg_catalog.pg_attribute
                where attrelid = new.entity
                      and attname = filter.column_name
            );
            if col_type is null then
                raise exception 'failed to lookup type for column %', filter.column_name;
            end if;

            -- Set maximum number of entries for in filter
            if filter.op = 'in'::realtime.equality_op then
                in_val = realtime.cast(filter.value, (col_type::text || '[]')::regtype);
                if coalesce(jsonb_array_length(in_val), 0) > 100 then
                    raise exception 'too many values for `in` filter. Maximum 100';
                end if;
            else
                -- raises an exception if value is not coercable to type
                perform realtime.cast(filter.value, col_type);
            end if;

        end loop;

        -- Apply consistent order to filters so the unique constraint on
        -- (subscription_id, entity, filters) can't be tricked by a different filter order
        new.filters = coalesce(
            array_agg(f order by f.column_name, f.op, f.value),
            '{}'
        ) from unnest(new.filters) f;

        return new;
    end;
    $$;


ALTER FUNCTION realtime.subscription_check_filters() OWNER TO supabase_admin;

--
-- Name: to_regrole(text); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.to_regrole(role_name text) RETURNS regrole
    LANGUAGE sql IMMUTABLE
    AS $$ select role_name::regrole $$;


ALTER FUNCTION realtime.to_regrole(role_name text) OWNER TO supabase_admin;

--
-- Name: topic(); Type: FUNCTION; Schema: realtime; Owner: supabase_realtime_admin
--

CREATE FUNCTION realtime.topic() RETURNS text
    LANGUAGE sql STABLE
    AS $$
select nullif(current_setting('realtime.topic', true), '')::text;
$$;


ALTER FUNCTION realtime.topic() OWNER TO supabase_realtime_admin;

--
-- Name: can_insert_object(text, text, uuid, jsonb); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.can_insert_object(bucketid text, name text, owner uuid, metadata jsonb) RETURNS void
    LANGUAGE plpgsql
    AS $$
BEGIN
  INSERT INTO "storage"."objects" ("bucket_id", "name", "owner", "metadata") VALUES (bucketid, name, owner, metadata);
  -- hack to rollback the successful insert
  RAISE sqlstate 'PT200' using
  message = 'ROLLBACK',
  detail = 'rollback successful insert';
END
$$;


ALTER FUNCTION storage.can_insert_object(bucketid text, name text, owner uuid, metadata jsonb) OWNER TO supabase_storage_admin;

--
-- Name: extension(text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.extension(name text) RETURNS text
    LANGUAGE plpgsql
    AS $$
DECLARE
_parts text[];
_filename text;
BEGIN
	select string_to_array(name, '/') into _parts;
	select _parts[array_length(_parts,1)] into _filename;
	-- @todo return the last part instead of 2
	return reverse(split_part(reverse(_filename), '.', 1));
END
$$;


ALTER FUNCTION storage.extension(name text) OWNER TO supabase_storage_admin;

--
-- Name: filename(text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.filename(name text) RETURNS text
    LANGUAGE plpgsql
    AS $$
DECLARE
_parts text[];
BEGIN
	select string_to_array(name, '/') into _parts;
	return _parts[array_length(_parts,1)];
END
$$;


ALTER FUNCTION storage.filename(name text) OWNER TO supabase_storage_admin;

--
-- Name: foldername(text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.foldername(name text) RETURNS text[]
    LANGUAGE plpgsql
    AS $$
DECLARE
_parts text[];
BEGIN
	select string_to_array(name, '/') into _parts;
	return _parts[1:array_length(_parts,1)-1];
END
$$;


ALTER FUNCTION storage.foldername(name text) OWNER TO supabase_storage_admin;

--
-- Name: get_size_by_bucket(); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.get_size_by_bucket() RETURNS TABLE(size bigint, bucket_id text)
    LANGUAGE plpgsql
    AS $$
BEGIN
    return query
        select sum((metadata->>'size')::int) as size, obj.bucket_id
        from "storage".objects as obj
        group by obj.bucket_id;
END
$$;


ALTER FUNCTION storage.get_size_by_bucket() OWNER TO supabase_storage_admin;

--
-- Name: list_multipart_uploads_with_delimiter(text, text, text, integer, text, text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.list_multipart_uploads_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer DEFAULT 100, next_key_token text DEFAULT ''::text, next_upload_token text DEFAULT ''::text) RETURNS TABLE(key text, id text, created_at timestamp with time zone)
    LANGUAGE plpgsql
    AS $_$
BEGIN
    RETURN QUERY EXECUTE
        'SELECT DISTINCT ON(key COLLATE "C") * from (
            SELECT
                CASE
                    WHEN position($2 IN substring(key from length($1) + 1)) > 0 THEN
                        substring(key from 1 for length($1) + position($2 IN substring(key from length($1) + 1)))
                    ELSE
                        key
                END AS key, id, created_at
            FROM
                storage.s3_multipart_uploads
            WHERE
                bucket_id = $5 AND
                key ILIKE $1 || ''%'' AND
                CASE
                    WHEN $4 != '''' AND $6 = '''' THEN
                        CASE
                            WHEN position($2 IN substring(key from length($1) + 1)) > 0 THEN
                                substring(key from 1 for length($1) + position($2 IN substring(key from length($1) + 1))) COLLATE "C" > $4
                            ELSE
                                key COLLATE "C" > $4
                            END
                    ELSE
                        true
                END AND
                CASE
                    WHEN $6 != '''' THEN
                        id COLLATE "C" > $6
                    ELSE
                        true
                    END
            ORDER BY
                key COLLATE "C" ASC, created_at ASC) as e order by key COLLATE "C" LIMIT $3'
        USING prefix_param, delimiter_param, max_keys, next_key_token, bucket_id, next_upload_token;
END;
$_$;


ALTER FUNCTION storage.list_multipart_uploads_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer, next_key_token text, next_upload_token text) OWNER TO supabase_storage_admin;

--
-- Name: list_objects_with_delimiter(text, text, text, integer, text, text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.list_objects_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer DEFAULT 100, start_after text DEFAULT ''::text, next_token text DEFAULT ''::text) RETURNS TABLE(name text, id uuid, metadata jsonb, updated_at timestamp with time zone)
    LANGUAGE plpgsql
    AS $_$
BEGIN
    RETURN QUERY EXECUTE
        'SELECT DISTINCT ON(name COLLATE "C") * from (
            SELECT
                CASE
                    WHEN position($2 IN substring(name from length($1) + 1)) > 0 THEN
                        substring(name from 1 for length($1) + position($2 IN substring(name from length($1) + 1)))
                    ELSE
                        name
                END AS name, id, metadata, updated_at
            FROM
                storage.objects
            WHERE
                bucket_id = $5 AND
                name ILIKE $1 || ''%'' AND
                CASE
                    WHEN $6 != '''' THEN
                    name COLLATE "C" > $6
                ELSE true END
                AND CASE
                    WHEN $4 != '''' THEN
                        CASE
                            WHEN position($2 IN substring(name from length($1) + 1)) > 0 THEN
                                substring(name from 1 for length($1) + position($2 IN substring(name from length($1) + 1))) COLLATE "C" > $4
                            ELSE
                                name COLLATE "C" > $4
                            END
                    ELSE
                        true
                END
            ORDER BY
                name COLLATE "C" ASC) as e order by name COLLATE "C" LIMIT $3'
        USING prefix_param, delimiter_param, max_keys, next_token, bucket_id, start_after;
END;
$_$;


ALTER FUNCTION storage.list_objects_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer, start_after text, next_token text) OWNER TO supabase_storage_admin;

--
-- Name: operation(); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.operation() RETURNS text
    LANGUAGE plpgsql STABLE
    AS $$
BEGIN
    RETURN current_setting('storage.operation', true);
END;
$$;


ALTER FUNCTION storage.operation() OWNER TO supabase_storage_admin;

--
-- Name: search(text, text, integer, integer, integer, text, text, text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.search(prefix text, bucketname text, limits integer DEFAULT 100, levels integer DEFAULT 1, offsets integer DEFAULT 0, search text DEFAULT ''::text, sortcolumn text DEFAULT 'name'::text, sortorder text DEFAULT 'asc'::text) RETURNS TABLE(name text, id uuid, updated_at timestamp with time zone, created_at timestamp with time zone, last_accessed_at timestamp with time zone, metadata jsonb)
    LANGUAGE plpgsql STABLE
    AS $_$
declare
  v_order_by text;
  v_sort_order text;
begin
  case
    when sortcolumn = 'name' then
      v_order_by = 'name';
    when sortcolumn = 'updated_at' then
      v_order_by = 'updated_at';
    when sortcolumn = 'created_at' then
      v_order_by = 'created_at';
    when sortcolumn = 'last_accessed_at' then
      v_order_by = 'last_accessed_at';
    else
      v_order_by = 'name';
  end case;

  case
    when sortorder = 'asc' then
      v_sort_order = 'asc';
    when sortorder = 'desc' then
      v_sort_order = 'desc';
    else
      v_sort_order = 'asc';
  end case;

  v_order_by = v_order_by || ' ' || v_sort_order;

  return query execute
    'with folders as (
       select path_tokens[$1] as folder
       from storage.objects
         where objects.name ilike $2 || $3 || ''%''
           and bucket_id = $4
           and array_length(objects.path_tokens, 1) <> $1
       group by folder
       order by folder ' || v_sort_order || '
     )
     (select folder as "name",
            null as id,
            null as updated_at,
            null as created_at,
            null as last_accessed_at,
            null as metadata from folders)
     union all
     (select path_tokens[$1] as "name",
            id,
            updated_at,
            created_at,
            last_accessed_at,
            metadata
     from storage.objects
     where objects.name ilike $2 || $3 || ''%''
       and bucket_id = $4
       and array_length(objects.path_tokens, 1) = $1
     order by ' || v_order_by || ')
     limit $5
     offset $6' using levels, prefix, search, bucketname, limits, offsets;
end;
$_$;


ALTER FUNCTION storage.search(prefix text, bucketname text, limits integer, levels integer, offsets integer, search text, sortcolumn text, sortorder text) OWNER TO supabase_storage_admin;

--
-- Name: update_updated_at_column(); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.update_updated_at_column() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW; 
END;
$$;


ALTER FUNCTION storage.update_updated_at_column() OWNER TO supabase_storage_admin;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: audit_log_entries; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.audit_log_entries (
    instance_id uuid,
    id uuid NOT NULL,
    payload json,
    created_at timestamp with time zone,
    ip_address character varying(64) DEFAULT ''::character varying NOT NULL
);


ALTER TABLE auth.audit_log_entries OWNER TO supabase_auth_admin;

--
-- Name: TABLE audit_log_entries; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.audit_log_entries IS 'Auth: Audit trail for user actions.';


--
-- Name: flow_state; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.flow_state (
    id uuid NOT NULL,
    user_id uuid,
    auth_code text NOT NULL,
    code_challenge_method auth.code_challenge_method NOT NULL,
    code_challenge text NOT NULL,
    provider_type text NOT NULL,
    provider_access_token text,
    provider_refresh_token text,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    authentication_method text NOT NULL,
    auth_code_issued_at timestamp with time zone
);


ALTER TABLE auth.flow_state OWNER TO supabase_auth_admin;

--
-- Name: TABLE flow_state; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.flow_state IS 'stores metadata for pkce logins';


--
-- Name: identities; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.identities (
    provider_id text NOT NULL,
    user_id uuid NOT NULL,
    identity_data jsonb NOT NULL,
    provider text NOT NULL,
    last_sign_in_at timestamp with time zone,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    email text GENERATED ALWAYS AS (lower((identity_data ->> 'email'::text))) STORED,
    id uuid DEFAULT gen_random_uuid() NOT NULL
);


ALTER TABLE auth.identities OWNER TO supabase_auth_admin;

--
-- Name: TABLE identities; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.identities IS 'Auth: Stores identities associated to a user.';


--
-- Name: COLUMN identities.email; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON COLUMN auth.identities.email IS 'Auth: Email is a generated column that references the optional email property in the identity_data';


--
-- Name: instances; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.instances (
    id uuid NOT NULL,
    uuid uuid,
    raw_base_config text,
    created_at timestamp with time zone,
    updated_at timestamp with time zone
);


ALTER TABLE auth.instances OWNER TO supabase_auth_admin;

--
-- Name: TABLE instances; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.instances IS 'Auth: Manages users across multiple sites.';


--
-- Name: mfa_amr_claims; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.mfa_amr_claims (
    session_id uuid NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    authentication_method text NOT NULL,
    id uuid NOT NULL
);


ALTER TABLE auth.mfa_amr_claims OWNER TO supabase_auth_admin;

--
-- Name: TABLE mfa_amr_claims; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.mfa_amr_claims IS 'auth: stores authenticator method reference claims for multi factor authentication';


--
-- Name: mfa_challenges; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.mfa_challenges (
    id uuid NOT NULL,
    factor_id uuid NOT NULL,
    created_at timestamp with time zone NOT NULL,
    verified_at timestamp with time zone,
    ip_address inet NOT NULL,
    otp_code text,
    web_authn_session_data jsonb
);


ALTER TABLE auth.mfa_challenges OWNER TO supabase_auth_admin;

--
-- Name: TABLE mfa_challenges; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.mfa_challenges IS 'auth: stores metadata about challenge requests made';


--
-- Name: mfa_factors; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.mfa_factors (
    id uuid NOT NULL,
    user_id uuid NOT NULL,
    friendly_name text,
    factor_type auth.factor_type NOT NULL,
    status auth.factor_status NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    secret text,
    phone text,
    last_challenged_at timestamp with time zone,
    web_authn_credential jsonb,
    web_authn_aaguid uuid
);


ALTER TABLE auth.mfa_factors OWNER TO supabase_auth_admin;

--
-- Name: TABLE mfa_factors; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.mfa_factors IS 'auth: stores metadata about factors';


--
-- Name: one_time_tokens; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.one_time_tokens (
    id uuid NOT NULL,
    user_id uuid NOT NULL,
    token_type auth.one_time_token_type NOT NULL,
    token_hash text NOT NULL,
    relates_to text NOT NULL,
    created_at timestamp without time zone DEFAULT now() NOT NULL,
    updated_at timestamp without time zone DEFAULT now() NOT NULL,
    CONSTRAINT one_time_tokens_token_hash_check CHECK ((char_length(token_hash) > 0))
);


ALTER TABLE auth.one_time_tokens OWNER TO supabase_auth_admin;

--
-- Name: refresh_tokens; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.refresh_tokens (
    instance_id uuid,
    id bigint NOT NULL,
    token character varying(255),
    user_id character varying(255),
    revoked boolean,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    parent character varying(255),
    session_id uuid
);


ALTER TABLE auth.refresh_tokens OWNER TO supabase_auth_admin;

--
-- Name: TABLE refresh_tokens; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.refresh_tokens IS 'Auth: Store of tokens used to refresh JWT tokens once they expire.';


--
-- Name: refresh_tokens_id_seq; Type: SEQUENCE; Schema: auth; Owner: supabase_auth_admin
--

CREATE SEQUENCE auth.refresh_tokens_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE auth.refresh_tokens_id_seq OWNER TO supabase_auth_admin;

--
-- Name: refresh_tokens_id_seq; Type: SEQUENCE OWNED BY; Schema: auth; Owner: supabase_auth_admin
--

ALTER SEQUENCE auth.refresh_tokens_id_seq OWNED BY auth.refresh_tokens.id;


--
-- Name: saml_providers; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.saml_providers (
    id uuid NOT NULL,
    sso_provider_id uuid NOT NULL,
    entity_id text NOT NULL,
    metadata_xml text NOT NULL,
    metadata_url text,
    attribute_mapping jsonb,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    name_id_format text,
    CONSTRAINT "entity_id not empty" CHECK ((char_length(entity_id) > 0)),
    CONSTRAINT "metadata_url not empty" CHECK (((metadata_url = NULL::text) OR (char_length(metadata_url) > 0))),
    CONSTRAINT "metadata_xml not empty" CHECK ((char_length(metadata_xml) > 0))
);


ALTER TABLE auth.saml_providers OWNER TO supabase_auth_admin;

--
-- Name: TABLE saml_providers; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.saml_providers IS 'Auth: Manages SAML Identity Provider connections.';


--
-- Name: saml_relay_states; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.saml_relay_states (
    id uuid NOT NULL,
    sso_provider_id uuid NOT NULL,
    request_id text NOT NULL,
    for_email text,
    redirect_to text,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    flow_state_id uuid,
    CONSTRAINT "request_id not empty" CHECK ((char_length(request_id) > 0))
);


ALTER TABLE auth.saml_relay_states OWNER TO supabase_auth_admin;

--
-- Name: TABLE saml_relay_states; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.saml_relay_states IS 'Auth: Contains SAML Relay State information for each Service Provider initiated login.';


--
-- Name: schema_migrations; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.schema_migrations (
    version character varying(255) NOT NULL
);


ALTER TABLE auth.schema_migrations OWNER TO supabase_auth_admin;

--
-- Name: TABLE schema_migrations; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.schema_migrations IS 'Auth: Manages updates to the auth system.';


--
-- Name: sessions; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.sessions (
    id uuid NOT NULL,
    user_id uuid NOT NULL,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    factor_id uuid,
    aal auth.aal_level,
    not_after timestamp with time zone,
    refreshed_at timestamp without time zone,
    user_agent text,
    ip inet,
    tag text
);


ALTER TABLE auth.sessions OWNER TO supabase_auth_admin;

--
-- Name: TABLE sessions; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.sessions IS 'Auth: Stores session data associated to a user.';


--
-- Name: COLUMN sessions.not_after; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON COLUMN auth.sessions.not_after IS 'Auth: Not after is a nullable column that contains a timestamp after which the session should be regarded as expired.';


--
-- Name: sso_domains; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.sso_domains (
    id uuid NOT NULL,
    sso_provider_id uuid NOT NULL,
    domain text NOT NULL,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    CONSTRAINT "domain not empty" CHECK ((char_length(domain) > 0))
);


ALTER TABLE auth.sso_domains OWNER TO supabase_auth_admin;

--
-- Name: TABLE sso_domains; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.sso_domains IS 'Auth: Manages SSO email address domain mapping to an SSO Identity Provider.';


--
-- Name: sso_providers; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.sso_providers (
    id uuid NOT NULL,
    resource_id text,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    CONSTRAINT "resource_id not empty" CHECK (((resource_id = NULL::text) OR (char_length(resource_id) > 0)))
);


ALTER TABLE auth.sso_providers OWNER TO supabase_auth_admin;

--
-- Name: TABLE sso_providers; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.sso_providers IS 'Auth: Manages SSO identity provider information; see saml_providers for SAML.';


--
-- Name: COLUMN sso_providers.resource_id; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON COLUMN auth.sso_providers.resource_id IS 'Auth: Uniquely identifies a SSO provider according to a user-chosen resource ID (case insensitive), useful in infrastructure as code.';


--
-- Name: users; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.users (
    instance_id uuid,
    id uuid NOT NULL,
    aud character varying(255),
    role character varying(255),
    email character varying(255),
    encrypted_password character varying(255),
    email_confirmed_at timestamp with time zone,
    invited_at timestamp with time zone,
    confirmation_token character varying(255),
    confirmation_sent_at timestamp with time zone,
    recovery_token character varying(255),
    recovery_sent_at timestamp with time zone,
    email_change_token_new character varying(255),
    email_change character varying(255),
    email_change_sent_at timestamp with time zone,
    last_sign_in_at timestamp with time zone,
    raw_app_meta_data jsonb,
    raw_user_meta_data jsonb,
    is_super_admin boolean,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    phone text DEFAULT NULL::character varying,
    phone_confirmed_at timestamp with time zone,
    phone_change text DEFAULT ''::character varying,
    phone_change_token character varying(255) DEFAULT ''::character varying,
    phone_change_sent_at timestamp with time zone,
    confirmed_at timestamp with time zone GENERATED ALWAYS AS (LEAST(email_confirmed_at, phone_confirmed_at)) STORED,
    email_change_token_current character varying(255) DEFAULT ''::character varying,
    email_change_confirm_status smallint DEFAULT 0,
    banned_until timestamp with time zone,
    reauthentication_token character varying(255) DEFAULT ''::character varying,
    reauthentication_sent_at timestamp with time zone,
    is_sso_user boolean DEFAULT false NOT NULL,
    deleted_at timestamp with time zone,
    is_anonymous boolean DEFAULT false NOT NULL,
    CONSTRAINT users_email_change_confirm_status_check CHECK (((email_change_confirm_status >= 0) AND (email_change_confirm_status <= 2)))
);


ALTER TABLE auth.users OWNER TO supabase_auth_admin;

--
-- Name: TABLE users; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.users IS 'Auth: Stores user login data within a secure schema.';


--
-- Name: COLUMN users.is_sso_user; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON COLUMN auth.users.is_sso_user IS 'Auth: Set this column to true when the account comes from SSO. These accounts can have duplicate emails.';


--
-- Name: intern_forms; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.intern_forms (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    user_id uuid NOT NULL,
    form_data jsonb NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.intern_forms OWNER TO postgres;

--
-- Name: user_portfolios; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.user_portfolios (
    user_id uuid NOT NULL,
    portfolio_id text NOT NULL,
    is_published boolean DEFAULT false NOT NULL,
    created_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.user_portfolios OWNER TO postgres;

--
-- Name: messages; Type: TABLE; Schema: realtime; Owner: supabase_realtime_admin
--

CREATE TABLE realtime.messages (
    topic text NOT NULL,
    extension text NOT NULL,
    payload jsonb,
    event text,
    private boolean DEFAULT false,
    updated_at timestamp without time zone DEFAULT now() NOT NULL,
    inserted_at timestamp without time zone DEFAULT now() NOT NULL,
    id uuid DEFAULT gen_random_uuid() NOT NULL
)
PARTITION BY RANGE (inserted_at);


ALTER TABLE realtime.messages OWNER TO supabase_realtime_admin;

--
-- Name: schema_migrations; Type: TABLE; Schema: realtime; Owner: supabase_admin
--

CREATE TABLE realtime.schema_migrations (
    version bigint NOT NULL,
    inserted_at timestamp(0) without time zone
);


ALTER TABLE realtime.schema_migrations OWNER TO supabase_admin;

--
-- Name: subscription; Type: TABLE; Schema: realtime; Owner: supabase_admin
--

CREATE TABLE realtime.subscription (
    id bigint NOT NULL,
    subscription_id uuid NOT NULL,
    entity regclass NOT NULL,
    filters realtime.user_defined_filter[] DEFAULT '{}'::realtime.user_defined_filter[] NOT NULL,
    claims jsonb NOT NULL,
    claims_role regrole GENERATED ALWAYS AS (realtime.to_regrole((claims ->> 'role'::text))) STORED NOT NULL,
    created_at timestamp without time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);


ALTER TABLE realtime.subscription OWNER TO supabase_admin;

--
-- Name: subscription_id_seq; Type: SEQUENCE; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE realtime.subscription ALTER COLUMN id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME realtime.subscription_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: buckets; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.buckets (
    id text NOT NULL,
    name text NOT NULL,
    owner uuid,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    public boolean DEFAULT false,
    avif_autodetection boolean DEFAULT false,
    file_size_limit bigint,
    allowed_mime_types text[],
    owner_id text
);


ALTER TABLE storage.buckets OWNER TO supabase_storage_admin;

--
-- Name: COLUMN buckets.owner; Type: COMMENT; Schema: storage; Owner: supabase_storage_admin
--

COMMENT ON COLUMN storage.buckets.owner IS 'Field is deprecated, use owner_id instead';


--
-- Name: migrations; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.migrations (
    id integer NOT NULL,
    name character varying(100) NOT NULL,
    hash character varying(40) NOT NULL,
    executed_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE storage.migrations OWNER TO supabase_storage_admin;

--
-- Name: objects; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.objects (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    bucket_id text,
    name text,
    owner uuid,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    last_accessed_at timestamp with time zone DEFAULT now(),
    metadata jsonb,
    path_tokens text[] GENERATED ALWAYS AS (string_to_array(name, '/'::text)) STORED,
    version text,
    owner_id text,
    user_metadata jsonb
);


ALTER TABLE storage.objects OWNER TO supabase_storage_admin;

--
-- Name: COLUMN objects.owner; Type: COMMENT; Schema: storage; Owner: supabase_storage_admin
--

COMMENT ON COLUMN storage.objects.owner IS 'Field is deprecated, use owner_id instead';


--
-- Name: s3_multipart_uploads; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.s3_multipart_uploads (
    id text NOT NULL,
    in_progress_size bigint DEFAULT 0 NOT NULL,
    upload_signature text NOT NULL,
    bucket_id text NOT NULL,
    key text NOT NULL COLLATE pg_catalog."C",
    version text NOT NULL,
    owner_id text,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    user_metadata jsonb
);


ALTER TABLE storage.s3_multipart_uploads OWNER TO supabase_storage_admin;

--
-- Name: s3_multipart_uploads_parts; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.s3_multipart_uploads_parts (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    upload_id text NOT NULL,
    size bigint DEFAULT 0 NOT NULL,
    part_number integer NOT NULL,
    bucket_id text NOT NULL,
    key text NOT NULL COLLATE pg_catalog."C",
    etag text NOT NULL,
    owner_id text,
    version text NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL
);


ALTER TABLE storage.s3_multipart_uploads_parts OWNER TO supabase_storage_admin;

--
-- Name: refresh_tokens id; Type: DEFAULT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.refresh_tokens ALTER COLUMN id SET DEFAULT nextval('auth.refresh_tokens_id_seq'::regclass);


--
-- Data for Name: audit_log_entries; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.audit_log_entries (instance_id, id, payload, created_at, ip_address) FROM stdin;
00000000-0000-0000-0000-000000000000	e9624f19-23a7-483d-abe5-21131f807bf7	{"action":"user_signedup","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"team","traits":{"provider":"google"}}	2025-04-13 17:34:32.644675+00	
00000000-0000-0000-0000-000000000000	92e70c03-3350-45d3-83fc-b6e3d9b9916d	{"action":"login","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"google"}}	2025-04-13 18:09:18.454838+00	
00000000-0000-0000-0000-000000000000	3a2d149a-79e0-4e83-a0b8-2dd4273fd00c	{"action":"token_refreshed","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-13 19:17:26.831672+00	
00000000-0000-0000-0000-000000000000	aa129d99-45a9-4ff6-8692-eac5887bacb8	{"action":"token_revoked","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-13 19:17:26.832537+00	
00000000-0000-0000-0000-000000000000	212d9027-fa7e-4d8e-9ac7-524ef6a1a94b	{"action":"login","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"google"}}	2025-04-13 20:03:05.218022+00	
00000000-0000-0000-0000-000000000000	5243d713-42d0-4fd9-a662-8b9574ff0d1c	{"action":"login","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"google"}}	2025-04-13 20:05:10.338023+00	
00000000-0000-0000-0000-000000000000	ff5310ea-f963-4912-86ef-436252a76f2e	{"action":"login","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"google"}}	2025-04-13 20:11:56.80959+00	
00000000-0000-0000-0000-000000000000	59efa692-40f7-4579-9a1e-1433b745fc26	{"action":"login","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"google"}}	2025-04-13 20:12:07.41983+00	
00000000-0000-0000-0000-000000000000	a75597f8-3c46-4967-a129-aa90e2baefd9	{"action":"login","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"google"}}	2025-04-13 20:12:13.863462+00	
00000000-0000-0000-0000-000000000000	9fe72a44-557e-4d85-9e03-089a82af7462	{"action":"login","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"google"}}	2025-04-13 20:18:00.2625+00	
00000000-0000-0000-0000-000000000000	bbfcab7b-17f6-4bc2-9435-9155a367ab51	{"action":"token_refreshed","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-13 20:23:35.652034+00	
00000000-0000-0000-0000-000000000000	9c884ee2-8a75-429a-be9b-bfd65e80464d	{"action":"token_revoked","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-13 20:23:35.657951+00	
00000000-0000-0000-0000-000000000000	f08fc11e-4950-47a0-bb04-e829b1463d1a	{"action":"token_refreshed","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-14 05:59:51.518037+00	
00000000-0000-0000-0000-000000000000	a41ab2e3-6274-4f0d-8f3e-a35b3062916f	{"action":"token_revoked","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-14 05:59:51.526583+00	
00000000-0000-0000-0000-000000000000	8da008fa-2541-411c-b949-db4fc8a59c15	{"action":"token_refreshed","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-14 16:40:19.006923+00	
00000000-0000-0000-0000-000000000000	3926c775-08ae-48e9-8c21-5104dfe3ee9f	{"action":"token_revoked","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-14 16:40:19.018893+00	
00000000-0000-0000-0000-000000000000	baf140cc-723b-474c-b7b6-d4fc10447c37	{"action":"token_refreshed","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-14 16:54:14.350819+00	
00000000-0000-0000-0000-000000000000	24565ee4-5ad4-4028-beae-f4aa7f05c2bb	{"action":"token_revoked","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-14 16:54:14.352862+00	
00000000-0000-0000-0000-000000000000	51f7fbcd-fffd-44ce-9861-e847c150b041	{"action":"login","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"google"}}	2025-04-14 17:05:58.324462+00	
00000000-0000-0000-0000-000000000000	6cf087db-ca88-4727-97df-bdafce1489f4	{"action":"login","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"google"}}	2025-04-14 17:36:28.401987+00	
00000000-0000-0000-0000-000000000000	5ca5fb99-483c-41fa-a108-c40f63b8bd80	{"action":"login","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"google"}}	2025-04-14 17:39:13.433067+00	
00000000-0000-0000-0000-000000000000	02a00243-b9e1-4dab-b4d8-7d6ba6ab4fc7	{"action":"token_refreshed","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-14 18:35:25.211866+00	
00000000-0000-0000-0000-000000000000	2030c738-c236-46f6-abf4-fef260785532	{"action":"token_revoked","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-14 18:35:25.216994+00	
00000000-0000-0000-0000-000000000000	7c84a5a8-7e18-461c-aa32-478ff13f21f7	{"action":"login","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"google"}}	2025-04-14 18:36:12.320953+00	
00000000-0000-0000-0000-000000000000	afe88a06-291f-45cc-a692-35c9e2a33d20	{"action":"login","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"google"}}	2025-04-14 18:38:17.790463+00	
00000000-0000-0000-0000-000000000000	2baa6915-3221-4f61-b013-3231a267596a	{"action":"login","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"google"}}	2025-04-14 18:40:13.65315+00	
00000000-0000-0000-0000-000000000000	b91b2938-42f1-4926-9330-4018aebfb028	{"action":"login","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"google"}}	2025-04-14 18:44:43.414435+00	
00000000-0000-0000-0000-000000000000	bd031804-23cc-45ef-8924-34f4106f3f98	{"action":"login","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"google"}}	2025-04-14 18:55:38.19017+00	
00000000-0000-0000-0000-000000000000	874a1bdc-de61-4c2b-a6c6-a0144aac2274	{"action":"login","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"google"}}	2025-04-14 19:06:27.948794+00	
00000000-0000-0000-0000-000000000000	0cdec997-05cb-47f5-bfd0-aa13b4c47408	{"action":"login","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"google"}}	2025-04-14 19:08:09.732317+00	
00000000-0000-0000-0000-000000000000	d58be08b-5b20-4f54-abcf-4029451ceb79	{"action":"login","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"google"}}	2025-04-14 19:34:49.230626+00	
00000000-0000-0000-0000-000000000000	6e0db15a-5219-4529-9550-fe852f7286a7	{"action":"login","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"google"}}	2025-04-14 19:40:11.843634+00	
00000000-0000-0000-0000-000000000000	c4eeeda7-dbe7-422c-b956-52c018adeb4f	{"action":"login","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"google"}}	2025-04-14 19:48:08.842119+00	
00000000-0000-0000-0000-000000000000	7eb4051f-a1b6-411c-8c6d-941ade46316c	{"action":"token_refreshed","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-15 04:20:02.243252+00	
00000000-0000-0000-0000-000000000000	c7b9017f-a2de-4205-b473-c9ee1c4f7247	{"action":"token_revoked","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-15 04:20:02.253514+00	
00000000-0000-0000-0000-000000000000	42a21511-afea-4526-8019-67729b60c6f7	{"action":"token_refreshed","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-15 05:32:06.723345+00	
00000000-0000-0000-0000-000000000000	c3fff77a-24e9-45ed-8c15-5eee72026e99	{"action":"token_revoked","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-15 05:32:06.724195+00	
00000000-0000-0000-0000-000000000000	5c3e50b0-d35d-4db0-a2fc-f602e5169a42	{"action":"token_refreshed","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-15 10:59:52.784027+00	
00000000-0000-0000-0000-000000000000	f3750fa1-aa84-456d-af97-5ad626dff398	{"action":"token_revoked","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-15 10:59:52.798293+00	
00000000-0000-0000-0000-000000000000	ada32788-bb82-4975-b480-c493bc403e7f	{"action":"login","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"google"}}	2025-04-15 11:24:05.34474+00	
00000000-0000-0000-0000-000000000000	ecff5032-e87f-41a2-8078-6893573ea782	{"action":"token_refreshed","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-15 11:25:40.651968+00	
00000000-0000-0000-0000-000000000000	1385e4ec-443b-47cc-9eea-854541fb6608	{"action":"token_revoked","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-15 11:25:40.65285+00	
00000000-0000-0000-0000-000000000000	ea55ba57-cd10-492e-af1b-556e9a278d42	{"action":"login","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"google"}}	2025-04-15 11:28:59.85602+00	
00000000-0000-0000-0000-000000000000	7a3ab002-1a62-4d5d-b20d-49c77912a73f	{"action":"token_refreshed","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-15 15:56:55.987843+00	
00000000-0000-0000-0000-000000000000	5a601964-1aa0-4ee4-ba8c-1da0be3a688b	{"action":"token_revoked","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-15 15:56:55.99587+00	
00000000-0000-0000-0000-000000000000	011b3798-0122-4958-8c22-3ed424beb9b8	{"action":"token_refreshed","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-15 16:50:52.32846+00	
00000000-0000-0000-0000-000000000000	a7a560e3-81f9-4284-afc6-d91e792414c6	{"action":"token_revoked","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-15 16:50:52.330354+00	
00000000-0000-0000-0000-000000000000	f1dbdd5d-3868-401d-a1c5-512210a7011e	{"action":"login","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"google"}}	2025-04-15 16:57:29.879631+00	
00000000-0000-0000-0000-000000000000	93dff150-6216-4425-a7b1-e296f7568717	{"action":"token_refreshed","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-15 18:22:29.900395+00	
00000000-0000-0000-0000-000000000000	942c078e-f4c5-407f-bd92-3506773d263b	{"action":"token_revoked","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-15 18:22:29.902658+00	
00000000-0000-0000-0000-000000000000	13c2cce6-045b-46bf-bbb3-89e8b9af3f3d	{"action":"token_refreshed","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-15 18:46:06.592647+00	
00000000-0000-0000-0000-000000000000	107a1149-87a1-4b8e-94ae-b5af0f18d6e9	{"action":"token_revoked","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-15 18:46:06.595241+00	
00000000-0000-0000-0000-000000000000	e1256757-fb81-4189-a99a-91240650804a	{"action":"token_refreshed","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-15 19:21:46.871268+00	
00000000-0000-0000-0000-000000000000	1fe67d20-64c2-43cf-8a10-6255e356cb82	{"action":"token_revoked","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-15 19:21:46.872897+00	
00000000-0000-0000-0000-000000000000	117dc2b6-a209-4157-9aa4-b060b0f882bc	{"action":"token_refreshed","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-16 04:31:33.57199+00	
00000000-0000-0000-0000-000000000000	2b5200c1-4137-47df-be5e-f36b454d01c3	{"action":"token_revoked","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-16 04:31:33.577394+00	
00000000-0000-0000-0000-000000000000	53627424-2cdf-4a16-83b1-0e82f5516f15	{"action":"token_refreshed","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-16 06:52:31.388719+00	
00000000-0000-0000-0000-000000000000	fcd3acef-b06e-416a-ac9c-2e3a55108efd	{"action":"token_revoked","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-16 06:52:31.396912+00	
00000000-0000-0000-0000-000000000000	d2c85d48-9fa7-4388-9273-6fed98fcc9d7	{"action":"token_refreshed","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-16 08:28:36.083411+00	
00000000-0000-0000-0000-000000000000	c7855632-6714-4b5f-9499-b5898d6a9530	{"action":"token_revoked","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-16 08:28:36.085555+00	
00000000-0000-0000-0000-000000000000	311fff48-cf98-4a23-bb70-f854d912bea1	{"action":"token_refreshed","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-16 09:28:04.951493+00	
00000000-0000-0000-0000-000000000000	d5329be8-a9b1-48be-a3c3-b41be4d7ed6b	{"action":"token_revoked","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-16 09:28:04.952394+00	
00000000-0000-0000-0000-000000000000	1abac363-513d-461d-87ea-27fbe1275bf3	{"action":"token_refreshed","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-16 16:42:27.570258+00	
00000000-0000-0000-0000-000000000000	6975b3ec-a2c0-47bb-ab68-486401a8ff8e	{"action":"token_revoked","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-16 16:42:27.579979+00	
00000000-0000-0000-0000-000000000000	36f5e662-9f7f-4fd8-93a4-d3388f2cd024	{"action":"token_refreshed","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-16 16:43:25.081533+00	
00000000-0000-0000-0000-000000000000	f7b4cf67-8409-4fd4-a8b1-3ed3618f30e5	{"action":"token_revoked","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-16 16:43:25.0828+00	
00000000-0000-0000-0000-000000000000	30cf9ec3-45ff-45ee-a7eb-08ee8862a2cd	{"action":"token_refreshed","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-16 17:42:36.068358+00	
00000000-0000-0000-0000-000000000000	0dd1e055-5a0d-48b7-b32f-59a6429fae2e	{"action":"token_revoked","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-16 17:42:36.069181+00	
00000000-0000-0000-0000-000000000000	0fb59176-fc22-467c-b5cf-8d0e920b35cf	{"action":"token_refreshed","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-16 17:57:43.835506+00	
00000000-0000-0000-0000-000000000000	a12550a1-2c2b-4716-a1ce-98ee22e908fb	{"action":"token_revoked","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-16 17:57:43.836443+00	
00000000-0000-0000-0000-000000000000	9ac0ce02-d4ad-4638-8ba4-ab75305e32b9	{"action":"token_refreshed","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-16 18:41:09.180463+00	
00000000-0000-0000-0000-000000000000	556b4ceb-3fb9-49f6-a3bb-c2e543c01e67	{"action":"token_revoked","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-16 18:41:09.18328+00	
00000000-0000-0000-0000-000000000000	87434dc1-11b4-4f23-8e60-8698738763e5	{"action":"token_refreshed","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-16 19:41:44.160183+00	
00000000-0000-0000-0000-000000000000	427a7644-ddd4-478e-9f5d-46192421323d	{"action":"token_revoked","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-16 19:41:44.16162+00	
00000000-0000-0000-0000-000000000000	3e3ead35-94ec-4d1a-a090-fc98fe704912	{"action":"token_refreshed","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-17 04:51:03.183518+00	
00000000-0000-0000-0000-000000000000	3d4cb181-e10d-4755-9bd7-2dba1e43d122	{"action":"token_revoked","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-17 04:51:03.188659+00	
00000000-0000-0000-0000-000000000000	ae9f1e82-5b13-4f97-9a0c-03d57dddeb83	{"action":"token_refreshed","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-17 05:50:41.946809+00	
00000000-0000-0000-0000-000000000000	9edd79ea-a008-4426-b2fd-0df7863b50e2	{"action":"token_revoked","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-17 05:50:41.948263+00	
00000000-0000-0000-0000-000000000000	dc5efc07-8836-4bd3-a5ae-5bb72660a8fa	{"action":"token_refreshed","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-17 06:57:05.908144+00	
00000000-0000-0000-0000-000000000000	773d0369-6153-4c9a-aec7-c59bf4347b31	{"action":"token_revoked","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-17 06:57:05.920441+00	
00000000-0000-0000-0000-000000000000	69cd9eb8-3723-44d4-b981-fd40a277c29d	{"action":"token_refreshed","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-17 10:06:25.418833+00	
00000000-0000-0000-0000-000000000000	9f3b22e4-7043-42e4-98d2-a1b897a6f5f0	{"action":"token_revoked","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-17 10:06:25.421572+00	
00000000-0000-0000-0000-000000000000	57d5fe46-1da4-4f63-945a-e67636e43718	{"action":"token_refreshed","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-17 11:14:42.069299+00	
00000000-0000-0000-0000-000000000000	96a988d4-393d-4d19-a992-4c24bde7c6fd	{"action":"token_revoked","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-17 11:14:42.071963+00	
00000000-0000-0000-0000-000000000000	e0512665-ebd7-41c8-9965-b8905f37596b	{"action":"token_refreshed","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-17 12:50:07.448513+00	
00000000-0000-0000-0000-000000000000	44c24b99-87af-4b87-9d73-eaaad83e5780	{"action":"token_revoked","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-17 12:50:07.451513+00	
00000000-0000-0000-0000-000000000000	1a46ad25-331e-485c-a679-76a8ba08728d	{"action":"token_refreshed","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-17 16:11:08.89766+00	
00000000-0000-0000-0000-000000000000	2cc65585-ca2e-497e-862b-cc83e15eb4f7	{"action":"token_revoked","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-17 16:11:08.908585+00	
00000000-0000-0000-0000-000000000000	2f77a4b1-7f2a-4b18-9c3c-887896211c15	{"action":"token_refreshed","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-17 18:34:18.894042+00	
00000000-0000-0000-0000-000000000000	a84b5d9c-6ff8-4f3c-8ce3-4ac6416b7bd0	{"action":"token_revoked","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-17 18:34:18.895582+00	
00000000-0000-0000-0000-000000000000	8046cc7b-74cb-46dd-99df-10fb41627a5e	{"action":"token_refreshed","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-18 17:26:10.98641+00	
00000000-0000-0000-0000-000000000000	66771376-e2dc-4b86-a3b5-665f8d909b3e	{"action":"token_revoked","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-18 17:26:10.999145+00	
00000000-0000-0000-0000-000000000000	ee31dab4-cda3-4ba5-80e0-722bfe7a6e95	{"action":"token_refreshed","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-18 17:26:14.984569+00	
00000000-0000-0000-0000-000000000000	4ac34244-c939-4c92-88cf-68a23c632757	{"action":"token_revoked","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-18 17:26:14.986363+00	
00000000-0000-0000-0000-000000000000	d14148f5-d5a9-4057-908d-ea711d7bfed5	{"action":"token_refreshed","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-18 18:24:50.31541+00	
00000000-0000-0000-0000-000000000000	80eee27c-8bf0-4bd2-be23-fe47a6c55e96	{"action":"token_revoked","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-18 18:24:50.318069+00	
00000000-0000-0000-0000-000000000000	5cccd32c-0479-4eb2-a75a-dbfc02c0b2a6	{"action":"token_refreshed","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-18 18:26:32.046743+00	
00000000-0000-0000-0000-000000000000	6dc703ce-e8d2-49e7-9331-b2ebe2f8feb7	{"action":"token_revoked","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-18 18:26:32.047583+00	
00000000-0000-0000-0000-000000000000	77261441-2576-4719-91bf-c5801235249a	{"action":"token_refreshed","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-19 07:10:15.301634+00	
00000000-0000-0000-0000-000000000000	3dbd15fa-c310-4f1a-9edf-49aa4a3efd4d	{"action":"token_revoked","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-19 07:10:15.312426+00	
00000000-0000-0000-0000-000000000000	56e42957-2da9-4e52-afd7-996bf54056f2	{"action":"token_refreshed","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-19 08:14:36.159188+00	
00000000-0000-0000-0000-000000000000	644bd13a-f3a0-4894-8a0a-14184ea6a4fe	{"action":"token_revoked","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-19 08:14:36.16171+00	
00000000-0000-0000-0000-000000000000	af09e759-8e33-4e48-8081-f73097c31799	{"action":"token_refreshed","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-19 09:12:49.980759+00	
00000000-0000-0000-0000-000000000000	d78f1c30-453a-42fe-b90c-398dd26b1601	{"action":"token_revoked","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-19 09:12:49.982263+00	
00000000-0000-0000-0000-000000000000	2a07fbe3-4502-4749-8f47-c35733e6c2a8	{"action":"token_refreshed","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-19 10:11:31.149502+00	
00000000-0000-0000-0000-000000000000	b16afff2-b3bd-4781-a9fd-46a444e0131f	{"action":"token_revoked","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-19 10:11:31.152231+00	
00000000-0000-0000-0000-000000000000	32ff2d9c-b8e8-4915-bd37-17d3cf2b89dd	{"action":"token_refreshed","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-19 10:25:24.829422+00	
00000000-0000-0000-0000-000000000000	e139182e-239e-4b0b-988c-c0decf330f9d	{"action":"token_revoked","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-19 10:25:24.831776+00	
00000000-0000-0000-0000-000000000000	24ece46f-cbc5-4941-88a5-b966f528af9d	{"action":"token_refreshed","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-19 12:32:04.205526+00	
00000000-0000-0000-0000-000000000000	1e7e39eb-8948-40bc-8f9f-243e2707b1f7	{"action":"token_revoked","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-19 12:32:04.207611+00	
00000000-0000-0000-0000-000000000000	9d33a23d-b1bf-4e3c-9dfa-082e13f2fa4a	{"action":"token_refreshed","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-19 12:36:13.724007+00	
00000000-0000-0000-0000-000000000000	360b6cc8-ac94-41fc-8116-d1241a2ea75d	{"action":"token_revoked","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-19 12:36:13.728095+00	
00000000-0000-0000-0000-000000000000	e570361d-9aa2-4bbb-b61b-0582322c4127	{"action":"token_refreshed","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-19 13:30:18.815992+00	
00000000-0000-0000-0000-000000000000	049b66b5-437a-4f8f-a865-ad28eb7e71b0	{"action":"token_revoked","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-19 13:30:18.817463+00	
00000000-0000-0000-0000-000000000000	2cad166d-fb4f-4d05-a163-8188055a6fdb	{"action":"token_refreshed","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-19 14:28:38.566022+00	
00000000-0000-0000-0000-000000000000	84976b33-4ae1-4116-a087-77a0d9d6564d	{"action":"token_revoked","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-19 14:28:38.568164+00	
00000000-0000-0000-0000-000000000000	b3ba6eb1-81b2-4f42-9914-e30c6b502274	{"action":"token_refreshed","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-19 14:39:00.02604+00	
00000000-0000-0000-0000-000000000000	52f9e6b8-5039-44c4-89be-3b5f91f82bb7	{"action":"token_revoked","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-19 14:39:00.028186+00	
00000000-0000-0000-0000-000000000000	cee4e3a5-d152-497a-a8c9-14292b31d3a2	{"action":"token_refreshed","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-19 15:52:56.707651+00	
00000000-0000-0000-0000-000000000000	4c415486-6003-4a17-b910-e5e680d3612a	{"action":"token_revoked","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-19 15:52:56.709283+00	
00000000-0000-0000-0000-000000000000	1b54b37e-b245-49a9-ae0b-22b59612451d	{"action":"token_refreshed","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-19 17:09:59.468813+00	
00000000-0000-0000-0000-000000000000	94cff00e-985d-40ee-9e40-a56a80bf1013	{"action":"token_revoked","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-19 17:09:59.470399+00	
00000000-0000-0000-0000-000000000000	aa4460ce-2588-4d76-8a6f-e849d0381f25	{"action":"token_refreshed","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-19 18:08:10.301115+00	
00000000-0000-0000-0000-000000000000	96b26481-2394-4d08-94b5-d1553cb9f127	{"action":"token_revoked","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-19 18:08:10.302575+00	
00000000-0000-0000-0000-000000000000	54244ade-0848-4c4f-86b2-0921957e49c8	{"action":"token_refreshed","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-19 18:32:39.517099+00	
00000000-0000-0000-0000-000000000000	dde47c92-ac33-443a-ae55-fe5af9731b6a	{"action":"token_revoked","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-19 18:32:39.51859+00	
00000000-0000-0000-0000-000000000000	bb22cbac-b99f-4d4b-89b0-a2430a2be1a3	{"action":"token_refreshed","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-19 19:12:36.67832+00	
00000000-0000-0000-0000-000000000000	9183f236-f676-4014-a0cd-197548901455	{"action":"token_revoked","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-19 19:12:36.679206+00	
00000000-0000-0000-0000-000000000000	9e03af20-bccd-45b5-adf3-886dfeb65802	{"action":"token_refreshed","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-19 20:17:33.26004+00	
00000000-0000-0000-0000-000000000000	e72c302e-6297-4aa7-a35a-88cfb5fb3dd0	{"action":"token_revoked","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-19 20:17:33.262768+00	
00000000-0000-0000-0000-000000000000	283cda05-a55b-49e7-8aa3-f8ddaaac91dd	{"action":"token_refreshed","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-19 20:46:31.829496+00	
00000000-0000-0000-0000-000000000000	b6db978f-fc7d-41a3-939d-656b15c0a235	{"action":"token_revoked","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-19 20:46:31.831737+00	
00000000-0000-0000-0000-000000000000	91169fc5-1f38-4fda-89b5-ece52f3411d9	{"action":"token_refreshed","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-20 06:39:47.677396+00	
00000000-0000-0000-0000-000000000000	26f46fc3-e916-44b7-b88c-440b2f53ba0f	{"action":"token_revoked","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-20 06:39:47.698768+00	
00000000-0000-0000-0000-000000000000	2588ce9b-7a8f-49c1-8c97-9a0816662396	{"action":"token_refreshed","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-20 06:39:51.618678+00	
00000000-0000-0000-0000-000000000000	e0361ecf-c063-4829-b1af-b24901706fae	{"action":"token_revoked","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-20 06:39:51.619917+00	
00000000-0000-0000-0000-000000000000	4f8a1042-f340-4689-ace3-75fcc257a0f4	{"action":"token_refreshed","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-20 07:45:24.265671+00	
00000000-0000-0000-0000-000000000000	585fb54b-09ad-48da-8e62-2334c16dee23	{"action":"token_revoked","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-20 07:45:24.267786+00	
00000000-0000-0000-0000-000000000000	82162f8c-3d1e-46ed-a94c-bf5bdbfd78fd	{"action":"token_refreshed","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-20 08:38:16.461147+00	
00000000-0000-0000-0000-000000000000	7dd6dfda-d490-4550-9901-c03058cf448a	{"action":"token_revoked","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-20 08:38:16.463202+00	
00000000-0000-0000-0000-000000000000	5fa1f1ce-4d1e-44dc-96e6-876cc4a521f0	{"action":"token_refreshed","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-20 08:44:10.414751+00	
00000000-0000-0000-0000-000000000000	5357f44e-547f-4c15-9b17-752d4fafbf6e	{"action":"token_revoked","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-20 08:44:10.416396+00	
00000000-0000-0000-0000-000000000000	1ff71bc5-13ae-4251-98d1-d3ab65763f40	{"action":"login","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"google"}}	2025-04-20 08:45:10.867719+00	
00000000-0000-0000-0000-000000000000	eaeb2c57-0694-4f79-a8a1-6401ce35de56	{"action":"login","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"google"}}	2025-04-20 08:45:28.931388+00	
00000000-0000-0000-0000-000000000000	b4d91e6e-0756-408d-b152-ffbec8b796a0	{"action":"token_refreshed","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-20 09:46:59.164623+00	
00000000-0000-0000-0000-000000000000	e0408249-53dc-41fd-9a1b-7a5189973a36	{"action":"token_revoked","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-20 09:46:59.167259+00	
00000000-0000-0000-0000-000000000000	272b9b7a-bf1a-4b82-a97a-3327db60f0ba	{"action":"token_refreshed","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-20 10:15:33.452396+00	
00000000-0000-0000-0000-000000000000	a1720ecd-ecf8-46c1-b953-153b46945cae	{"action":"token_revoked","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-20 10:15:33.455298+00	
00000000-0000-0000-0000-000000000000	773da4af-ecc7-4aae-9f73-5e51675b5b27	{"action":"token_refreshed","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-20 11:55:35.295122+00	
00000000-0000-0000-0000-000000000000	2fa83d5f-70eb-4f81-a0f3-4b0d1a092daa	{"action":"token_revoked","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-20 11:55:35.296676+00	
00000000-0000-0000-0000-000000000000	161fd9de-de22-418d-880a-b74a3e88b332	{"action":"token_refreshed","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-20 12:02:18.151982+00	
00000000-0000-0000-0000-000000000000	10aaf806-429f-4907-9867-e978033808d4	{"action":"token_revoked","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-20 12:02:18.152848+00	
00000000-0000-0000-0000-000000000000	e4462ac7-30e6-4acf-a5ff-02f0b9ce9a33	{"action":"token_refreshed","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-20 13:00:52.207665+00	
00000000-0000-0000-0000-000000000000	a7c0a56c-74d5-4a4a-8a30-2e3bd1ace249	{"action":"token_revoked","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-20 13:00:52.209226+00	
00000000-0000-0000-0000-000000000000	61c2f0fd-5f91-450b-8a41-4c3ee5b5d641	{"action":"token_refreshed","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-20 13:43:33.371873+00	
00000000-0000-0000-0000-000000000000	0eae8fd7-25e9-4c95-a1ab-60873d2619ea	{"action":"token_revoked","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-20 13:43:33.374651+00	
00000000-0000-0000-0000-000000000000	798cec75-c0fe-463e-a361-af5b7eb098fd	{"action":"user_signedup","actor_id":"49b49e35-a268-4d20-9e71-296680616b02","actor_name":"saas","actor_username":"wemadesaas@gmail.com","actor_via_sso":false,"log_type":"team","traits":{"provider":"google"}}	2025-04-20 13:50:45.362909+00	
00000000-0000-0000-0000-000000000000	27ca1a6c-e409-4cad-ab8a-45661a9cffc8	{"action":"login","actor_id":"49b49e35-a268-4d20-9e71-296680616b02","actor_name":"saas","actor_username":"wemadesaas@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"google"}}	2025-04-20 13:51:36.914893+00	
00000000-0000-0000-0000-000000000000	44cf58e0-14c8-4ee4-8901-20be22e14147	{"action":"token_refreshed","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-20 14:01:19.401306+00	
00000000-0000-0000-0000-000000000000	07263e9d-5b18-4605-a0e4-d5bf9e1d0a2e	{"action":"token_revoked","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-20 14:01:19.411892+00	
00000000-0000-0000-0000-000000000000	04370a31-f217-4967-aab5-217e112193d3	{"action":"token_refreshed","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-20 18:22:05.370716+00	
00000000-0000-0000-0000-000000000000	0384ad17-b202-48ea-a644-df06d82831ea	{"action":"token_revoked","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-20 18:22:05.372715+00	
00000000-0000-0000-0000-000000000000	5ccd4e5a-2b6e-44c9-8291-db28685b6b16	{"action":"user_signedup","actor_id":"311212c6-a864-4a03-9a68-4cf2744959ca","actor_name":"Gaurav Gupta","actor_username":"gaurav.gupta@acko.tech","actor_via_sso":false,"log_type":"team","traits":{"provider":"google"}}	2025-04-24 11:46:39.928537+00	
00000000-0000-0000-0000-000000000000	f001642e-e17e-4bd6-a132-a45c64ad43ab	{"action":"login","actor_id":"311212c6-a864-4a03-9a68-4cf2744959ca","actor_name":"Gaurav Gupta","actor_username":"gaurav.gupta@acko.tech","actor_via_sso":false,"log_type":"account","traits":{"provider":"google"}}	2025-04-24 11:48:53.334365+00	
00000000-0000-0000-0000-000000000000	c1b565d0-2884-4746-93ed-ea301e12139d	{"action":"token_refreshed","actor_id":"311212c6-a864-4a03-9a68-4cf2744959ca","actor_name":"Gaurav Gupta","actor_username":"gaurav.gupta@acko.tech","actor_via_sso":false,"log_type":"token"}	2025-04-27 05:54:23.164481+00	
00000000-0000-0000-0000-000000000000	259e6b5e-f4a7-4bd9-86c7-e15961ac9cc0	{"action":"token_revoked","actor_id":"311212c6-a864-4a03-9a68-4cf2744959ca","actor_name":"Gaurav Gupta","actor_username":"gaurav.gupta@acko.tech","actor_via_sso":false,"log_type":"token"}	2025-04-27 05:54:23.180242+00	
00000000-0000-0000-0000-000000000000	af3ffb28-5376-4f63-b082-2dbcaf846653	{"action":"token_refreshed","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-07 16:55:59.812071+00	
00000000-0000-0000-0000-000000000000	380ef7d2-f6b2-45c2-a486-7c82e4e3b9d8	{"action":"token_revoked","actor_id":"9f9d1d0d-205d-4329-be47-7780652484cc","actor_name":"ayush kumar","actor_username":"aaayushsinghh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-07 16:55:59.818924+00	
00000000-0000-0000-0000-000000000000	5c1ea87d-c053-4846-b644-b7891c21206c	{"action":"token_refreshed","actor_id":"311212c6-a864-4a03-9a68-4cf2744959ca","actor_name":"Gaurav Gupta","actor_username":"gaurav.gupta@acko.tech","actor_via_sso":false,"log_type":"token"}	2025-05-23 09:21:06.716049+00	
00000000-0000-0000-0000-000000000000	5b2d5a0d-0dda-40b0-ab5d-7fdbc8df332c	{"action":"token_revoked","actor_id":"311212c6-a864-4a03-9a68-4cf2744959ca","actor_name":"Gaurav Gupta","actor_username":"gaurav.gupta@acko.tech","actor_via_sso":false,"log_type":"token"}	2025-05-23 09:21:06.723219+00	
00000000-0000-0000-0000-000000000000	9016ba9b-c416-4fb6-b568-e7077eef11aa	{"action":"token_refreshed","actor_id":"311212c6-a864-4a03-9a68-4cf2744959ca","actor_name":"Gaurav Gupta","actor_username":"gaurav.gupta@acko.tech","actor_via_sso":false,"log_type":"token"}	2025-05-26 07:05:31.063273+00	
00000000-0000-0000-0000-000000000000	01194b82-b8b9-436e-8f58-470360a729fc	{"action":"token_revoked","actor_id":"311212c6-a864-4a03-9a68-4cf2744959ca","actor_name":"Gaurav Gupta","actor_username":"gaurav.gupta@acko.tech","actor_via_sso":false,"log_type":"token"}	2025-05-26 07:05:31.078511+00	
00000000-0000-0000-0000-000000000000	fb640dfe-9cd5-4088-8fec-f51a15f794c9	{"action":"token_refreshed","actor_id":"311212c6-a864-4a03-9a68-4cf2744959ca","actor_name":"Gaurav Gupta","actor_username":"gaurav.gupta@acko.tech","actor_via_sso":false,"log_type":"token"}	2025-05-26 08:38:01.295258+00	
00000000-0000-0000-0000-000000000000	d16aa428-bb64-4ed3-ac1b-0a43cfe2a469	{"action":"token_revoked","actor_id":"311212c6-a864-4a03-9a68-4cf2744959ca","actor_name":"Gaurav Gupta","actor_username":"gaurav.gupta@acko.tech","actor_via_sso":false,"log_type":"token"}	2025-05-26 08:38:01.299569+00	
\.


--
-- Data for Name: flow_state; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.flow_state (id, user_id, auth_code, code_challenge_method, code_challenge, provider_type, provider_access_token, provider_refresh_token, created_at, updated_at, authentication_method, auth_code_issued_at) FROM stdin;
\.


--
-- Data for Name: identities; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.identities (provider_id, user_id, identity_data, provider, last_sign_in_at, created_at, updated_at, id) FROM stdin;
110701064507037676943	9f9d1d0d-205d-4329-be47-7780652484cc	{"iss": "https://accounts.google.com", "sub": "110701064507037676943", "name": "ayush kumar", "email": "aaayushsinghh@gmail.com", "picture": "https://lh3.googleusercontent.com/a/ACg8ocLtbRLqjMbrIzR_rvPCu-AaM5bLjLuXsE1qejeg9A32DSVNkA=s96-c", "full_name": "ayush kumar", "avatar_url": "https://lh3.googleusercontent.com/a/ACg8ocLtbRLqjMbrIzR_rvPCu-AaM5bLjLuXsE1qejeg9A32DSVNkA=s96-c", "provider_id": "110701064507037676943", "email_verified": true, "phone_verified": false}	google	2025-04-13 17:34:32.639772+00	2025-04-13 17:34:32.639833+00	2025-04-20 08:45:28.928715+00	d5dd99a7-4c22-4b2c-86a8-cf7bae174662
104622013197299088269	49b49e35-a268-4d20-9e71-296680616b02	{"iss": "https://accounts.google.com", "sub": "104622013197299088269", "name": "saas", "email": "wemadesaas@gmail.com", "picture": "https://lh3.googleusercontent.com/a/ACg8ocIrpgQM53Jsju106nJqM-LfiVla8HrYBVhThoqvPMo1eGzPmg=s96-c", "full_name": "saas", "avatar_url": "https://lh3.googleusercontent.com/a/ACg8ocIrpgQM53Jsju106nJqM-LfiVla8HrYBVhThoqvPMo1eGzPmg=s96-c", "provider_id": "104622013197299088269", "email_verified": true, "phone_verified": false}	google	2025-04-20 13:50:45.358466+00	2025-04-20 13:50:45.358512+00	2025-04-20 13:51:36.913009+00	7fe7cb73-4def-4133-8adc-91037d4b4164
110131888569651195068	311212c6-a864-4a03-9a68-4cf2744959ca	{"iss": "https://accounts.google.com", "sub": "110131888569651195068", "name": "Gaurav Gupta", "email": "gaurav.gupta@acko.tech", "picture": "https://lh3.googleusercontent.com/a/ACg8ocLLbb7upSHLFh8576piNLO0t1sXco7ZJ9XAwl4gjERZHBkD0DU=s96-c", "full_name": "Gaurav Gupta", "avatar_url": "https://lh3.googleusercontent.com/a/ACg8ocLLbb7upSHLFh8576piNLO0t1sXco7ZJ9XAwl4gjERZHBkD0DU=s96-c", "provider_id": "110131888569651195068", "custom_claims": {"hd": "acko.tech"}, "email_verified": true, "phone_verified": false}	google	2025-04-24 11:46:39.918409+00	2025-04-24 11:46:39.919035+00	2025-04-24 11:48:53.321086+00	5f2b189b-8acc-4720-a6d9-8ca535edea7a
\.


--
-- Data for Name: instances; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.instances (id, uuid, raw_base_config, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: mfa_amr_claims; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.mfa_amr_claims (session_id, created_at, updated_at, authentication_method, id) FROM stdin;
9a12cac6-34a9-49f3-80d1-6c5030a810de	2025-04-13 17:34:32.66313+00	2025-04-13 17:34:32.66313+00	oauth	9461d1a4-49ba-4275-9d1c-51287b897ef2
1e511410-7fad-48d9-aed2-c12f2c84061f	2025-04-13 18:09:18.458696+00	2025-04-13 18:09:18.458696+00	oauth	d5145317-28b6-4b0a-822d-7ce0f6066dc0
d1255004-aa58-4f5a-ba3a-ce5573e11f89	2025-04-13 20:03:05.222282+00	2025-04-13 20:03:05.222282+00	oauth	2033a9dd-945c-47a1-9e21-8dd83918b0ea
7518c604-c785-4571-b14c-61840ad63462	2025-04-13 20:05:10.341331+00	2025-04-13 20:05:10.341331+00	oauth	5a939788-0319-43df-92be-d7c424a071b2
e9c4c530-883d-4a39-a744-c281ddeeb650	2025-04-13 20:11:56.815441+00	2025-04-13 20:11:56.815441+00	oauth	32e93100-ba0a-458e-8cb1-4d38008a1168
58e9f0f1-d764-4452-bcab-684dd69d643a	2025-04-13 20:12:07.422277+00	2025-04-13 20:12:07.422277+00	oauth	d91e8c20-c61c-42ee-b531-9ddf3d8515de
3525f381-63b2-4f2b-8ffe-ab7b036ab0a3	2025-04-13 20:12:13.865831+00	2025-04-13 20:12:13.865831+00	oauth	e3a4f5c8-db39-4267-ba50-2eb1e34ed2bf
cee77e01-06e9-4371-b3e6-3334dd506c7a	2025-04-13 20:18:00.267159+00	2025-04-13 20:18:00.267159+00	oauth	a7a654fb-38d8-4651-9863-564d42b801b5
292223e8-8c36-48e6-92a3-227556cd614d	2025-04-14 17:05:58.331607+00	2025-04-14 17:05:58.331607+00	oauth	d685eb31-a546-4443-b3d9-d7666da49662
a9a593b9-d476-4e11-bad3-ca467ab7cc89	2025-04-14 17:36:28.414029+00	2025-04-14 17:36:28.414029+00	oauth	36a17134-043e-4123-a8a8-198d04b59258
b6ae932e-0142-45c3-82b2-01af57e6a361	2025-04-14 17:39:13.439133+00	2025-04-14 17:39:13.439133+00	oauth	59a9b0cf-0d28-4742-803a-31e22eaad89a
2bb3bf6c-5fc7-4978-87ff-74c9ece61fcb	2025-04-14 18:36:12.325107+00	2025-04-14 18:36:12.325107+00	oauth	acdcd243-2855-42c5-8e1d-6404346b739a
e6d50e0f-0e8f-4462-b03c-a2a8b4c833a0	2025-04-14 18:38:17.79463+00	2025-04-14 18:38:17.79463+00	oauth	c4740068-fe8a-4836-8f99-b9db98ad2d8c
266c97be-3fda-4edf-b8e8-bf5c880a69c2	2025-04-14 18:40:13.658525+00	2025-04-14 18:40:13.658525+00	oauth	0fa346f9-ea7e-4707-ab6f-8eefc11b4065
9dbe8db6-6cea-45fa-a7cb-af9981160b21	2025-04-14 18:44:43.422716+00	2025-04-14 18:44:43.422716+00	oauth	ad5fa8fc-fc7a-45e8-a6ea-4226125077d3
99b44e92-c8f5-432e-a0fa-95d20c253da0	2025-04-14 18:55:38.196822+00	2025-04-14 18:55:38.196822+00	oauth	46354d17-752a-4074-a90e-166bfe291c8c
30109109-8ab5-4984-9f00-5ed2b4136528	2025-04-14 19:06:27.96113+00	2025-04-14 19:06:27.96113+00	oauth	d5fa995a-9fe7-48d0-9843-91dbd4c15b27
268ab89c-983b-452a-97b9-ffd308016acc	2025-04-14 19:08:09.736436+00	2025-04-14 19:08:09.736436+00	oauth	16238f13-02ba-4294-87fe-bb1acd1df638
02815f5f-8ab4-41ae-b1fe-40dd27907166	2025-04-14 19:34:49.236691+00	2025-04-14 19:34:49.236691+00	oauth	9bdef918-3bdf-415e-a568-b662343b2e29
46086daa-64da-459e-96fb-c43e14f0f890	2025-04-14 19:40:11.850987+00	2025-04-14 19:40:11.850987+00	oauth	df094a64-44a6-45ea-9079-1b1d735e57fa
b95e7a4a-7e8d-476c-9182-3d835ee13164	2025-04-14 19:48:08.848141+00	2025-04-14 19:48:08.848141+00	oauth	962531a5-0a70-4aad-acbf-280657cb01e2
3a61758a-26c7-4931-b373-6b5e559a31d5	2025-04-15 11:24:05.357804+00	2025-04-15 11:24:05.357804+00	oauth	f439b35a-ad87-4745-a8b7-295f5ad5f8e5
6957d42d-f665-4f9a-894b-6f04d669d47b	2025-04-15 11:28:59.860484+00	2025-04-15 11:28:59.860484+00	oauth	e75e2a44-d7a6-4eff-8400-92234acd1d57
dbcaf92a-7e6c-4280-bd91-e7c140234f47	2025-04-15 16:57:29.88603+00	2025-04-15 16:57:29.88603+00	oauth	d3587a07-30a4-41ad-9458-f55ffbdc5349
b4bd6431-1a5a-440d-8b66-3d1f68cce089	2025-04-20 08:45:10.876868+00	2025-04-20 08:45:10.876868+00	oauth	29365f84-ebe0-4094-9daa-e29f840c8443
cd6537fc-42bd-42ea-bb23-52d6bfcf19d4	2025-04-20 08:45:28.933699+00	2025-04-20 08:45:28.933699+00	oauth	9e7ecf62-e15b-4424-9c7e-dfe018c4126c
b918a79b-817b-4c8c-a034-1b2cbb90f830	2025-04-20 13:50:45.376199+00	2025-04-20 13:50:45.376199+00	oauth	82b694cf-8b50-49fb-b3e7-c0dd87b93d6d
49152e9e-248f-4be0-ad0d-5618c59169c7	2025-04-20 13:51:36.921276+00	2025-04-20 13:51:36.921276+00	oauth	31d59a0e-ea5b-4d1b-ae56-c675b80b3d95
4e6441cf-61a5-46f6-99e1-fc6bfce93554	2025-04-24 11:46:39.986573+00	2025-04-24 11:46:39.986573+00	oauth	44918e2b-55a1-4bb9-b119-9bebd1fbe10f
eb9f36fa-a919-4070-8146-d51860b59903	2025-04-24 11:48:53.347441+00	2025-04-24 11:48:53.347441+00	oauth	04357396-02ce-4e56-be5f-a1b2521c3fea
\.


--
-- Data for Name: mfa_challenges; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.mfa_challenges (id, factor_id, created_at, verified_at, ip_address, otp_code, web_authn_session_data) FROM stdin;
\.


--
-- Data for Name: mfa_factors; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.mfa_factors (id, user_id, friendly_name, factor_type, status, created_at, updated_at, secret, phone, last_challenged_at, web_authn_credential, web_authn_aaguid) FROM stdin;
\.


--
-- Data for Name: one_time_tokens; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.one_time_tokens (id, user_id, token_type, token_hash, relates_to, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: refresh_tokens; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.refresh_tokens (instance_id, id, token, user_id, revoked, created_at, updated_at, parent, session_id) FROM stdin;
00000000-0000-0000-0000-000000000000	1	lZ8C2u17mNhNB55_VzD23Q	9f9d1d0d-205d-4329-be47-7780652484cc	f	2025-04-13 17:34:32.655305+00	2025-04-13 17:34:32.655305+00	\N	9a12cac6-34a9-49f3-80d1-6c5030a810de
00000000-0000-0000-0000-000000000000	92	K6W0p6l9yO-YQs0CBd52Wg	49b49e35-a268-4d20-9e71-296680616b02	f	2025-04-20 13:50:45.372661+00	2025-04-20 13:50:45.372661+00	\N	b918a79b-817b-4c8c-a034-1b2cbb90f830
00000000-0000-0000-0000-000000000000	2	peVTUhuPFj4_cZZqQWng-w	9f9d1d0d-205d-4329-be47-7780652484cc	t	2025-04-13 18:09:18.457029+00	2025-04-13 19:17:26.833034+00	\N	1e511410-7fad-48d9-aed2-c12f2c84061f
00000000-0000-0000-0000-000000000000	4	rgh-gHf7xfZdEJ9dSQvvGw	9f9d1d0d-205d-4329-be47-7780652484cc	f	2025-04-13 20:03:05.219836+00	2025-04-13 20:03:05.219836+00	\N	d1255004-aa58-4f5a-ba3a-ce5573e11f89
00000000-0000-0000-0000-000000000000	5	AHy9XrqFsZRI1wecV0DLWQ	9f9d1d0d-205d-4329-be47-7780652484cc	f	2025-04-13 20:05:10.339785+00	2025-04-13 20:05:10.339785+00	\N	7518c604-c785-4571-b14c-61840ad63462
00000000-0000-0000-0000-000000000000	6	XbnVHJwiSl0b7tljpxTt7w	9f9d1d0d-205d-4329-be47-7780652484cc	f	2025-04-13 20:11:56.811342+00	2025-04-13 20:11:56.811342+00	\N	e9c4c530-883d-4a39-a744-c281ddeeb650
00000000-0000-0000-0000-000000000000	7	rdTfOZ1hhrgyCCOYX_eKdw	9f9d1d0d-205d-4329-be47-7780652484cc	f	2025-04-13 20:12:07.421063+00	2025-04-13 20:12:07.421063+00	\N	58e9f0f1-d764-4452-bcab-684dd69d643a
00000000-0000-0000-0000-000000000000	8	JTMX3WIDA8m9VtE8KR6uWg	9f9d1d0d-205d-4329-be47-7780652484cc	f	2025-04-13 20:12:13.864686+00	2025-04-13 20:12:13.864686+00	\N	3525f381-63b2-4f2b-8ffe-ab7b036ab0a3
00000000-0000-0000-0000-000000000000	3	2iwxj-qnmVBd-R1wfRBXrg	9f9d1d0d-205d-4329-be47-7780652484cc	t	2025-04-13 19:17:26.834378+00	2025-04-13 20:23:35.658489+00	peVTUhuPFj4_cZZqQWng-w	1e511410-7fad-48d9-aed2-c12f2c84061f
00000000-0000-0000-0000-000000000000	9	dN5DD6e_vK4ucyQnA_pHuw	9f9d1d0d-205d-4329-be47-7780652484cc	t	2025-04-13 20:18:00.265354+00	2025-04-14 05:59:51.527775+00	\N	cee77e01-06e9-4371-b3e6-3334dd506c7a
00000000-0000-0000-0000-000000000000	11	8dqP0NZTXRmoEzLC1pA7_g	9f9d1d0d-205d-4329-be47-7780652484cc	t	2025-04-14 05:59:51.535005+00	2025-04-14 16:40:19.019985+00	dN5DD6e_vK4ucyQnA_pHuw	cee77e01-06e9-4371-b3e6-3334dd506c7a
00000000-0000-0000-0000-000000000000	12	usv8FCztoTsKgczew-alCg	9f9d1d0d-205d-4329-be47-7780652484cc	f	2025-04-14 16:40:19.024374+00	2025-04-14 16:40:19.024374+00	8dqP0NZTXRmoEzLC1pA7_g	cee77e01-06e9-4371-b3e6-3334dd506c7a
00000000-0000-0000-0000-000000000000	10	SrHLJEw7cF8MmAuqq4fBBw	9f9d1d0d-205d-4329-be47-7780652484cc	t	2025-04-13 20:23:35.661103+00	2025-04-14 16:54:14.353896+00	2iwxj-qnmVBd-R1wfRBXrg	1e511410-7fad-48d9-aed2-c12f2c84061f
00000000-0000-0000-0000-000000000000	13	l8xz55qzHoQrjeYRC1o7MQ	9f9d1d0d-205d-4329-be47-7780652484cc	f	2025-04-14 16:54:14.355184+00	2025-04-14 16:54:14.355184+00	SrHLJEw7cF8MmAuqq4fBBw	1e511410-7fad-48d9-aed2-c12f2c84061f
00000000-0000-0000-0000-000000000000	14	Ez92i4kRYf5qgvyIbJ3EaA	9f9d1d0d-205d-4329-be47-7780652484cc	f	2025-04-14 17:05:58.328624+00	2025-04-14 17:05:58.328624+00	\N	292223e8-8c36-48e6-92a3-227556cd614d
00000000-0000-0000-0000-000000000000	16	odPLpvVYzWqLoNKnqRuO7Q	9f9d1d0d-205d-4329-be47-7780652484cc	f	2025-04-14 17:39:13.436044+00	2025-04-14 17:39:13.436044+00	\N	b6ae932e-0142-45c3-82b2-01af57e6a361
00000000-0000-0000-0000-000000000000	15	56Y_EKNReiWrJj9ajcLrxQ	9f9d1d0d-205d-4329-be47-7780652484cc	t	2025-04-14 17:36:28.408121+00	2025-04-14 18:35:25.217555+00	\N	a9a593b9-d476-4e11-bad3-ca467ab7cc89
00000000-0000-0000-0000-000000000000	17	5s2uJ_qR3-onoMPE_EvKyw	9f9d1d0d-205d-4329-be47-7780652484cc	f	2025-04-14 18:35:25.218823+00	2025-04-14 18:35:25.218823+00	56Y_EKNReiWrJj9ajcLrxQ	a9a593b9-d476-4e11-bad3-ca467ab7cc89
00000000-0000-0000-0000-000000000000	18	jqOACaZNdimVii-YZ-6_hw	9f9d1d0d-205d-4329-be47-7780652484cc	f	2025-04-14 18:36:12.323123+00	2025-04-14 18:36:12.323123+00	\N	2bb3bf6c-5fc7-4978-87ff-74c9ece61fcb
00000000-0000-0000-0000-000000000000	19	PQ1QvWhLSZnqpLrZcWmong	9f9d1d0d-205d-4329-be47-7780652484cc	f	2025-04-14 18:38:17.792234+00	2025-04-14 18:38:17.792234+00	\N	e6d50e0f-0e8f-4462-b03c-a2a8b4c833a0
00000000-0000-0000-0000-000000000000	20	dBAh1PGU3ilNRoJLt17jQQ	9f9d1d0d-205d-4329-be47-7780652484cc	f	2025-04-14 18:40:13.656189+00	2025-04-14 18:40:13.656189+00	\N	266c97be-3fda-4edf-b8e8-bf5c880a69c2
00000000-0000-0000-0000-000000000000	21	4qOrC_OBLqjoOoyn1mMy3g	9f9d1d0d-205d-4329-be47-7780652484cc	f	2025-04-14 18:44:43.41854+00	2025-04-14 18:44:43.41854+00	\N	9dbe8db6-6cea-45fa-a7cb-af9981160b21
00000000-0000-0000-0000-000000000000	22	PGfU2SdrsxUEs4HeW9gVdA	9f9d1d0d-205d-4329-be47-7780652484cc	f	2025-04-14 18:55:38.193955+00	2025-04-14 18:55:38.193955+00	\N	99b44e92-c8f5-432e-a0fa-95d20c253da0
00000000-0000-0000-0000-000000000000	23	yd9Zc-urNiiPtmI8br3OXQ	9f9d1d0d-205d-4329-be47-7780652484cc	f	2025-04-14 19:06:27.957656+00	2025-04-14 19:06:27.957656+00	\N	30109109-8ab5-4984-9f00-5ed2b4136528
00000000-0000-0000-0000-000000000000	24	0DwHOuKt42xmn4mu2qa6IA	9f9d1d0d-205d-4329-be47-7780652484cc	f	2025-04-14 19:08:09.73405+00	2025-04-14 19:08:09.73405+00	\N	268ab89c-983b-452a-97b9-ffd308016acc
00000000-0000-0000-0000-000000000000	25	gRugta6Iyb94bvITjRmYDA	9f9d1d0d-205d-4329-be47-7780652484cc	f	2025-04-14 19:34:49.233786+00	2025-04-14 19:34:49.233786+00	\N	02815f5f-8ab4-41ae-b1fe-40dd27907166
00000000-0000-0000-0000-000000000000	27	Hg8ip1HjQoKWj378NeGsxw	9f9d1d0d-205d-4329-be47-7780652484cc	t	2025-04-14 19:48:08.84447+00	2025-04-15 04:20:02.254005+00	\N	b95e7a4a-7e8d-476c-9182-3d835ee13164
00000000-0000-0000-0000-000000000000	28	KozvK0_iz_1GTM3HkW0SMg	9f9d1d0d-205d-4329-be47-7780652484cc	t	2025-04-15 04:20:02.257063+00	2025-04-15 05:32:06.724661+00	Hg8ip1HjQoKWj378NeGsxw	b95e7a4a-7e8d-476c-9182-3d835ee13164
00000000-0000-0000-0000-000000000000	29	Yyk0bcVJDZk6VWKNjT_PjA	9f9d1d0d-205d-4329-be47-7780652484cc	t	2025-04-15 05:32:06.725838+00	2025-04-15 10:59:52.799504+00	KozvK0_iz_1GTM3HkW0SMg	b95e7a4a-7e8d-476c-9182-3d835ee13164
00000000-0000-0000-0000-000000000000	30	jdcZCpq7zeVZQNE2m0Xnlw	9f9d1d0d-205d-4329-be47-7780652484cc	f	2025-04-15 10:59:52.805002+00	2025-04-15 10:59:52.805002+00	Yyk0bcVJDZk6VWKNjT_PjA	b95e7a4a-7e8d-476c-9182-3d835ee13164
00000000-0000-0000-0000-000000000000	31	OTVQECLqGz6jbt6WMR_2cw	9f9d1d0d-205d-4329-be47-7780652484cc	f	2025-04-15 11:24:05.351262+00	2025-04-15 11:24:05.351262+00	\N	3a61758a-26c7-4931-b373-6b5e559a31d5
00000000-0000-0000-0000-000000000000	26	D69GZqD-VQU8dRQzjeeXiQ	9f9d1d0d-205d-4329-be47-7780652484cc	t	2025-04-14 19:40:11.847121+00	2025-04-15 11:25:40.653332+00	\N	46086daa-64da-459e-96fb-c43e14f0f890
00000000-0000-0000-0000-000000000000	33	yzv5AQGyJa3bIH4gPAYeQA	9f9d1d0d-205d-4329-be47-7780652484cc	t	2025-04-15 11:28:59.858335+00	2025-04-15 15:56:55.996479+00	\N	6957d42d-f665-4f9a-894b-6f04d669d47b
00000000-0000-0000-0000-000000000000	32	RFHueZ49ZBouGYqOC1K8kw	9f9d1d0d-205d-4329-be47-7780652484cc	t	2025-04-15 11:25:40.65467+00	2025-04-15 16:50:52.330924+00	D69GZqD-VQU8dRQzjeeXiQ	46086daa-64da-459e-96fb-c43e14f0f890
00000000-0000-0000-0000-000000000000	35	u2CAEWCQczPr0UMnHUqixg	9f9d1d0d-205d-4329-be47-7780652484cc	f	2025-04-15 16:50:52.333234+00	2025-04-15 16:50:52.333234+00	RFHueZ49ZBouGYqOC1K8kw	46086daa-64da-459e-96fb-c43e14f0f890
00000000-0000-0000-0000-000000000000	36	wBO66UuOoF5nOf7FFwqlEQ	9f9d1d0d-205d-4329-be47-7780652484cc	t	2025-04-15 16:57:29.883721+00	2025-04-15 18:22:29.903131+00	\N	dbcaf92a-7e6c-4280-bd91-e7c140234f47
00000000-0000-0000-0000-000000000000	34	pY6jtIMp3jonDXvXWLZupQ	9f9d1d0d-205d-4329-be47-7780652484cc	t	2025-04-15 15:56:55.999364+00	2025-04-15 18:46:06.595768+00	yzv5AQGyJa3bIH4gPAYeQA	6957d42d-f665-4f9a-894b-6f04d669d47b
00000000-0000-0000-0000-000000000000	37	Vx_oFNotazpTkGBxkW8b_w	9f9d1d0d-205d-4329-be47-7780652484cc	t	2025-04-15 18:22:29.905295+00	2025-04-15 19:21:46.873388+00	wBO66UuOoF5nOf7FFwqlEQ	dbcaf92a-7e6c-4280-bd91-e7c140234f47
00000000-0000-0000-0000-000000000000	39	6X-u2serB-0ltx0SkA5fnA	9f9d1d0d-205d-4329-be47-7780652484cc	t	2025-04-15 19:21:46.876012+00	2025-04-16 04:31:33.57789+00	Vx_oFNotazpTkGBxkW8b_w	dbcaf92a-7e6c-4280-bd91-e7c140234f47
00000000-0000-0000-0000-000000000000	40	UsV4te-oDUMOV45Hj4oBWA	9f9d1d0d-205d-4329-be47-7780652484cc	t	2025-04-16 04:31:33.580172+00	2025-04-16 06:52:31.399441+00	6X-u2serB-0ltx0SkA5fnA	dbcaf92a-7e6c-4280-bd91-e7c140234f47
00000000-0000-0000-0000-000000000000	41	1pIyzfsRqzw7uw2a-pv1RA	9f9d1d0d-205d-4329-be47-7780652484cc	t	2025-04-16 06:52:31.406803+00	2025-04-16 08:28:36.086088+00	UsV4te-oDUMOV45Hj4oBWA	dbcaf92a-7e6c-4280-bd91-e7c140234f47
00000000-0000-0000-0000-000000000000	42	RP1WMlFnJkd5HUkMcUEqBw	9f9d1d0d-205d-4329-be47-7780652484cc	t	2025-04-16 08:28:36.086727+00	2025-04-16 09:28:04.953582+00	1pIyzfsRqzw7uw2a-pv1RA	dbcaf92a-7e6c-4280-bd91-e7c140234f47
00000000-0000-0000-0000-000000000000	38	_bbTvUKuwt8wQPQMUIqu7g	9f9d1d0d-205d-4329-be47-7780652484cc	t	2025-04-15 18:46:06.598251+00	2025-04-16 16:42:27.580487+00	pY6jtIMp3jonDXvXWLZupQ	6957d42d-f665-4f9a-894b-6f04d669d47b
00000000-0000-0000-0000-000000000000	43	0C_tUy_EoJmC7yNh1gY0zw	9f9d1d0d-205d-4329-be47-7780652484cc	t	2025-04-16 09:28:04.954304+00	2025-04-16 16:43:25.084013+00	RP1WMlFnJkd5HUkMcUEqBw	dbcaf92a-7e6c-4280-bd91-e7c140234f47
00000000-0000-0000-0000-000000000000	45	1VDAHFVw-CpEpFNdynr8GQ	9f9d1d0d-205d-4329-be47-7780652484cc	t	2025-04-16 16:43:25.084326+00	2025-04-16 17:42:36.069635+00	0C_tUy_EoJmC7yNh1gY0zw	dbcaf92a-7e6c-4280-bd91-e7c140234f47
00000000-0000-0000-0000-000000000000	44	l1OuOeLHx_UEwiaK9ki_kQ	9f9d1d0d-205d-4329-be47-7780652484cc	t	2025-04-16 16:42:27.584746+00	2025-04-16 17:57:43.836967+00	_bbTvUKuwt8wQPQMUIqu7g	6957d42d-f665-4f9a-894b-6f04d669d47b
00000000-0000-0000-0000-000000000000	46	G3PXI-PpSw28BWaUX0VfYw	9f9d1d0d-205d-4329-be47-7780652484cc	t	2025-04-16 17:42:36.071259+00	2025-04-16 18:41:09.183768+00	1VDAHFVw-CpEpFNdynr8GQ	dbcaf92a-7e6c-4280-bd91-e7c140234f47
00000000-0000-0000-0000-000000000000	48	TeyDNghGUovDVDyfar6QjA	9f9d1d0d-205d-4329-be47-7780652484cc	t	2025-04-16 18:41:09.185002+00	2025-04-16 19:41:44.162137+00	G3PXI-PpSw28BWaUX0VfYw	dbcaf92a-7e6c-4280-bd91-e7c140234f47
00000000-0000-0000-0000-000000000000	47	ooGkyaIxo3SegTWOkdwwsA	9f9d1d0d-205d-4329-be47-7780652484cc	t	2025-04-16 17:57:43.837609+00	2025-04-18 17:26:14.986906+00	l1OuOeLHx_UEwiaK9ki_kQ	6957d42d-f665-4f9a-894b-6f04d669d47b
00000000-0000-0000-0000-000000000000	88	OUOUbqFYZc5OGt-lib2Cow	9f9d1d0d-205d-4329-be47-7780652484cc	t	2025-04-20 11:55:35.301259+00	2025-04-20 13:43:33.375166+00	8eqjy5BerntS9IqDGa2YYQ	6957d42d-f665-4f9a-894b-6f04d669d47b
00000000-0000-0000-0000-000000000000	49	JzhSQdAtZ87-rYZ7i0zR9w	9f9d1d0d-205d-4329-be47-7780652484cc	t	2025-04-16 19:41:44.163381+00	2025-04-17 04:51:03.189156+00	TeyDNghGUovDVDyfar6QjA	dbcaf92a-7e6c-4280-bd91-e7c140234f47
00000000-0000-0000-0000-000000000000	50	ucNJX7CkZAhNMpeHMfyP6A	9f9d1d0d-205d-4329-be47-7780652484cc	t	2025-04-17 04:51:03.190985+00	2025-04-17 05:50:41.948759+00	JzhSQdAtZ87-rYZ7i0zR9w	dbcaf92a-7e6c-4280-bd91-e7c140234f47
00000000-0000-0000-0000-000000000000	93	XosqLxHpengev1_8k0j8pQ	49b49e35-a268-4d20-9e71-296680616b02	f	2025-04-20 13:51:36.918176+00	2025-04-20 13:51:36.918176+00	\N	49152e9e-248f-4be0-ad0d-5618c59169c7
00000000-0000-0000-0000-000000000000	51	7C_iOIkSEdmqHWIUZdYg2A	9f9d1d0d-205d-4329-be47-7780652484cc	t	2025-04-17 05:50:41.949382+00	2025-04-17 06:57:05.921034+00	ucNJX7CkZAhNMpeHMfyP6A	dbcaf92a-7e6c-4280-bd91-e7c140234f47
00000000-0000-0000-0000-000000000000	90	_SmVDaIVsPw6b92ED6s1bg	9f9d1d0d-205d-4329-be47-7780652484cc	t	2025-04-20 13:00:52.212893+00	2025-04-20 14:01:19.413039+00	hz9GUCzjhLtKz-Pz3cYJsQ	dbcaf92a-7e6c-4280-bd91-e7c140234f47
00000000-0000-0000-0000-000000000000	52	sBcljO-P7SlGb8CSIvDN_w	9f9d1d0d-205d-4329-be47-7780652484cc	t	2025-04-17 06:57:05.925773+00	2025-04-17 10:06:25.422057+00	7C_iOIkSEdmqHWIUZdYg2A	dbcaf92a-7e6c-4280-bd91-e7c140234f47
00000000-0000-0000-0000-000000000000	53	wb48pX1bpoIQesVC1vxAsQ	9f9d1d0d-205d-4329-be47-7780652484cc	t	2025-04-17 10:06:25.423451+00	2025-04-17 11:14:42.072521+00	sBcljO-P7SlGb8CSIvDN_w	dbcaf92a-7e6c-4280-bd91-e7c140234f47
00000000-0000-0000-0000-000000000000	94	Qz2cjDCb01FYwbKo7e0rFQ	9f9d1d0d-205d-4329-be47-7780652484cc	t	2025-04-20 14:01:19.415758+00	2025-04-20 18:22:05.373183+00	_SmVDaIVsPw6b92ED6s1bg	dbcaf92a-7e6c-4280-bd91-e7c140234f47
00000000-0000-0000-0000-000000000000	54	RVkDf0tpJuGifk5k139d_g	9f9d1d0d-205d-4329-be47-7780652484cc	t	2025-04-17 11:14:42.074374+00	2025-04-17 12:50:07.452003+00	wb48pX1bpoIQesVC1vxAsQ	dbcaf92a-7e6c-4280-bd91-e7c140234f47
00000000-0000-0000-0000-000000000000	96	SLGnCaUeu25MGPvImKgDTw	311212c6-a864-4a03-9a68-4cf2744959ca	f	2025-04-24 11:46:39.961635+00	2025-04-24 11:46:39.961635+00	\N	4e6441cf-61a5-46f6-99e1-fc6bfce93554
00000000-0000-0000-0000-000000000000	55	sJBm-irtwoBehzqlt4MXAw	9f9d1d0d-205d-4329-be47-7780652484cc	t	2025-04-17 12:50:07.453355+00	2025-04-17 16:11:08.913298+00	RVkDf0tpJuGifk5k139d_g	dbcaf92a-7e6c-4280-bd91-e7c140234f47
00000000-0000-0000-0000-000000000000	56	nBasc4w-UyyltlVdgrgQYA	9f9d1d0d-205d-4329-be47-7780652484cc	t	2025-04-17 16:11:08.91769+00	2025-04-17 18:34:18.896054+00	sJBm-irtwoBehzqlt4MXAw	dbcaf92a-7e6c-4280-bd91-e7c140234f47
00000000-0000-0000-0000-000000000000	57	Yxkc7zCP5uJkPpqITLnSkQ	9f9d1d0d-205d-4329-be47-7780652484cc	t	2025-04-17 18:34:18.899634+00	2025-04-18 17:26:11.000297+00	nBasc4w-UyyltlVdgrgQYA	dbcaf92a-7e6c-4280-bd91-e7c140234f47
00000000-0000-0000-0000-000000000000	58	Hv73LxLfVXuq7NTX7-HI4A	9f9d1d0d-205d-4329-be47-7780652484cc	t	2025-04-18 17:26:11.007607+00	2025-04-18 18:24:50.319186+00	Yxkc7zCP5uJkPpqITLnSkQ	dbcaf92a-7e6c-4280-bd91-e7c140234f47
00000000-0000-0000-0000-000000000000	59	Ar9RXL2_sp_eGpxYL1VjDQ	9f9d1d0d-205d-4329-be47-7780652484cc	t	2025-04-18 17:26:14.987915+00	2025-04-18 18:26:32.048764+00	ooGkyaIxo3SegTWOkdwwsA	6957d42d-f665-4f9a-894b-6f04d669d47b
00000000-0000-0000-0000-000000000000	60	tTlRhYahW3FnSDThrsEzDw	9f9d1d0d-205d-4329-be47-7780652484cc	t	2025-04-18 18:24:50.321093+00	2025-04-19 07:10:15.312986+00	Hv73LxLfVXuq7NTX7-HI4A	dbcaf92a-7e6c-4280-bd91-e7c140234f47
00000000-0000-0000-0000-000000000000	62	vR6prRGoEF2YKLj_Kv3m5A	9f9d1d0d-205d-4329-be47-7780652484cc	t	2025-04-19 07:10:15.324966+00	2025-04-19 08:14:36.163531+00	tTlRhYahW3FnSDThrsEzDw	dbcaf92a-7e6c-4280-bd91-e7c140234f47
00000000-0000-0000-0000-000000000000	63	W3eVb0D9CEPn91-HzL8gXg	9f9d1d0d-205d-4329-be47-7780652484cc	t	2025-04-19 08:14:36.166223+00	2025-04-19 09:12:49.982779+00	vR6prRGoEF2YKLj_Kv3m5A	dbcaf92a-7e6c-4280-bd91-e7c140234f47
00000000-0000-0000-0000-000000000000	64	GuLwORgJVqSIBrOPVaVHsQ	9f9d1d0d-205d-4329-be47-7780652484cc	t	2025-04-19 09:12:49.985737+00	2025-04-19 10:11:31.152748+00	W3eVb0D9CEPn91-HzL8gXg	dbcaf92a-7e6c-4280-bd91-e7c140234f47
00000000-0000-0000-0000-000000000000	61	NBsqUbf9INRwHjtYnG7o3w	9f9d1d0d-205d-4329-be47-7780652484cc	t	2025-04-18 18:26:32.050015+00	2025-04-19 10:25:24.832359+00	Ar9RXL2_sp_eGpxYL1VjDQ	6957d42d-f665-4f9a-894b-6f04d669d47b
00000000-0000-0000-0000-000000000000	65	s0Et9FJgX9zMqJDhcnUajw	9f9d1d0d-205d-4329-be47-7780652484cc	t	2025-04-19 10:11:31.155866+00	2025-04-19 12:32:04.208154+00	GuLwORgJVqSIBrOPVaVHsQ	dbcaf92a-7e6c-4280-bd91-e7c140234f47
00000000-0000-0000-0000-000000000000	66	BijPYS9sunM5URGuHz2sYQ	9f9d1d0d-205d-4329-be47-7780652484cc	t	2025-04-19 10:25:24.836091+00	2025-04-19 12:36:13.730677+00	NBsqUbf9INRwHjtYnG7o3w	6957d42d-f665-4f9a-894b-6f04d669d47b
00000000-0000-0000-0000-000000000000	67	IIzOn_n-HiOP9gYkez9c8w	9f9d1d0d-205d-4329-be47-7780652484cc	t	2025-04-19 12:32:04.210014+00	2025-04-19 13:30:18.817929+00	s0Et9FJgX9zMqJDhcnUajw	dbcaf92a-7e6c-4280-bd91-e7c140234f47
00000000-0000-0000-0000-000000000000	69	XUnVRjIt0GBTCWqE-tLy6Q	9f9d1d0d-205d-4329-be47-7780652484cc	t	2025-04-19 13:30:18.820409+00	2025-04-19 14:28:38.568668+00	IIzOn_n-HiOP9gYkez9c8w	dbcaf92a-7e6c-4280-bd91-e7c140234f47
00000000-0000-0000-0000-000000000000	68	65c9uF7kvtOoLBcgDUNpeg	9f9d1d0d-205d-4329-be47-7780652484cc	t	2025-04-19 12:36:13.735357+00	2025-04-19 14:39:00.03006+00	BijPYS9sunM5URGuHz2sYQ	6957d42d-f665-4f9a-894b-6f04d669d47b
00000000-0000-0000-0000-000000000000	70	FAo-r8KyAz4SK6fvDLLLjQ	9f9d1d0d-205d-4329-be47-7780652484cc	t	2025-04-19 14:28:38.572322+00	2025-04-19 15:52:56.709766+00	XUnVRjIt0GBTCWqE-tLy6Q	dbcaf92a-7e6c-4280-bd91-e7c140234f47
00000000-0000-0000-0000-000000000000	72	a8qQCIgHATp13FWXgg0vaw	9f9d1d0d-205d-4329-be47-7780652484cc	t	2025-04-19 15:52:56.711645+00	2025-04-19 17:09:59.470945+00	FAo-r8KyAz4SK6fvDLLLjQ	dbcaf92a-7e6c-4280-bd91-e7c140234f47
00000000-0000-0000-0000-000000000000	73	tLc7VDYW2Sn8bsiD8iPOsw	9f9d1d0d-205d-4329-be47-7780652484cc	t	2025-04-19 17:09:59.472353+00	2025-04-19 18:08:10.305107+00	a8qQCIgHATp13FWXgg0vaw	dbcaf92a-7e6c-4280-bd91-e7c140234f47
00000000-0000-0000-0000-000000000000	71	hCjzR9JGauaVRlRKrGw6xw	9f9d1d0d-205d-4329-be47-7780652484cc	t	2025-04-19 14:39:00.03391+00	2025-04-19 18:32:39.519109+00	65c9uF7kvtOoLBcgDUNpeg	6957d42d-f665-4f9a-894b-6f04d669d47b
00000000-0000-0000-0000-000000000000	74	eAPAJ6GV9jeUjj7_IMBx-Q	9f9d1d0d-205d-4329-be47-7780652484cc	t	2025-04-19 18:08:10.3081+00	2025-04-19 19:12:36.679742+00	tLc7VDYW2Sn8bsiD8iPOsw	dbcaf92a-7e6c-4280-bd91-e7c140234f47
00000000-0000-0000-0000-000000000000	76	A2hOmKSoi2ESBEqCNzz1FQ	9f9d1d0d-205d-4329-be47-7780652484cc	t	2025-04-19 19:12:36.681107+00	2025-04-19 20:17:33.263242+00	eAPAJ6GV9jeUjj7_IMBx-Q	dbcaf92a-7e6c-4280-bd91-e7c140234f47
00000000-0000-0000-0000-000000000000	75	YJkoU2xef35auFvqJBEAVQ	9f9d1d0d-205d-4329-be47-7780652484cc	t	2025-04-19 18:32:39.520504+00	2025-04-19 20:46:31.8323+00	hCjzR9JGauaVRlRKrGw6xw	6957d42d-f665-4f9a-894b-6f04d669d47b
00000000-0000-0000-0000-000000000000	78	p7b5qIwYzQ7ecRgv4euRKw	9f9d1d0d-205d-4329-be47-7780652484cc	t	2025-04-19 20:46:31.835965+00	2025-04-20 06:39:47.699959+00	YJkoU2xef35auFvqJBEAVQ	6957d42d-f665-4f9a-894b-6f04d669d47b
00000000-0000-0000-0000-000000000000	77	1nKORCkEwyxBJlVmK5rjlw	9f9d1d0d-205d-4329-be47-7780652484cc	t	2025-04-19 20:17:33.267463+00	2025-04-20 06:39:51.623431+00	A2hOmKSoi2ESBEqCNzz1FQ	dbcaf92a-7e6c-4280-bd91-e7c140234f47
00000000-0000-0000-0000-000000000000	80	Lbv6Y0pLwNsQIselBwINdQ	9f9d1d0d-205d-4329-be47-7780652484cc	t	2025-04-20 06:39:51.623825+00	2025-04-20 07:45:24.268955+00	1nKORCkEwyxBJlVmK5rjlw	dbcaf92a-7e6c-4280-bd91-e7c140234f47
00000000-0000-0000-0000-000000000000	79	QB4cAEv_MB3Hwh_LTq6i3A	9f9d1d0d-205d-4329-be47-7780652484cc	t	2025-04-20 06:39:47.714845+00	2025-04-20 08:38:16.463709+00	p7b5qIwYzQ7ecRgv4euRKw	6957d42d-f665-4f9a-894b-6f04d669d47b
00000000-0000-0000-0000-000000000000	81	exfIV6MnPn-ifUuPqZP4gA	9f9d1d0d-205d-4329-be47-7780652484cc	t	2025-04-20 07:45:24.274497+00	2025-04-20 08:44:10.416855+00	Lbv6Y0pLwNsQIselBwINdQ	dbcaf92a-7e6c-4280-bd91-e7c140234f47
00000000-0000-0000-0000-000000000000	84	ZqUmzFXqmyNiOy249_HVtA	9f9d1d0d-205d-4329-be47-7780652484cc	f	2025-04-20 08:45:10.875107+00	2025-04-20 08:45:10.875107+00	\N	b4bd6431-1a5a-440d-8b66-3d1f68cce089
00000000-0000-0000-0000-000000000000	85	LSZJpCzEaWhIHAWmp3pIOg	9f9d1d0d-205d-4329-be47-7780652484cc	f	2025-04-20 08:45:28.932635+00	2025-04-20 08:45:28.932635+00	\N	cd6537fc-42bd-42ea-bb23-52d6bfcf19d4
00000000-0000-0000-0000-000000000000	83	eg0ExiKK8cmq3oidLHUAKQ	9f9d1d0d-205d-4329-be47-7780652484cc	t	2025-04-20 08:44:10.418055+00	2025-04-20 09:46:59.16774+00	exfIV6MnPn-ifUuPqZP4gA	dbcaf92a-7e6c-4280-bd91-e7c140234f47
00000000-0000-0000-0000-000000000000	82	3kDfEhQqQJ9TEwMPwkeD0A	9f9d1d0d-205d-4329-be47-7780652484cc	t	2025-04-20 08:38:16.465479+00	2025-04-20 10:15:33.455812+00	QB4cAEv_MB3Hwh_LTq6i3A	6957d42d-f665-4f9a-894b-6f04d669d47b
00000000-0000-0000-0000-000000000000	87	8eqjy5BerntS9IqDGa2YYQ	9f9d1d0d-205d-4329-be47-7780652484cc	t	2025-04-20 10:15:33.457774+00	2025-04-20 11:55:35.297954+00	3kDfEhQqQJ9TEwMPwkeD0A	6957d42d-f665-4f9a-894b-6f04d669d47b
00000000-0000-0000-0000-000000000000	86	5LiaZj0OuhoChmNuWLAJvw	9f9d1d0d-205d-4329-be47-7780652484cc	t	2025-04-20 09:46:59.170805+00	2025-04-20 12:02:18.153335+00	eg0ExiKK8cmq3oidLHUAKQ	dbcaf92a-7e6c-4280-bd91-e7c140234f47
00000000-0000-0000-0000-000000000000	89	hz9GUCzjhLtKz-Pz3cYJsQ	9f9d1d0d-205d-4329-be47-7780652484cc	t	2025-04-20 12:02:18.156272+00	2025-04-20 13:00:52.209702+00	5LiaZj0OuhoChmNuWLAJvw	dbcaf92a-7e6c-4280-bd91-e7c140234f47
00000000-0000-0000-0000-000000000000	95	JXsoDRgTJwXVKFay1Ft8Sw	9f9d1d0d-205d-4329-be47-7780652484cc	f	2025-04-20 18:22:05.374409+00	2025-04-20 18:22:05.374409+00	Qz2cjDCb01FYwbKo7e0rFQ	dbcaf92a-7e6c-4280-bd91-e7c140234f47
00000000-0000-0000-0000-000000000000	97	05aO_I3ocMfDZVr5KgV_Ig	311212c6-a864-4a03-9a68-4cf2744959ca	t	2025-04-24 11:48:53.34087+00	2025-04-27 05:54:23.183729+00	\N	eb9f36fa-a919-4070-8146-d51860b59903
00000000-0000-0000-0000-000000000000	91	pgfcAebIfbtMTkyd-kqjZA	9f9d1d0d-205d-4329-be47-7780652484cc	t	2025-04-20 13:43:33.378025+00	2025-05-07 16:55:59.822081+00	OUOUbqFYZc5OGt-lib2Cow	6957d42d-f665-4f9a-894b-6f04d669d47b
00000000-0000-0000-0000-000000000000	99	o6t55mttmph6	9f9d1d0d-205d-4329-be47-7780652484cc	f	2025-05-07 16:55:59.829822+00	2025-05-07 16:55:59.829822+00	pgfcAebIfbtMTkyd-kqjZA	6957d42d-f665-4f9a-894b-6f04d669d47b
00000000-0000-0000-0000-000000000000	98	--xRDsdIjAtHk1oEz3j5yw	311212c6-a864-4a03-9a68-4cf2744959ca	t	2025-04-27 05:54:23.193385+00	2025-05-23 09:21:06.724508+00	05aO_I3ocMfDZVr5KgV_Ig	eb9f36fa-a919-4070-8146-d51860b59903
00000000-0000-0000-0000-000000000000	100	5mihq5p74est	311212c6-a864-4a03-9a68-4cf2744959ca	t	2025-05-23 09:21:06.73179+00	2025-05-26 07:05:31.080375+00	--xRDsdIjAtHk1oEz3j5yw	eb9f36fa-a919-4070-8146-d51860b59903
00000000-0000-0000-0000-000000000000	101	7ln3jrygr6gd	311212c6-a864-4a03-9a68-4cf2744959ca	t	2025-05-26 07:05:31.098645+00	2025-05-26 08:38:01.300113+00	5mihq5p74est	eb9f36fa-a919-4070-8146-d51860b59903
00000000-0000-0000-0000-000000000000	102	q34zczgivlbk	311212c6-a864-4a03-9a68-4cf2744959ca	f	2025-05-26 08:38:01.303774+00	2025-05-26 08:38:01.303774+00	7ln3jrygr6gd	eb9f36fa-a919-4070-8146-d51860b59903
\.


--
-- Data for Name: saml_providers; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.saml_providers (id, sso_provider_id, entity_id, metadata_xml, metadata_url, attribute_mapping, created_at, updated_at, name_id_format) FROM stdin;
\.


--
-- Data for Name: saml_relay_states; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.saml_relay_states (id, sso_provider_id, request_id, for_email, redirect_to, created_at, updated_at, flow_state_id) FROM stdin;
\.


--
-- Data for Name: schema_migrations; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.schema_migrations (version) FROM stdin;
20171026211738
20171026211808
20171026211834
20180103212743
20180108183307
20180119214651
20180125194653
00
20210710035447
20210722035447
20210730183235
20210909172000
20210927181326
20211122151130
20211124214934
20211202183645
20220114185221
20220114185340
20220224000811
20220323170000
20220429102000
20220531120530
20220614074223
20220811173540
20221003041349
20221003041400
20221011041400
20221020193600
20221021073300
20221021082433
20221027105023
20221114143122
20221114143410
20221125140132
20221208132122
20221215195500
20221215195800
20221215195900
20230116124310
20230116124412
20230131181311
20230322519590
20230402418590
20230411005111
20230508135423
20230523124323
20230818113222
20230914180801
20231027141322
20231114161723
20231117164230
20240115144230
20240214120130
20240306115329
20240314092811
20240427152123
20240612123726
20240729123726
20240802193726
20240806073726
20241009103726
\.


--
-- Data for Name: sessions; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.sessions (id, user_id, created_at, updated_at, factor_id, aal, not_after, refreshed_at, user_agent, ip, tag) FROM stdin;
9a12cac6-34a9-49f3-80d1-6c5030a810de	9f9d1d0d-205d-4329-be47-7780652484cc	2025-04-13 17:34:32.650559+00	2025-04-13 17:34:32.650559+00	\N	aal1	\N	\N	Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36	106.222.201.95	\N
4e6441cf-61a5-46f6-99e1-fc6bfce93554	311212c6-a864-4a03-9a68-4cf2744959ca	2025-04-24 11:46:39.946834+00	2025-04-24 11:46:39.946834+00	\N	aal1	\N	\N	Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36	123.63.245.157	\N
d1255004-aa58-4f5a-ba3a-ce5573e11f89	9f9d1d0d-205d-4329-be47-7780652484cc	2025-04-13 20:03:05.21881+00	2025-04-13 20:03:05.21881+00	\N	aal1	\N	\N	Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36	106.222.201.95	\N
7518c604-c785-4571-b14c-61840ad63462	9f9d1d0d-205d-4329-be47-7780652484cc	2025-04-13 20:05:10.338825+00	2025-04-13 20:05:10.338825+00	\N	aal1	\N	\N	Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36	106.222.201.95	\N
e9c4c530-883d-4a39-a744-c281ddeeb650	9f9d1d0d-205d-4329-be47-7780652484cc	2025-04-13 20:11:56.810387+00	2025-04-13 20:11:56.810387+00	\N	aal1	\N	\N	Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36	106.222.201.95	\N
58e9f0f1-d764-4452-bcab-684dd69d643a	9f9d1d0d-205d-4329-be47-7780652484cc	2025-04-13 20:12:07.42041+00	2025-04-13 20:12:07.42041+00	\N	aal1	\N	\N	Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36	106.222.201.95	\N
3525f381-63b2-4f2b-8ffe-ab7b036ab0a3	9f9d1d0d-205d-4329-be47-7780652484cc	2025-04-13 20:12:13.864059+00	2025-04-13 20:12:13.864059+00	\N	aal1	\N	\N	Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36	106.222.201.95	\N
46086daa-64da-459e-96fb-c43e14f0f890	9f9d1d0d-205d-4329-be47-7780652484cc	2025-04-14 19:40:11.845018+00	2025-04-15 16:50:52.335965+00	\N	aal1	\N	2025-04-15 16:50:52.335897	Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36	106.222.201.95	\N
cee77e01-06e9-4371-b3e6-3334dd506c7a	9f9d1d0d-205d-4329-be47-7780652484cc	2025-04-13 20:18:00.263372+00	2025-04-14 16:40:19.038116+00	\N	aal1	\N	2025-04-14 16:40:19.038035	Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36	106.222.201.95	\N
1e511410-7fad-48d9-aed2-c12f2c84061f	9f9d1d0d-205d-4329-be47-7780652484cc	2025-04-13 18:09:18.456098+00	2025-04-14 16:54:14.358622+00	\N	aal1	\N	2025-04-14 16:54:14.358554	Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36	106.222.201.95	\N
292223e8-8c36-48e6-92a3-227556cd614d	9f9d1d0d-205d-4329-be47-7780652484cc	2025-04-14 17:05:58.325867+00	2025-04-14 17:05:58.325867+00	\N	aal1	\N	\N	Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36	106.222.201.95	\N
b6ae932e-0142-45c3-82b2-01af57e6a361	9f9d1d0d-205d-4329-be47-7780652484cc	2025-04-14 17:39:13.434538+00	2025-04-14 17:39:13.434538+00	\N	aal1	\N	\N	Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36	106.222.201.95	\N
a9a593b9-d476-4e11-bad3-ca467ab7cc89	9f9d1d0d-205d-4329-be47-7780652484cc	2025-04-14 17:36:28.404078+00	2025-04-14 18:35:25.22365+00	\N	aal1	\N	2025-04-14 18:35:25.223569	Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Mobile Safari/537.36	106.222.201.95	\N
2bb3bf6c-5fc7-4978-87ff-74c9ece61fcb	9f9d1d0d-205d-4329-be47-7780652484cc	2025-04-14 18:36:12.321567+00	2025-04-14 18:36:12.321567+00	\N	aal1	\N	\N	Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36	106.222.201.95	\N
e6d50e0f-0e8f-4462-b03c-a2a8b4c833a0	9f9d1d0d-205d-4329-be47-7780652484cc	2025-04-14 18:38:17.7913+00	2025-04-14 18:38:17.7913+00	\N	aal1	\N	\N	Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36	106.222.201.95	\N
266c97be-3fda-4edf-b8e8-bf5c880a69c2	9f9d1d0d-205d-4329-be47-7780652484cc	2025-04-14 18:40:13.655265+00	2025-04-14 18:40:13.655265+00	\N	aal1	\N	\N	Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36	106.222.201.95	\N
9dbe8db6-6cea-45fa-a7cb-af9981160b21	9f9d1d0d-205d-4329-be47-7780652484cc	2025-04-14 18:44:43.41702+00	2025-04-14 18:44:43.41702+00	\N	aal1	\N	\N	Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36	106.222.201.95	\N
99b44e92-c8f5-432e-a0fa-95d20c253da0	9f9d1d0d-205d-4329-be47-7780652484cc	2025-04-14 18:55:38.192494+00	2025-04-14 18:55:38.192494+00	\N	aal1	\N	\N	Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Mobile Safari/537.36	106.222.201.95	\N
30109109-8ab5-4984-9f00-5ed2b4136528	9f9d1d0d-205d-4329-be47-7780652484cc	2025-04-14 19:06:27.955522+00	2025-04-14 19:06:27.955522+00	\N	aal1	\N	\N	Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Mobile Safari/537.36	106.222.201.95	\N
268ab89c-983b-452a-97b9-ffd308016acc	9f9d1d0d-205d-4329-be47-7780652484cc	2025-04-14 19:08:09.733099+00	2025-04-14 19:08:09.733099+00	\N	aal1	\N	\N	Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Mobile Safari/537.36	106.222.201.95	\N
02815f5f-8ab4-41ae-b1fe-40dd27907166	9f9d1d0d-205d-4329-be47-7780652484cc	2025-04-14 19:34:49.232041+00	2025-04-14 19:34:49.232041+00	\N	aal1	\N	\N	Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Mobile Safari/537.36	106.222.201.95	\N
b95e7a4a-7e8d-476c-9182-3d835ee13164	9f9d1d0d-205d-4329-be47-7780652484cc	2025-04-14 19:48:08.843549+00	2025-04-15 10:59:52.813148+00	\N	aal1	\N	2025-04-15 10:59:52.813075	Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36	115.244.209.34	\N
3a61758a-26c7-4931-b373-6b5e559a31d5	9f9d1d0d-205d-4329-be47-7780652484cc	2025-04-15 11:24:05.346215+00	2025-04-15 11:24:05.346215+00	\N	aal1	\N	\N	Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36	115.244.209.34	\N
b918a79b-817b-4c8c-a034-1b2cbb90f830	49b49e35-a268-4d20-9e71-296680616b02	2025-04-20 13:50:45.368066+00	2025-04-20 13:50:45.368066+00	\N	aal1	\N	\N	Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36	106.222.201.95	\N
b4bd6431-1a5a-440d-8b66-3d1f68cce089	9f9d1d0d-205d-4329-be47-7780652484cc	2025-04-20 08:45:10.868272+00	2025-04-20 08:45:10.868272+00	\N	aal1	\N	\N	Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36	106.222.201.95	\N
cd6537fc-42bd-42ea-bb23-52d6bfcf19d4	9f9d1d0d-205d-4329-be47-7780652484cc	2025-04-20 08:45:28.931974+00	2025-04-20 08:45:28.931974+00	\N	aal1	\N	\N	Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36	106.222.201.95	\N
49152e9e-248f-4be0-ad0d-5618c59169c7	49b49e35-a268-4d20-9e71-296680616b02	2025-04-20 13:51:36.917432+00	2025-04-20 13:51:36.917432+00	\N	aal1	\N	\N	Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36	106.222.201.95	\N
dbcaf92a-7e6c-4280-bd91-e7c140234f47	9f9d1d0d-205d-4329-be47-7780652484cc	2025-04-15 16:57:29.88107+00	2025-04-20 18:22:05.378862+00	\N	aal1	\N	2025-04-20 18:22:05.378792	Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36	106.222.201.95	\N
6957d42d-f665-4f9a-894b-6f04d669d47b	9f9d1d0d-205d-4329-be47-7780652484cc	2025-04-15 11:28:59.856798+00	2025-05-07 16:55:59.839405+00	\N	aal1	\N	2025-05-07 16:55:59.839318	Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36	152.58.33.60	\N
eb9f36fa-a919-4070-8146-d51860b59903	311212c6-a864-4a03-9a68-4cf2744959ca	2025-04-24 11:48:53.338336+00	2025-05-26 08:38:01.307308+00	\N	aal1	\N	2025-05-26 08:38:01.30724	Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36	49.207.58.179	\N
\.


--
-- Data for Name: sso_domains; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.sso_domains (id, sso_provider_id, domain, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: sso_providers; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.sso_providers (id, resource_id, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: users; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.users (instance_id, id, aud, role, email, encrypted_password, email_confirmed_at, invited_at, confirmation_token, confirmation_sent_at, recovery_token, recovery_sent_at, email_change_token_new, email_change, email_change_sent_at, last_sign_in_at, raw_app_meta_data, raw_user_meta_data, is_super_admin, created_at, updated_at, phone, phone_confirmed_at, phone_change, phone_change_token, phone_change_sent_at, email_change_token_current, email_change_confirm_status, banned_until, reauthentication_token, reauthentication_sent_at, is_sso_user, deleted_at, is_anonymous) FROM stdin;
00000000-0000-0000-0000-000000000000	49b49e35-a268-4d20-9e71-296680616b02	authenticated	authenticated	wemadesaas@gmail.com	\N	2025-04-20 13:50:45.365533+00	\N		\N		\N			\N	2025-04-20 13:51:36.91735+00	{"provider": "google", "providers": ["google"]}	{"iss": "https://accounts.google.com", "sub": "104622013197299088269", "name": "saas", "email": "wemadesaas@gmail.com", "picture": "https://lh3.googleusercontent.com/a/ACg8ocIrpgQM53Jsju106nJqM-LfiVla8HrYBVhThoqvPMo1eGzPmg=s96-c", "full_name": "saas", "avatar_url": "https://lh3.googleusercontent.com/a/ACg8ocIrpgQM53Jsju106nJqM-LfiVla8HrYBVhThoqvPMo1eGzPmg=s96-c", "provider_id": "104622013197299088269", "email_verified": true, "phone_verified": false}	\N	2025-04-20 13:50:45.347369+00	2025-04-20 13:51:36.920977+00	\N	\N			\N		0	\N		\N	f	\N	f
00000000-0000-0000-0000-000000000000	9f9d1d0d-205d-4329-be47-7780652484cc	authenticated	authenticated	aaayushsinghh@gmail.com	\N	2025-04-13 17:34:32.646859+00	\N		\N		\N			\N	2025-04-20 08:45:28.931912+00	{"provider": "google", "providers": ["google"]}	{"iss": "https://accounts.google.com", "sub": "110701064507037676943", "name": "ayush kumar", "email": "aaayushsinghh@gmail.com", "picture": "https://lh3.googleusercontent.com/a/ACg8ocLtbRLqjMbrIzR_rvPCu-AaM5bLjLuXsE1qejeg9A32DSVNkA=s96-c", "full_name": "ayush kumar", "avatar_url": "https://lh3.googleusercontent.com/a/ACg8ocLtbRLqjMbrIzR_rvPCu-AaM5bLjLuXsE1qejeg9A32DSVNkA=s96-c", "provider_id": "110701064507037676943", "email_verified": true, "phone_verified": false}	\N	2025-04-13 17:34:32.618196+00	2025-05-07 16:55:59.83444+00	\N	\N			\N		0	\N		\N	f	\N	f
00000000-0000-0000-0000-000000000000	311212c6-a864-4a03-9a68-4cf2744959ca	authenticated	authenticated	gaurav.gupta@acko.tech	\N	2025-04-24 11:46:39.938144+00	\N		\N		\N			\N	2025-04-24 11:48:53.338213+00	{"provider": "google", "providers": ["google"]}	{"iss": "https://accounts.google.com", "sub": "110131888569651195068", "name": "Gaurav Gupta", "email": "gaurav.gupta@acko.tech", "picture": "https://lh3.googleusercontent.com/a/ACg8ocLLbb7upSHLFh8576piNLO0t1sXco7ZJ9XAwl4gjERZHBkD0DU=s96-c", "full_name": "Gaurav Gupta", "avatar_url": "https://lh3.googleusercontent.com/a/ACg8ocLLbb7upSHLFh8576piNLO0t1sXco7ZJ9XAwl4gjERZHBkD0DU=s96-c", "provider_id": "110131888569651195068", "custom_claims": {"hd": "acko.tech"}, "email_verified": true, "phone_verified": false}	\N	2025-04-24 11:46:39.880594+00	2025-05-26 08:38:01.305443+00	\N	\N			\N		0	\N		\N	f	\N	f
\.


--
-- Data for Name: intern_forms; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.intern_forms (id, user_id, form_data, created_at, updated_at) FROM stdin;
502d595a-9744-4587-b9b0-28dc0b4e8a40	9f9d1d0d-205d-4329-be47-7780652484cc	{"learning": {"softSkills": [{"title": "Proactive Problem Solving and Not just Task ", "context": "During my 1:1s with my manager (Gaurav), he often encouraged me not to just complete tasks, but to actively look for problems to solve. He emphasized thinking beyond assigned work and creating value where possible. I noticed there should be something that helps one show contributions in a visually presentational manner in less time. So I built a small tool that simplifies this process — it has a form to collect inputs and then shows a visual portfolio-like page summarizing the experience.", "learning": "This experience taught me the value of initiative — spotting a problem that no one asked to solve, and doing it anyway because it adds value. I also learned that empathy can drive good product ideas. Thinking from the intern's point of view helped me design something truly helpful."}, {"title": "Ownership & Cross-Functional Collaboration", "context": "My teammates entrusted me with complete ownership of a new chatbot idea — a group conversation tool for Clinic. I worked across multiple domains — backend (sockets, prompt handling, understanding RAG), AI integration, and even the mobile prototype — to build a working demo.", "learning": "I learned how to manage a project independently, navigate ambiguity, and drive something from concept to prototype. It taught me the value of trust, proactive communication. Working across teams and technologies pushed me to step out of my comfort zone and level up both technically and interpersonally."}], "interestedIn": ["Machine Learning", "Cloud Computing", "Docker"], "currentlyLearning": ["AI", "MCP Servers", "React Native", "Key Cloak"], "crossTeamCollaboration": [{"teams": ["Health-Embedded-Growth"], "title": "Ackathon — ClaimChain", "context": "During an internal hackathon, I teamed up with developers from the Health, Embedded, and Growth (Marketing) teams to work on a centralized repository for tracking insurance claims. The goal was to create a system that flags suspicious patterns and helps prevent fraudulent claims across domains.\\n\\nWe had to combine technical knowledge (e.g., how claims flow in different business lines), domain understanding (marketing + health), and align on a solution that worked across teams.", "learning": "Working with such a diverse team helped me understand the power of combining different perspectives. I learned how to communicate effectively across domains, align on a shared vision despite different KPIs, and prioritize features based on collective impact. It also gave me insight into how business, tech, and operations can collaborate to build smarter, more secure systems."}], "technicalLearningEntries": [{"title": "Vish Meeting (Generic vs Specific):", "context": "In one of the Acko Clinic initial meetings, we were walking through the backend design and presenting the schema for tickets. The attributes we had defined were quite specific to the Clinic use case. During the meeting, we got a key feedback point — to make the schema more generic since the ticketing system could be reused across multiple domains within ACKO, not just for Clinic.", "learning": "This made me realize the importance of thinking at a platform level and designing systems that are extensible. Instead of hardcoding domain-specific stuff, it’s better to identify core common fields and keep things modular so other teams can plug their own specifics in. Reusability > Reinventing for every use case."}, {"title": " Vish KT on Microservice vs Monolith Architecture:", "context": "We were chilling on the first floor sofa when we caught Vish with one of our doubts — Monolith vs Microservice architecture, and which one makes more sense when building something with a broader use case.\\nVish broke it down nicely:\\n\\nHe gave the example of Uber, where they ended up with 300+ microservices — and while that sounds super scalable, it actually became a mess to manage.\\n\\nHe mentioned that for most projects, the ideal number of microservices is somewhere around 8–14, not too few, not too many — just enough to keep things clean but still modular.", "learning": "Monolith is like an all-in-one package — all features, logic, and data are part of a single codebase. Easier to get started with, but can become a pain as the project grows.\\n\\nMicroservice architecture breaks the app into smaller, independent services that can be developed, deployed, and scaled individually.\\n\\nWhen to use what?\\n\\nUse Monolith when the project is small, the team is small, or you're just starting out and need to iterate fast.\\n\\nGo for Microservices when the project is expected to scale big, has multiple teams working on different parts, or has different modules that can work independently."}]}, "projects": [{"docs": [], "link": "https://github.com/ackotech/insurebot", "role": "FullStack developer: Fixing bugs, UI improvement, enhancing user experiences while using chatbot", "media": [{"url": "https://res.cloudinary.com/dxhwhhakx/image/upload/v1744659711/interfolio/9f9d1d0d-205d-4329-be47-7780652484cc/z1jskhhl8riji8i7tyxn.png", "type": "image", "caption": "", "isUpload": true}, {"url": "https://res.cloudinary.com/dxhwhhakx/image/upload/v1744660111/interfolio/9f9d1d0d-205d-4329-be47-7780652484cc/cepfx3q1k6lg07dsw9lb.png", "type": "image", "caption": "", "isUpload": true}], "title": "Sales Bot", "outcome": "While I was working we saw an overall increase in sales by 2% in month of January. In month of April there was an overall increase of 10% in sales.", "tickets": [], "challenges": [{"tags": ["frontend"], "approach": "Conducted research and identified the ScrollView component as a potential solution. Experimented with various ScrollView attributes to optimize the user experience and effectively address the scrolling issue.", "obstacle": "Message scrolling at the top of the message body obscured newly generated content, impacting user visibility.", "resolution": "Successfully implemented and configured the ScrollView, resolving the message scrolling problem. This enhancement was thoroughly tested and subsequently deployed to the production environment.", "lessonsLearned": ""}], "description": "ACKO Assist sales bot is an RAG based chat bot that helps customers while in the purchasing journey. \\nThe bot it well equipped with all the information related to company, policy and helps stuck user as well as connect them to the client ", "timelineEnd": "2024-12-20", "pullRequests": [{"date": "2024-11-20", "link": "https://github.com/ackotech/insurebot/pull/22", "title": "Feat: streaming messages", "status": "Closed", "description": "This PR was meant to add streaming to the bot message "}, {"date": "2024-12-24", "link": "https://github.com/ackotech/insurebot/pull/34", "title": "Removed scroll into view ", "status": "Merged", "description": "Removed the scroll into view as it was causing page scroll issue on safari. As soon as the page loads the page used to scroll this was because scroll into view works by taking page in view and chatbot was in a iframe so the iframe parent was webpage which caused webpage to scroll with chat on load."}, {"date": "2025-01-07", "link": "https://github.com/ackotech/insurebot/pull/39", "title": "AB-experiment-UI and Lang Suggestion", "status": "Merged", "description": "PR for:\\n1. experimenting call & chat together UI in bot vs call and chat separate on health pages. \\n2. Added support to choose language for call in chat.  "}, {"date": "2025-01-13", "link": "https://github.com/ackotech/insurebot/pull/40", "title": "New logo update ", "status": "Merged", "description": "New logo and favicon update "}], "technologies": ["Next.JS", "Node.JS", "TailwindCSS", "TypeScript"], "timelineStart": "2024-11-18"}, {"link": "https://www.acko.com/p/acko-assist/support", "role": "1. Fixing UI bugs\\n2. Integrating missing APIs\\n3. Doing changes in data aggregator service \\n4. Cross team collaboration related to API bugs \\n5. Fixing prompts and SOPs\\n6. Improving overall user experience ", "media": [{"url": "https://res.cloudinary.com/dxhwhhakx/image/upload/v1745052812/interfolio/9f9d1d0d-205d-4329-be47-7780652484cc/c2du7p7xi1n4uvmxa04j.png", "type": "image", "caption": "", "isUpload": true}, {"url": "https://res.cloudinary.com/dxhwhhakx/image/upload/v1745053133/interfolio/9f9d1d0d-205d-4329-be47-7780652484cc/r74jhlaj4ibt0w3hv3xg.png", "type": "image", "caption": "", "isUpload": true}, {"url": "https://res.cloudinary.com/dxhwhhakx/image/upload/v1745053199/interfolio/9f9d1d0d-205d-4329-be47-7780652484cc/c5qxpxdzcd92gbvv3saq.png", "type": "image", "caption": "", "isUpload": true}], "title": "Support Bot ", "outcome": "Add Missing support for engine number, chasis number and fixed conversations summary", "tickets": [{"link": "https://ackotech.atlassian.net/browse/AGI-77", "type": "Task", "title": "Update new ACKO logo", "status": "Done", "contribution": "Updated new ACKO logo and favicon"}, {"link": "https://ackotech.atlassian.net/browse/AGI-78?atlOrigin=eyJpIjoiZDQ5NDY0OGRhYjNiNGU1MWE0NWNjYmFiYzc0NzlkN2UiLCJwIjoiaiJ9", "type": "Task", "title": "Copy/UI changes for chat with us", "status": "Done", "contribution": "Updated UI and copy changes in chatbot"}, {"link": "https://ackotech.atlassian.net/browse/AGI-65?atlOrigin=eyJpIjoiOWQ3N2M0ZTYxOWZlNDg0ODllMDZmNjgwY2VkMDI3MGEiLCJwIjoiaiJ9", "type": "Task", "title": "Design sanity", "status": "Done", "contribution": "Checked design sanity for support bot dog fooding"}], "challenges": [{"tags": ["backend", "team"], "approach": "After cloning the data aggregator I first contacted the team who wrote the service tried finding them at their desk but didn't got much help. Finally I tried looking into the contributors list to find the team or person who have used the service in past and made changes.", "obstacle": "Extending the data aggregator service to provide more info required by support bot but this change either need to be done by the data aggregator team or us. Which ultimately falled back to us. For doing changes and testing them locally running data aggregator was required which was a big trouble. ", "resolution": "Finally I was able to find help from health team who used this service few months back. They shared the secrets, application configuration and few changes in pom.xml file which worked and service ran I was able to make the changes call the local service and test those capabilities. ", "lessonsLearned": "Document Dependencies, Create a Proper readme.md file to document steps of installation and running, cross team communication "}, {"tags": ["backend"], "approach": "First I and Madhurjya tested why it was happening and dependencies on which we were associating the user with trackedId. We found the issue in findUser function where we added a more robust logic of associating user with their user_Id", "obstacle": "User and Tracker Id issue: The issue was a trackedId was getting associated with multiple user_Id which was used to load conversation as a result if user_Id was changing without trackedId one could load other user conversation also. This will happen when same device is used to login to multiple account.", "resolution": "The issue was fixed same dame and fixes were deployed.", "lessonsLearned": ""}], "description": "Support bot is designed to provide customer with any sort of help related to policy, renewal, claim, non-claims.\\nSupport bot covers health, auto claims, auto non-claims, IVR support auto  and IVR support health \\nSupport bot is designed to help used by providing policy documents, urls to update important policy related stuff and connecting customers with agent.", "timelineEnd": "2025-04-13", "pullRequests": [{"date": "2024-11-27", "link": "https://github.com/ackotech/insurebot/pull/25", "title": "Feat: query param based conversation handling", "status": "Merged", "description": "added if start === new, the bot triggers a fresh conversation. This was mainly used for redirection flows to ensure users always land in a clean state when needed."}, {"date": "2024-11-27", "link": "https://github.com/ackotech/insurebot/pull/26", "title": "Feat: added conversation ui", "status": "Merged", "description": "Added a Conversations Page for the chatbot — shows a list of all conversations, organized by date, making it easier to track and review past interactions."}, {"date": "2024-11-28", "link": "https://github.com/ackotech/insurebot/pull/27", "title": "Gross premium amount addition", "status": "Merged", "description": "Introduced a new gross_premium field in the PolicyPremiumDetails interface.\\n\\nUpdated GraphQL query to fetch grossPremium from the premium breakup.\\n\\nMapped gross premium in the autoPolicyDataMapper by summing up all grossPremium values from plan_covers."}, {"date": "2024-11-29", "link": "https://github.com/ackotech/insurebot/pull/29", "title": "Feat: added engine and chassis number changes ", "status": "Merged", "description": "Made changes in the data aggregator to support engine and chassis number updates.\\nRan it locally, modified the GraphQL query to fetch the required fields, and integrated it into the chatbot flow — enabling user-specific queries for updating engine and chassis numbers."}, {"date": "2024-11-29", "link": "https://github.com/ackotech/insurebot/pull/30", "title": "e-card changes", "status": "Merged", "description": "Added E card object in bot knowledge while initial data fetching to provide user with e-card link"}, {"date": "2025-01-02", "link": "https://github.com/ackotech/insurebot/pull/31", "title": "Added mapper and url for claim tracking", "status": "Merged", "description": "Introduced a new API call to fetch claim tracking details using the encrypted claim ID.\\n\\nCreated a detailed interface (AutoClaimsDetailsInterface) to define the structure of the response including claim details, metadata, current stage, actions, and timeline.\\n\\nImplemented a data mapper (claimTrackingDataMapper) to transform and structure the raw API response into a frontend-consumable format.\\n\\nAdded dynamic callback URL generation using the claim ID and card ID for scheduling support calls.\\n\\nIntegrated this mapped data for use in the chatbot, enabling users to track their claim journey with personalized, structured information."}, {"date": "2025-01-06", "link": "https://github.com/ackotech/insurebot/pull/41", "title": "Support and conversations page ui changes", "status": "Merged", "description": "1. Conversation TopBar Enhancements\\n2. Conversations Page Styling Revamp\\n3. Enhanced message preview cards\\n4. Support Page: More Menu Update\\n5.Error Handling (IVR Call Scheduling)\\nSpecific messaging for DND phone number detection:"}, {"date": "2025-04-08", "link": "https://github.com/ackotech/insurebot/pull/90", "title": "Support bot enhancement UI and prompt", "status": "Merged", "description": "Modified the prompt for improved response formatting with bullets, bold text, and line spacing\\n\\nAdded support for first message greeting to new users\\n\\nUpdated the loading GIF\\n\\nFixed UI elements in chat \\n\\nAdded returning user flag to send a different welcome message"}, {"date": "2025-04-15", "link": "https://github.com/ackotech/insurebot/pull/93", "title": "Response formatting and message summary", "status": "Merged", "description": "Implemented generation of summarized messages for both user and agent\\n\\nFixed and refined the prompt logic\\n\\nIntroduced userSummaryTitle for better conversation context\\n\\nUpdated IVR to handle the first message experience\\n\\nChanged copy in menu options for clarity"}, {"date": "2025-04-18", "link": "https://github.com/ackotech/insurebot/pull/94", "title": "Fix: Greeting message changes used CX360 user data", "status": "Open", "description": "Integrated CX360 userProfile API to fetch user data\\n\\nUsed first policy purchase date to calculate \\"Customer Since\\"\\n\\nDisplayed a personalized welcome message in chat using that data\\n\\nAdded a mapper function to format CX360 response\\n\\nOptimized performance by making parallel API calls"}], "technologies": ["React", "Node", "TypeScript", "SpringBoot"], "timelineStart": "2024-12-03"}, {"docs": [{"link": "https://ackotech.atlassian.net/wiki/x/RwCGs", "tags": "Contract", "purpose": "Schema for mobile app", "contribution": "Made the initial schema doc for reviee ", "documentTitle": "User Schema "}, {"link": "https://ackotech.atlassian.net/wiki/x/NgGFs", "tags": "Contract", "purpose": "Message schema for clinic app", "contribution": "Initial schema for approval", "documentTitle": "Message Schema"}, {"link": "https://ackotech.atlassian.net/wiki/x/P4CBs", "tags": "Contract", "purpose": "Initial conversation schema", "contribution": "made the initial schema", "documentTitle": "Conversation Schema"}, {"link": "https://ackotech.atlassian.net/wiki/x/uYB7s", "tags": "Contract", "purpose": "For media attachment ", "contribution": "initial contribution", "documentTitle": "Attachment Schema"}], "link": "https://github.com/ackotech/acko-clinic-app/tree/refactor", "role": "As part of the ACKO Clinic App team, I worked on the React Native Expo tech stack and was actively involved in building the app from scratch. This project gave me hands-on experience with several core aspects of mobile development and helped me pick up and implement many concepts around React Native, navigation, component architecture, and state management.\\n\\nBuilt and integrated screens for Chat, Homepage, Prescription, Medicines, Cart, and Order flow.\\n\\nCollaborated on setting up the design system and component-level structure for scalability.\\n\\n", "media": [{"url": "https://res.cloudinary.com/dxhwhhakx/image/upload/v1745073580/interfolio/9f9d1d0d-205d-4329-be47-7780652484cc/qqayra6gigu5soq8saqo.png", "type": "image", "caption": "", "isUpload": true}, {"url": "https://res.cloudinary.com/dxhwhhakx/image/upload/v1745073600/interfolio/9f9d1d0d-205d-4329-be47-7780652484cc/emtafjkqrdv4vqrgkqs4.png", "type": "image", "caption": "", "isUpload": true}, {"url": "https://res.cloudinary.com/dxhwhhakx/image/upload/v1745073625/interfolio/9f9d1d0d-205d-4329-be47-7780652484cc/qugh7sfuomjwdnpglqcs.png", "type": "image", "caption": "", "isUpload": true}, {"url": "https://res.cloudinary.com/dxhwhhakx/image/upload/v1745074072/interfolio/9f9d1d0d-205d-4329-be47-7780652484cc/znou6yfck2s63ugkt5vi.png", "type": "image", "caption": "", "isUpload": true}, {"url": "https://res.cloudinary.com/dxhwhhakx/image/upload/v1745074093/interfolio/9f9d1d0d-205d-4329-be47-7780652484cc/mid8drowewqkszrgkfrm.png", "type": "image", "caption": "", "isUpload": true}, {"url": "https://res.cloudinary.com/dxhwhhakx/image/upload/v1745074106/interfolio/9f9d1d0d-205d-4329-be47-7780652484cc/glaqlvttheukevfbmo83.png", "type": "image", "caption": "", "isUpload": true}, {"url": "https://res.cloudinary.com/dxhwhhakx/image/upload/v1745074189/interfolio/9f9d1d0d-205d-4329-be47-7780652484cc/fhoudm2pwasqcgb0siv6.png", "type": "image", "caption": "", "isUpload": true}, {"url": "https://res.cloudinary.com/dxhwhhakx/image/upload/v1745074199/interfolio/9f9d1d0d-205d-4329-be47-7780652484cc/dniyjqivh6ts9mdsgglz.png", "type": "image", "caption": "", "isUpload": true}, {"url": "https://res.cloudinary.com/dxhwhhakx/image/upload/v1745074212/interfolio/9f9d1d0d-205d-4329-be47-7780652484cc/bdtywm4fp047pqyjewqg.png", "type": "image", "caption": "", "isUpload": true}], "title": "ACKO Clinic App", "outcome": "The ACKO Clinic App aims to transform how families access healthcare by offering 24/7 digital consultations tailored to each family member's needs.\\n\\nOnce live, it is expected to reduce dependency on in-person visits, increase access to specialists, and improve health management with features like medicine reminders, digital prescriptions, and AI-driven doctor recommendations.\\n\\nThe app is being designed to improve user convenience, encourage proactive health monitoring, and build a connected health ecosystem through features like community forums and personalized health news.", "tickets": [], "challenges": [{"tags": ["frontend", "time", "team"], "approach": "We decided to go on our own creating something from what we understood from Vish about the product. Created a WhatsApp group to share designs from dribble and bechance for each feature which we were thinking of. ", "obstacle": "Design challenge: We started working on ACKO clinic early few screens were ready so we created them but after that we faced blocker on design.", "resolution": "We were able to get some clarity and created the UI by considering those inspiration.\\nThis helped us to demo on our biweekly meet to Vish where we used to get further recommendation which we used to work on.", "lessonsLearned": "Sometime we need to have find, plan and execute and go beyond our roles to create something."}, {"tags": [], "approach": "We decided to clear our doubts and better understand the product before building so that we could create something meaningful. From time to time  we visited Vish and asked our doubts and that helped us to get better understanding of product. ", "obstacle": "Product clarity: The initial briefing being less we had a different idea of product as compared to leadership.", "resolution": "We were clear and worked according to what we got idea of product.", "lessonsLearned": ""}], "description": "The ACKO Clinic App is a digital health platform designed to offer comprehensive, 24x7 care for the entire family. Built to serve users across all age groups — elders, children, and youngsters — the app intelligently connects them to the right medical specialists based on their needs.\\n\\nAt the heart of the experience is an AI-driven recommendation engine that identifies the most suitable doctor for each health concern, ensuring faster and more accurate care.\\n\\nKey Features:\\nDoctor Access 24x7 – Instant consultations via chat or video calls.\\n\\nSmart Doctor Matching – AI suggests the right specialist based on symptoms and user profile.\\n\\nPrescriptions & Reports – Secure storage and sharing of medical documents.\\n\\nMedicine Reminders – Timely alerts to never miss a dose.\\n\\nHealth News & Tips – Curated content to keep users informed and aware.\\n\\nCommunity Support – Engage in health-related discussions with verified experts and other users.\\n\\nWith a family-first approach and modern tech at its core, the ACKO Clinic App aims to be India’s most trusted digital clinic for accessible, continuous, and personalized healthcare.", "timelineEnd": "2025-05-15", "pullRequests": [{"date": "2025-01-09", "link": "", "title": "Building Chat UI and Backend", "status": "Merged", "description": "Week 1:\\nCompleted project setup for both frontend and backend.\\n\\nCleaned up backend repository and initialized base structure.\\n\\nStarted building the chat interface and integrated initial backend support.\\n\\nImplemented prompt changes for triaging: capturing symptoms and medication details.\\n\\nCreated and styled core screens for the chat experience."}, {"date": "2025-01-16", "link": "https://github.com/ackotech/acko-clinic-app/commit/a8aa245f9002427008381bdd07cfec0df200466a", "title": "Chat enhancement (Doctor join/leave event) & Doctor message support", "status": "Merged", "description": "Week 2:\\nModified chat to have join and leave event for doctor as notification pill using socket.\\nEstablished socket connection between app->backend & ops->backend.\\nAdd feature for doctor message in chat making the 1:1 chat to a group chat."}, {"date": "2025-01-23", "link": "https://github.com/ackotech/acko-clinic-app/commit/b1ad3a4c94c7915dd55e92cc7376e3107cafc233", "title": "Restructured project and creates family member based experience in chat", "status": "Merged", "description": "Week 3:\\nWorked on structuring the project removing unnecessary libraries.\\nCleaned up the code took reference from existing GitHub repositories for folder and file structure.\\nCreated an experience where we see family member based chat (later it was discarded)."}, {"date": "2025-02-11", "link": "https://github.com/ackotech/acko-clinic-app/commit/26fbe4a70c7b5817deba747b1f3cb279bc43d260", "title": "Adding home page experience in app", "status": "Merged", "description": "Week 4:\\nWorked further on structuring the project with Madhurjya.\\nCreated a HomePage for app with ongoing activity layout to track delivery, medicine and lab test for a user."}, {"date": "2025-01-30", "link": "https://github.com/ackotech/acko-clinic-app-backend/commit/0e8c736942e81807ac388016b98526c0b47784b2", "title": "Backend: Handling Non LLM response", "status": "Merged", "description": "Week 5: \\nworked on handling non llm response this case was when doctor joined the room.\\nDetect doctor joining of present route the message through different handler where we emit the message and save to db. \\nAs soon as doctor leaves the message is sent to llm to handle user query.\\nWorked on frontend creating widgets for chat"}, {"date": "2025-02-20", "link": "https://github.com/ackotech/acko-clinic-app/commit/8be4cf942a16edcdc3c56828725e7b7f952fdce3", "title": "Frontend API Integration and backend changes", "status": "Merged", "description": "Week 6: \\nWorked on integrating API's for care team, clinic during the user auth\\nBackend changes for message schema and frontend changes according to it.\\nPrompt changes and worked with team completing the chat flow."}, {"date": "2025-02-27", "link": "https://github.com/ackotech/acko-clinic-app-backend/commit/0588a8a7aeb22145f6cd3c5a0e873515df88eace", "title": "Ticket support for app", "status": "Merged", "description": "Week 7: \\nWorked on creating ticket for chat and video support.\\nCreated model, controllers and routes for creating and fetching ticket.\\nTicket gets created after AI triaging. AI asks question then generates a response which is saved and sent to ops tool. \\nUser gets message that appointment has been created and joining link for video appointment \\n"}, {"date": "2025-03-05", "link": "https://github.com/ackotech/acko-clinic-app/commit/bb34894685ca5078f6b85095cc35f6f18bd91f55", "title": "Supplement ui and flow", "status": "Merged", "description": "Week 8: \\nWorked on creating supplement UI as per Raka's design.\\nCreated a supplement recommendation flow based on user input. \\nCreated zustand store to manage and store supplement data "}, {"date": "2025-03-10", "link": "https://github.com/ackotech/acko-clinic-app/commit/31e42dfc529f67b2b3ef9fdaabb3f7441274607c", "title": "Worked on creating cart, checkout and store", "status": "Merged", "description": "Week 9:\\nCreated cart, checkout flow took inspiration from dibble for designs\\nParticipated in team discussion finding ways to improve the app look and feel.\\nMade changes in conversation and schema to adapt to new app flow"}, {"date": "2025-03-19", "link": "", "title": "Added support for bot to decide medical and non medical chat", "status": "Merged", "description": "Week 10:\\nWorked on adding a new handler which first decides whether user message is medical or general query.\\nBased on the query it send the data to medical query handler and non medical query handler "}, {"date": "2025-03-26", "link": "https://github.com/ackotech/acko-clinic-app-backend/commit/aa5b71500006bd901ca4713a71d5534c54cf67c3", "title": "Integrated backend with Tickets service and Prescription Service ", "status": "Merged", "description": "Week 11:\\nWorked on Integrating Tickets api from the ticket service create by backend team.\\nWorked in Integrating the Prescription API.\\nAdded API for sending doctor message from ops tool -> backend (REST API) -> frontend (Socket event)"}, {"date": "2025-04-02", "link": "", "title": "Added Prescription Widget and Template service", "status": "Merged", "description": "Week 12:\\nWorked on creating widget for prescription.\\nPrescription is now sent in chat as messages.\\nMessage 1 is preview and Message 2 is labtest and medicines. \\nStudied and Implemented Template service for generating prescription pdf.\\nWrote jinja code to generate the pdf."}, {"date": "2025-04-17", "link": "https://github.com/ackotech/acko-clinic-app/commit/a641b65c23eb8862a5528c1e5af18b17b5a50f3d", "title": "Added cart, order and prescription API ", "status": "Merged", "description": "Week 13:\\nWorked on creating end to end flow for cart creating and getting cart.\\nOrder end to end flow: order creation from cart. \\nPayment API used ACKO central API for payment. \\nCreated store to manage the state."}], "technologies": ["React Native (Expo)", "Expo Go", "Tailwind CSS", "TypeScript", "React Navigation", "Axios / React Query", "AsyncStorage"], "timelineStart": "2025-01-15"}, {"docs": [{"link": "https://ackotech.atlassian.net/wiki/x/nwDzt", "tags": "Contract", "purpose": "Schema clarity", "contribution": "Designed the Schema", "documentTitle": "Tickets API Contract"}, {"link": "https://ackotech.atlassian.net/wiki/x/BoAQtQ", "tags": "Contract", "purpose": "For schema clarity", "contribution": "Designed the schema", "documentTitle": "Slots API Contract"}, {"link": "https://ackotech.atlassian.net/wiki/x/CYAStQ", "tags": "Contract", "purpose": "Product clarity", "contribution": "Designed Schema", "documentTitle": "Prescription API Contract"}, {"link": "https://ackotech.atlassian.net/wiki/x/aoAPtQ", "tags": "Contract", "purpose": "Contract clarity", "contribution": "designed Schema", "documentTitle": "API contract Medicine, Lab Test"}], "link": "https://github.com/ackotech/acko-clinic-ops-tool", "role": "I was involved in the end-to-end development of the platform. I implemented multiple modules from scratch including ticket reply, view details, prescription review, and the video call interface with PiP capabilities. I also built reusable UI components, integrated state management using Zustand, and have planned to handled secure authentication using Keycloak.", "media": [{"url": "https://res.cloudinary.com/dxhwhhakx/image/upload/v1745084768/interfolio/9f9d1d0d-205d-4329-be47-7780652484cc/lgzj7yd64y3zsexlk2vl.png", "type": "image", "caption": "", "isUpload": true}, {"url": "https://res.cloudinary.com/dxhwhhakx/image/upload/v1745084786/interfolio/9f9d1d0d-205d-4329-be47-7780652484cc/fylp80c3qsrryw7air0m.png", "type": "image", "caption": "", "isUpload": true}, {"url": "https://res.cloudinary.com/dxhwhhakx/image/upload/v1745084805/interfolio/9f9d1d0d-205d-4329-be47-7780652484cc/hdx3r1jrddk727wl8rgf.png", "type": "image", "caption": "", "isUpload": true}, {"url": "https://res.cloudinary.com/dxhwhhakx/image/upload/v1745084821/interfolio/9f9d1d0d-205d-4329-be47-7780652484cc/hvof0vjtpdkq47q5tkpi.png", "type": "image", "caption": "", "isUpload": true}, {"url": "https://res.cloudinary.com/dxhwhhakx/image/upload/v1745084876/interfolio/9f9d1d0d-205d-4329-be47-7780652484cc/winzyjw72vmkj3jpauqs.png", "type": "image", "caption": "", "isUpload": true}, {"url": "https://res.cloudinary.com/dxhwhhakx/image/upload/v1745084900/interfolio/9f9d1d0d-205d-4329-be47-7780652484cc/npkrqyx4ebvuayy0vaz9.png", "type": "image", "caption": "", "isUpload": true}], "title": "ACKO Clinic Ops Tool", "outcome": "The tool provides a unified dashboard for clinic operations, significantly improving team efficiency and response time. With its modular design, the same components can be reused in future verticals, reducing redundant work and enabling faster rollout of new features.\\n\\n", "tickets": [], "challenges": [{"tags": ["team", "time"], "approach": "We talked to Vish and idea was to push fast release of MVP version but we can still make it in house. We decided to work on each feature which curable provided and make a better version of it.", "obstacle": "Curable vs In-house: We were debating for long whether to use curable for ops dashboard vs making on our own.", "resolution": "I worked in crucial pieces like video call, prescription and tickets with guidance of my team mates to make all the features which curable was providing. We gave demo and curable was finally eliminated. ", "lessonsLearned": "Sometime we have to work in shadow and make world show that its doable. "}], "description": "The ACKO Clinic Ops Tool is a web-based internal dashboard designed to help operations and support teams manage various aspects of the digital clinic. Built to be modular and scalable, the tool supports ticket management, prescription handling, and video consultations with Picture-in-Picture (PiP) support. Each module is built generically, allowing it to be reused or adapted for future workflows across different verticals.", "timelineEnd": "2025-05-15", "pullRequests": [{"date": "2025-01-20", "link": "", "title": "Planned the features required for dashboard", "status": "Merged", "description": "Week 1:\\nGot involved in team planning for building the dashboard.\\nResearched various platforms like (JIRA, Asana, Linear, FreshDesk) for inspiration of dashboard.\\nPrepared a rough wireframe for all the required features.\\nDiscussed with team and finalized the required features and modules.\\n"}, {"date": "2025-01-27", "link": "https://github.com/ackotech/acko-clinic-ops-tool/commit/f649004009b7c5db1917987ac302d6e07a605f7c", "title": "Added Ticket module", "status": "Merged", "description": "Week 2:\\nWorked on adding ticket module\\nBuild the interface for list view of ticket and its detailed view (inspired from JIRA).\\nCarried out dashboard codebase sanity check."}, {"date": "2025-02-06", "link": "https://github.com/ackotech/acko-clinic-ops-tool/commit/47bb3f536dd9ad72f74fa5643aa2dfa810a1ae1e", "title": "Added Support modules and enhanced the ticket module ", "status": "Merged", "description": "Week 3:\\nWorked on adding support module for raising support ticket \\nWorked in adding filter and sort for tickets based on date and priority "}, {"date": "2025-02-12", "link": "", "title": "Code refractor and Module addition ", "status": "Merged", "description": "Week 4:\\nWorked on refactoring dashboard code base.\\nWorked on backend for integrating ticket apis\\nAdded calendar Module "}, {"date": "2025-02-27", "link": "", "title": "Added Toast for ticket update ", "status": "Merged", "description": "Week 5:\\nconnected with backend for fetching ticket.\\nAdded toast based notification for any ticket update.\\nFetch new ticket when clicked on toast"}, {"date": "2025-03-03", "link": "", "title": "UI refractor and code cleanup to make dashboard generic", "status": "Merged", "description": "Week 6:\\nUpdated existing ui according to new UI to fit best the generic use case.\\nAdded pane view for ticket to switch between list and detailed view.\\nUpdated navbar and sidebar for better view "}, {"date": "2025-03-20", "link": "https://github.com/ackotech/acko-clinic-ops-tool/commit/6619497be014eef35b989add6ed7b742576fce48", "title": "Search, filter and pagination for table view", "status": "Merged", "description": "Week 7:\\nThis week added search, filter and pagination as url param and used this to fetch api call in order to retain the applied search and filter.\\nCreated store to manage all the states.\\nMade the table view responsive for all screen size "}, {"date": "2025-03-24", "link": "https://github.com/ackotech/acko-clinic-ops-tool/commit/306eb09ef617d8bdc191acbc83057d3a3fedb0c7", "title": "Bug Fixes, Video and calendar modules", "status": "Merged", "description": "Week 8:\\nWorked in fixing bugs in tickets modules related to search and filter added source attribute to prevent multiple component sharing same search filter to avoid conflicts. \\nAdded Video module and Calendar module.\\nTested Video module with livekit"}, {"date": "2025-04-02", "link": "https://github.com/ackotech/acko-clinic-ops-tool/commit/8db834b4ac669d5c10bdfd315dfdc65016cd1ab3", "title": "Picture In Picture support for video", "status": "Merged", "description": "Week: 9\\nEnhanced UI to show Video, Details in tab view. (Easy for doctor to navigate through patient consultation journey. \\nEnhanced video call to support Picture In Picture which will enable doctors to move through prescription ,ticket  and video call without getting the call disconnected. \\n"}, {"date": "2025-04-08", "link": "", "title": "Prescription Module and Video call Bugs fix", "status": "Merged", "description": "Week 10: \\nWorked on creating prescription module that has a form like experience but better usability to quickly prescribe medicine and lab test.\\nFixed bug in video call audio issue."}, {"date": "2025-04-17", "link": "https://github.com/ackotech/acko-clinic-ops-tool/commit/5d017b6100420ef0496420b217770b44f1a77b23", "title": "Template service integration for prescription ", "status": "Merged", "description": "Week 11: \\nWorked on integrating prescription service with ACKO central Template service for PDF generation for prescription.\\nWorked with ginja writing code for pdf layout. \\nIntegrated prescription with backend to save and show in chat.\\n"}], "technologies": ["React Native", "Tailwind CSS", "Typescript", "Zustand", "LiveKit (media server)", "Keycloak (authentication)"], "timelineStart": "2025-01-20"}], "basicInfo": {"email": "ayushkumar1_int@acko.tech", "endDate": "2025-06-29", "summary": "My internship started with working on a chatbot — got to dive deep into LLMs, AI, and RAGs, understanding how things work under the hood. From there, I moved on to building a product from scratch that’s aimed at providing complete wellness and protection for a family. Got hands-on with both frontend and backend.", "fullName": "Ayush Kumar", "startDate": "2024-11-18", "teammates": [{"name": "Agastaya ", "role": "PM", "approved": false}, {"name": "Vijeta", "role": "PM", "approved": false}, {"name": "Madhurjya", "role": "SDE 3", "approved": false}, {"name": "Gowtham", "role": "SDE 3", "approved": false}, {"name": "Jhutan", "role": "SDE 3", "approved": false}, {"name": "Naman", "role": "Intern", "approved": false}], "managerName": "Gaurav Gupta", "internshipRole": "SDE Intern", "teamDepartment": "SWAT "}, "techStack": {"other": "", "tools": ["MongoDB", "PostgreSQL", "Docker", "TablePlus", "Postman", "Figma", "Notion", "Jira", "Confluence", "Git & GitHub"], "commits": "198", "features": "25", "languages": ["JavaScript", "TypeScript", "Node.js", "Express.js", "Java Spring Boot"], "frameworks": ["React Native", "Next.js", "React.js", "Tailwind CSS", "Zustand", "Expo"], "linesOfCode": 36210, "contributions": "6"}}	2025-04-13 18:09:53.928744+00	2025-04-20 09:07:47.341+00
\.


--
-- Data for Name: user_portfolios; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.user_portfolios (user_id, portfolio_id, is_published, created_at) FROM stdin;
9f9d1d0d-205d-4329-be47-7780652484cc	54abxofd	t	2025-04-13 20:20:03.218+00
\.


--
-- Data for Name: schema_migrations; Type: TABLE DATA; Schema: realtime; Owner: supabase_admin
--

COPY realtime.schema_migrations (version, inserted_at) FROM stdin;
20211116024918	2025-04-13 14:08:52
20211116045059	2025-04-13 14:08:52
20211116050929	2025-04-13 14:08:52
20211116051442	2025-04-13 14:08:52
20211116212300	2025-04-13 14:08:52
20211116213355	2025-04-13 14:08:52
20211116213934	2025-04-13 14:08:52
20211116214523	2025-04-13 14:08:52
20211122062447	2025-04-13 14:08:52
20211124070109	2025-04-13 14:08:52
20211202204204	2025-04-13 14:08:52
20211202204605	2025-04-13 14:08:52
20211210212804	2025-04-13 14:08:52
20211228014915	2025-04-13 14:08:52
20220107221237	2025-04-13 14:08:52
20220228202821	2025-04-13 14:08:52
20220312004840	2025-04-13 14:08:52
20220603231003	2025-04-13 14:08:52
20220603232444	2025-04-13 14:08:52
20220615214548	2025-04-13 14:08:52
20220712093339	2025-04-13 14:08:52
20220908172859	2025-04-13 14:08:52
20220916233421	2025-04-13 14:08:52
20230119133233	2025-04-13 14:08:52
20230128025114	2025-04-13 14:08:52
20230128025212	2025-04-13 14:08:52
20230227211149	2025-04-13 14:08:52
20230228184745	2025-04-13 14:08:52
20230308225145	2025-04-13 14:08:52
20230328144023	2025-04-13 14:08:52
20231018144023	2025-04-13 14:08:52
20231204144023	2025-04-13 14:08:52
20231204144024	2025-04-13 14:08:52
20231204144025	2025-04-13 14:08:52
20240108234812	2025-04-13 14:08:52
20240109165339	2025-04-13 14:08:52
20240227174441	2025-04-13 14:08:52
20240311171622	2025-04-13 14:08:52
20240321100241	2025-04-13 14:08:52
20240401105812	2025-04-13 14:08:52
20240418121054	2025-04-13 14:08:52
20240523004032	2025-04-13 14:08:52
20240618124746	2025-04-13 14:08:52
20240801235015	2025-04-13 14:08:52
20240805133720	2025-04-13 14:08:52
20240827160934	2025-04-13 14:08:52
20240919163303	2025-04-13 14:08:52
20240919163305	2025-04-13 14:08:52
20241019105805	2025-04-13 14:08:52
20241030150047	2025-04-13 14:08:53
20241108114728	2025-04-13 14:08:53
20241121104152	2025-04-13 14:08:53
20241130184212	2025-04-13 14:08:53
20241220035512	2025-04-13 14:08:53
20241220123912	2025-04-13 14:08:53
20241224161212	2025-04-13 14:08:53
20250107150512	2025-04-13 14:08:53
20250110162412	2025-04-13 14:08:53
20250123174212	2025-04-13 14:08:53
20250128220012	2025-04-13 14:08:53
20250506224012	2025-06-02 16:39:12
20250523164012	2025-06-02 16:39:12
\.


--
-- Data for Name: subscription; Type: TABLE DATA; Schema: realtime; Owner: supabase_admin
--

COPY realtime.subscription (id, subscription_id, entity, filters, claims, created_at) FROM stdin;
\.


--
-- Data for Name: buckets; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.buckets (id, name, owner, created_at, updated_at, public, avif_autodetection, file_size_limit, allowed_mime_types, owner_id) FROM stdin;
interfolio	interfolio	\N	2025-04-14 18:54:58.993531+00	2025-04-14 18:54:58.993531+00	t	f	\N	\N	\N
\.


--
-- Data for Name: migrations; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.migrations (id, name, hash, executed_at) FROM stdin;
0	create-migrations-table	e18db593bcde2aca2a408c4d1100f6abba2195df	2025-04-13 14:08:41.28181
1	initialmigration	6ab16121fbaa08bbd11b712d05f358f9b555d777	2025-04-13 14:08:41.287903
2	storage-schema	5c7968fd083fcea04050c1b7f6253c9771b99011	2025-04-13 14:08:41.292314
3	pathtoken-column	2cb1b0004b817b29d5b0a971af16bafeede4b70d	2025-04-13 14:08:41.315023
4	add-migrations-rls	427c5b63fe1c5937495d9c635c263ee7a5905058	2025-04-13 14:08:41.342296
5	add-size-functions	79e081a1455b63666c1294a440f8ad4b1e6a7f84	2025-04-13 14:08:41.347073
6	change-column-name-in-get-size	f93f62afdf6613ee5e7e815b30d02dc990201044	2025-04-13 14:08:41.352148
7	add-rls-to-buckets	e7e7f86adbc51049f341dfe8d30256c1abca17aa	2025-04-13 14:08:41.357006
8	add-public-to-buckets	fd670db39ed65f9d08b01db09d6202503ca2bab3	2025-04-13 14:08:41.361452
9	fix-search-function	3a0af29f42e35a4d101c259ed955b67e1bee6825	2025-04-13 14:08:41.36605
10	search-files-search-function	68dc14822daad0ffac3746a502234f486182ef6e	2025-04-13 14:08:41.371424
11	add-trigger-to-auto-update-updated_at-column	7425bdb14366d1739fa8a18c83100636d74dcaa2	2025-04-13 14:08:41.377488
12	add-automatic-avif-detection-flag	8e92e1266eb29518b6a4c5313ab8f29dd0d08df9	2025-04-13 14:08:41.386694
13	add-bucket-custom-limits	cce962054138135cd9a8c4bcd531598684b25e7d	2025-04-13 14:08:41.391472
14	use-bytes-for-max-size	941c41b346f9802b411f06f30e972ad4744dad27	2025-04-13 14:08:41.396444
15	add-can-insert-object-function	934146bc38ead475f4ef4b555c524ee5d66799e5	2025-04-13 14:08:41.42475
16	add-version	76debf38d3fd07dcfc747ca49096457d95b1221b	2025-04-13 14:08:41.430499
17	drop-owner-foreign-key	f1cbb288f1b7a4c1eb8c38504b80ae2a0153d101	2025-04-13 14:08:41.439413
18	add_owner_id_column_deprecate_owner	e7a511b379110b08e2f214be852c35414749fe66	2025-04-13 14:08:41.448972
19	alter-default-value-objects-id	02e5e22a78626187e00d173dc45f58fa66a4f043	2025-04-13 14:08:41.461847
20	list-objects-with-delimiter	cd694ae708e51ba82bf012bba00caf4f3b6393b7	2025-04-13 14:08:41.470456
21	s3-multipart-uploads	8c804d4a566c40cd1e4cc5b3725a664a9303657f	2025-04-13 14:08:41.481209
22	s3-multipart-uploads-big-ints	9737dc258d2397953c9953d9b86920b8be0cdb73	2025-04-13 14:08:41.513681
23	optimize-search-function	9d7e604cddc4b56a5422dc68c9313f4a1b6f132c	2025-04-13 14:08:41.539683
24	operation-function	8312e37c2bf9e76bbe841aa5fda889206d2bf8aa	2025-04-13 14:08:41.544695
25	custom-metadata	d974c6057c3db1c1f847afa0e291e6165693b990	2025-04-13 14:08:41.549664
\.


--
-- Data for Name: objects; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.objects (id, bucket_id, name, owner, created_at, updated_at, last_accessed_at, metadata, version, owner_id, user_metadata) FROM stdin;
\.


--
-- Data for Name: s3_multipart_uploads; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.s3_multipart_uploads (id, in_progress_size, upload_signature, bucket_id, key, version, owner_id, created_at, user_metadata) FROM stdin;
\.


--
-- Data for Name: s3_multipart_uploads_parts; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.s3_multipart_uploads_parts (id, upload_id, size, part_number, bucket_id, key, etag, owner_id, version, created_at) FROM stdin;
\.


--
-- Data for Name: secrets; Type: TABLE DATA; Schema: vault; Owner: supabase_admin
--

COPY vault.secrets (id, name, description, secret, key_id, nonce, created_at, updated_at) FROM stdin;
\.


--
-- Name: refresh_tokens_id_seq; Type: SEQUENCE SET; Schema: auth; Owner: supabase_auth_admin
--

SELECT pg_catalog.setval('auth.refresh_tokens_id_seq', 102, true);


--
-- Name: subscription_id_seq; Type: SEQUENCE SET; Schema: realtime; Owner: supabase_admin
--

SELECT pg_catalog.setval('realtime.subscription_id_seq', 1, false);


--
-- Name: mfa_amr_claims amr_id_pk; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_amr_claims
    ADD CONSTRAINT amr_id_pk PRIMARY KEY (id);


--
-- Name: audit_log_entries audit_log_entries_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.audit_log_entries
    ADD CONSTRAINT audit_log_entries_pkey PRIMARY KEY (id);


--
-- Name: flow_state flow_state_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.flow_state
    ADD CONSTRAINT flow_state_pkey PRIMARY KEY (id);


--
-- Name: identities identities_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.identities
    ADD CONSTRAINT identities_pkey PRIMARY KEY (id);


--
-- Name: identities identities_provider_id_provider_unique; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.identities
    ADD CONSTRAINT identities_provider_id_provider_unique UNIQUE (provider_id, provider);


--
-- Name: instances instances_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.instances
    ADD CONSTRAINT instances_pkey PRIMARY KEY (id);


--
-- Name: mfa_amr_claims mfa_amr_claims_session_id_authentication_method_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_amr_claims
    ADD CONSTRAINT mfa_amr_claims_session_id_authentication_method_pkey UNIQUE (session_id, authentication_method);


--
-- Name: mfa_challenges mfa_challenges_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_challenges
    ADD CONSTRAINT mfa_challenges_pkey PRIMARY KEY (id);


--
-- Name: mfa_factors mfa_factors_last_challenged_at_key; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_factors
    ADD CONSTRAINT mfa_factors_last_challenged_at_key UNIQUE (last_challenged_at);


--
-- Name: mfa_factors mfa_factors_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_factors
    ADD CONSTRAINT mfa_factors_pkey PRIMARY KEY (id);


--
-- Name: one_time_tokens one_time_tokens_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.one_time_tokens
    ADD CONSTRAINT one_time_tokens_pkey PRIMARY KEY (id);


--
-- Name: refresh_tokens refresh_tokens_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.refresh_tokens
    ADD CONSTRAINT refresh_tokens_pkey PRIMARY KEY (id);


--
-- Name: refresh_tokens refresh_tokens_token_unique; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.refresh_tokens
    ADD CONSTRAINT refresh_tokens_token_unique UNIQUE (token);


--
-- Name: saml_providers saml_providers_entity_id_key; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_providers
    ADD CONSTRAINT saml_providers_entity_id_key UNIQUE (entity_id);


--
-- Name: saml_providers saml_providers_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_providers
    ADD CONSTRAINT saml_providers_pkey PRIMARY KEY (id);


--
-- Name: saml_relay_states saml_relay_states_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_relay_states
    ADD CONSTRAINT saml_relay_states_pkey PRIMARY KEY (id);


--
-- Name: schema_migrations schema_migrations_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.schema_migrations
    ADD CONSTRAINT schema_migrations_pkey PRIMARY KEY (version);


--
-- Name: sessions sessions_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.sessions
    ADD CONSTRAINT sessions_pkey PRIMARY KEY (id);


--
-- Name: sso_domains sso_domains_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.sso_domains
    ADD CONSTRAINT sso_domains_pkey PRIMARY KEY (id);


--
-- Name: sso_providers sso_providers_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.sso_providers
    ADD CONSTRAINT sso_providers_pkey PRIMARY KEY (id);


--
-- Name: users users_phone_key; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.users
    ADD CONSTRAINT users_phone_key UNIQUE (phone);


--
-- Name: users users_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.users
    ADD CONSTRAINT users_pkey PRIMARY KEY (id);


--
-- Name: intern_forms intern_forms_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.intern_forms
    ADD CONSTRAINT intern_forms_pkey PRIMARY KEY (id);


--
-- Name: intern_forms intern_forms_user_id_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.intern_forms
    ADD CONSTRAINT intern_forms_user_id_key UNIQUE (user_id);


--
-- Name: user_portfolios user_portfolios_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_portfolios
    ADD CONSTRAINT user_portfolios_pkey PRIMARY KEY (user_id);


--
-- Name: user_portfolios user_portfolios_portfolio_id_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_portfolios
    ADD CONSTRAINT user_portfolios_portfolio_id_key UNIQUE (portfolio_id);


--
-- Name: messages messages_pkey; Type: CONSTRAINT; Schema: realtime; Owner: supabase_realtime_admin
--

ALTER TABLE ONLY realtime.messages
    ADD CONSTRAINT messages_pkey PRIMARY KEY (id, inserted_at);


--
-- Name: subscription pk_subscription; Type: CONSTRAINT; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.subscription
    ADD CONSTRAINT pk_subscription PRIMARY KEY (id);


--
-- Name: schema_migrations schema_migrations_pkey; Type: CONSTRAINT; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.schema_migrations
    ADD CONSTRAINT schema_migrations_pkey PRIMARY KEY (version);


--
-- Name: buckets buckets_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.buckets
    ADD CONSTRAINT buckets_pkey PRIMARY KEY (id);


--
-- Name: migrations migrations_name_key; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.migrations
    ADD CONSTRAINT migrations_name_key UNIQUE (name);


--
-- Name: migrations migrations_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.migrations
    ADD CONSTRAINT migrations_pkey PRIMARY KEY (id);


--
-- Name: objects objects_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.objects
    ADD CONSTRAINT objects_pkey PRIMARY KEY (id);


--
-- Name: s3_multipart_uploads_parts s3_multipart_uploads_parts_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.s3_multipart_uploads_parts
    ADD CONSTRAINT s3_multipart_uploads_parts_pkey PRIMARY KEY (id);


--
-- Name: s3_multipart_uploads s3_multipart_uploads_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.s3_multipart_uploads
    ADD CONSTRAINT s3_multipart_uploads_pkey PRIMARY KEY (id);


--
-- Name: audit_logs_instance_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX audit_logs_instance_id_idx ON auth.audit_log_entries USING btree (instance_id);


--
-- Name: confirmation_token_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX confirmation_token_idx ON auth.users USING btree (confirmation_token) WHERE ((confirmation_token)::text !~ '^[0-9 ]*$'::text);


--
-- Name: email_change_token_current_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX email_change_token_current_idx ON auth.users USING btree (email_change_token_current) WHERE ((email_change_token_current)::text !~ '^[0-9 ]*$'::text);


--
-- Name: email_change_token_new_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX email_change_token_new_idx ON auth.users USING btree (email_change_token_new) WHERE ((email_change_token_new)::text !~ '^[0-9 ]*$'::text);


--
-- Name: factor_id_created_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX factor_id_created_at_idx ON auth.mfa_factors USING btree (user_id, created_at);


--
-- Name: flow_state_created_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX flow_state_created_at_idx ON auth.flow_state USING btree (created_at DESC);


--
-- Name: identities_email_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX identities_email_idx ON auth.identities USING btree (email text_pattern_ops);


--
-- Name: INDEX identities_email_idx; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON INDEX auth.identities_email_idx IS 'Auth: Ensures indexed queries on the email column';


--
-- Name: identities_user_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX identities_user_id_idx ON auth.identities USING btree (user_id);


--
-- Name: idx_auth_code; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX idx_auth_code ON auth.flow_state USING btree (auth_code);


--
-- Name: idx_user_id_auth_method; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX idx_user_id_auth_method ON auth.flow_state USING btree (user_id, authentication_method);


--
-- Name: mfa_challenge_created_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX mfa_challenge_created_at_idx ON auth.mfa_challenges USING btree (created_at DESC);


--
-- Name: mfa_factors_user_friendly_name_unique; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX mfa_factors_user_friendly_name_unique ON auth.mfa_factors USING btree (friendly_name, user_id) WHERE (TRIM(BOTH FROM friendly_name) <> ''::text);


--
-- Name: mfa_factors_user_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX mfa_factors_user_id_idx ON auth.mfa_factors USING btree (user_id);


--
-- Name: one_time_tokens_relates_to_hash_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX one_time_tokens_relates_to_hash_idx ON auth.one_time_tokens USING hash (relates_to);


--
-- Name: one_time_tokens_token_hash_hash_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX one_time_tokens_token_hash_hash_idx ON auth.one_time_tokens USING hash (token_hash);


--
-- Name: one_time_tokens_user_id_token_type_key; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX one_time_tokens_user_id_token_type_key ON auth.one_time_tokens USING btree (user_id, token_type);


--
-- Name: reauthentication_token_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX reauthentication_token_idx ON auth.users USING btree (reauthentication_token) WHERE ((reauthentication_token)::text !~ '^[0-9 ]*$'::text);


--
-- Name: recovery_token_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX recovery_token_idx ON auth.users USING btree (recovery_token) WHERE ((recovery_token)::text !~ '^[0-9 ]*$'::text);


--
-- Name: refresh_tokens_instance_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_instance_id_idx ON auth.refresh_tokens USING btree (instance_id);


--
-- Name: refresh_tokens_instance_id_user_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_instance_id_user_id_idx ON auth.refresh_tokens USING btree (instance_id, user_id);


--
-- Name: refresh_tokens_parent_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_parent_idx ON auth.refresh_tokens USING btree (parent);


--
-- Name: refresh_tokens_session_id_revoked_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_session_id_revoked_idx ON auth.refresh_tokens USING btree (session_id, revoked);


--
-- Name: refresh_tokens_updated_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_updated_at_idx ON auth.refresh_tokens USING btree (updated_at DESC);


--
-- Name: saml_providers_sso_provider_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX saml_providers_sso_provider_id_idx ON auth.saml_providers USING btree (sso_provider_id);


--
-- Name: saml_relay_states_created_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX saml_relay_states_created_at_idx ON auth.saml_relay_states USING btree (created_at DESC);


--
-- Name: saml_relay_states_for_email_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX saml_relay_states_for_email_idx ON auth.saml_relay_states USING btree (for_email);


--
-- Name: saml_relay_states_sso_provider_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX saml_relay_states_sso_provider_id_idx ON auth.saml_relay_states USING btree (sso_provider_id);


--
-- Name: sessions_not_after_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX sessions_not_after_idx ON auth.sessions USING btree (not_after DESC);


--
-- Name: sessions_user_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX sessions_user_id_idx ON auth.sessions USING btree (user_id);


--
-- Name: sso_domains_domain_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX sso_domains_domain_idx ON auth.sso_domains USING btree (lower(domain));


--
-- Name: sso_domains_sso_provider_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX sso_domains_sso_provider_id_idx ON auth.sso_domains USING btree (sso_provider_id);


--
-- Name: sso_providers_resource_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX sso_providers_resource_id_idx ON auth.sso_providers USING btree (lower(resource_id));


--
-- Name: unique_phone_factor_per_user; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX unique_phone_factor_per_user ON auth.mfa_factors USING btree (user_id, phone);


--
-- Name: user_id_created_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX user_id_created_at_idx ON auth.sessions USING btree (user_id, created_at);


--
-- Name: users_email_partial_key; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX users_email_partial_key ON auth.users USING btree (email) WHERE (is_sso_user = false);


--
-- Name: INDEX users_email_partial_key; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON INDEX auth.users_email_partial_key IS 'Auth: A partial unique index that applies only when is_sso_user is false';


--
-- Name: users_instance_id_email_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX users_instance_id_email_idx ON auth.users USING btree (instance_id, lower((email)::text));


--
-- Name: users_instance_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX users_instance_id_idx ON auth.users USING btree (instance_id);


--
-- Name: users_is_anonymous_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX users_is_anonymous_idx ON auth.users USING btree (is_anonymous);


--
-- Name: idx_portfolio_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_portfolio_id ON public.user_portfolios USING btree (portfolio_id);


--
-- Name: ix_realtime_subscription_entity; Type: INDEX; Schema: realtime; Owner: supabase_admin
--

CREATE INDEX ix_realtime_subscription_entity ON realtime.subscription USING btree (entity);


--
-- Name: subscription_subscription_id_entity_filters_key; Type: INDEX; Schema: realtime; Owner: supabase_admin
--

CREATE UNIQUE INDEX subscription_subscription_id_entity_filters_key ON realtime.subscription USING btree (subscription_id, entity, filters);


--
-- Name: bname; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE UNIQUE INDEX bname ON storage.buckets USING btree (name);


--
-- Name: bucketid_objname; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE UNIQUE INDEX bucketid_objname ON storage.objects USING btree (bucket_id, name);


--
-- Name: idx_multipart_uploads_list; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE INDEX idx_multipart_uploads_list ON storage.s3_multipart_uploads USING btree (bucket_id, key, created_at);


--
-- Name: idx_objects_bucket_id_name; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE INDEX idx_objects_bucket_id_name ON storage.objects USING btree (bucket_id, name COLLATE "C");


--
-- Name: name_prefix_search; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE INDEX name_prefix_search ON storage.objects USING btree (name text_pattern_ops);


--
-- Name: subscription tr_check_filters; Type: TRIGGER; Schema: realtime; Owner: supabase_admin
--

CREATE TRIGGER tr_check_filters BEFORE INSERT OR UPDATE ON realtime.subscription FOR EACH ROW EXECUTE FUNCTION realtime.subscription_check_filters();


--
-- Name: objects update_objects_updated_at; Type: TRIGGER; Schema: storage; Owner: supabase_storage_admin
--

CREATE TRIGGER update_objects_updated_at BEFORE UPDATE ON storage.objects FOR EACH ROW EXECUTE FUNCTION storage.update_updated_at_column();


--
-- Name: identities identities_user_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.identities
    ADD CONSTRAINT identities_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: mfa_amr_claims mfa_amr_claims_session_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_amr_claims
    ADD CONSTRAINT mfa_amr_claims_session_id_fkey FOREIGN KEY (session_id) REFERENCES auth.sessions(id) ON DELETE CASCADE;


--
-- Name: mfa_challenges mfa_challenges_auth_factor_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_challenges
    ADD CONSTRAINT mfa_challenges_auth_factor_id_fkey FOREIGN KEY (factor_id) REFERENCES auth.mfa_factors(id) ON DELETE CASCADE;


--
-- Name: mfa_factors mfa_factors_user_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_factors
    ADD CONSTRAINT mfa_factors_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: one_time_tokens one_time_tokens_user_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.one_time_tokens
    ADD CONSTRAINT one_time_tokens_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: refresh_tokens refresh_tokens_session_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.refresh_tokens
    ADD CONSTRAINT refresh_tokens_session_id_fkey FOREIGN KEY (session_id) REFERENCES auth.sessions(id) ON DELETE CASCADE;


--
-- Name: saml_providers saml_providers_sso_provider_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_providers
    ADD CONSTRAINT saml_providers_sso_provider_id_fkey FOREIGN KEY (sso_provider_id) REFERENCES auth.sso_providers(id) ON DELETE CASCADE;


--
-- Name: saml_relay_states saml_relay_states_flow_state_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_relay_states
    ADD CONSTRAINT saml_relay_states_flow_state_id_fkey FOREIGN KEY (flow_state_id) REFERENCES auth.flow_state(id) ON DELETE CASCADE;


--
-- Name: saml_relay_states saml_relay_states_sso_provider_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_relay_states
    ADD CONSTRAINT saml_relay_states_sso_provider_id_fkey FOREIGN KEY (sso_provider_id) REFERENCES auth.sso_providers(id) ON DELETE CASCADE;


--
-- Name: sessions sessions_user_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.sessions
    ADD CONSTRAINT sessions_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: sso_domains sso_domains_sso_provider_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.sso_domains
    ADD CONSTRAINT sso_domains_sso_provider_id_fkey FOREIGN KEY (sso_provider_id) REFERENCES auth.sso_providers(id) ON DELETE CASCADE;


--
-- Name: intern_forms intern_forms_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.intern_forms
    ADD CONSTRAINT intern_forms_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: user_portfolios user_portfolios_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_portfolios
    ADD CONSTRAINT user_portfolios_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: objects objects_bucketId_fkey; Type: FK CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.objects
    ADD CONSTRAINT "objects_bucketId_fkey" FOREIGN KEY (bucket_id) REFERENCES storage.buckets(id);


--
-- Name: s3_multipart_uploads s3_multipart_uploads_bucket_id_fkey; Type: FK CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.s3_multipart_uploads
    ADD CONSTRAINT s3_multipart_uploads_bucket_id_fkey FOREIGN KEY (bucket_id) REFERENCES storage.buckets(id);


--
-- Name: s3_multipart_uploads_parts s3_multipart_uploads_parts_bucket_id_fkey; Type: FK CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.s3_multipart_uploads_parts
    ADD CONSTRAINT s3_multipart_uploads_parts_bucket_id_fkey FOREIGN KEY (bucket_id) REFERENCES storage.buckets(id);


--
-- Name: s3_multipart_uploads_parts s3_multipart_uploads_parts_upload_id_fkey; Type: FK CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.s3_multipart_uploads_parts
    ADD CONSTRAINT s3_multipart_uploads_parts_upload_id_fkey FOREIGN KEY (upload_id) REFERENCES storage.s3_multipart_uploads(id) ON DELETE CASCADE;


--
-- Name: audit_log_entries; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.audit_log_entries ENABLE ROW LEVEL SECURITY;

--
-- Name: flow_state; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.flow_state ENABLE ROW LEVEL SECURITY;

--
-- Name: identities; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.identities ENABLE ROW LEVEL SECURITY;

--
-- Name: instances; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.instances ENABLE ROW LEVEL SECURITY;

--
-- Name: mfa_amr_claims; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.mfa_amr_claims ENABLE ROW LEVEL SECURITY;

--
-- Name: mfa_challenges; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.mfa_challenges ENABLE ROW LEVEL SECURITY;

--
-- Name: mfa_factors; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.mfa_factors ENABLE ROW LEVEL SECURITY;

--
-- Name: one_time_tokens; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.one_time_tokens ENABLE ROW LEVEL SECURITY;

--
-- Name: refresh_tokens; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.refresh_tokens ENABLE ROW LEVEL SECURITY;

--
-- Name: saml_providers; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.saml_providers ENABLE ROW LEVEL SECURITY;

--
-- Name: saml_relay_states; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.saml_relay_states ENABLE ROW LEVEL SECURITY;

--
-- Name: schema_migrations; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.schema_migrations ENABLE ROW LEVEL SECURITY;

--
-- Name: sessions; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.sessions ENABLE ROW LEVEL SECURITY;

--
-- Name: sso_domains; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.sso_domains ENABLE ROW LEVEL SECURITY;

--
-- Name: sso_providers; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.sso_providers ENABLE ROW LEVEL SECURITY;

--
-- Name: users; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.users ENABLE ROW LEVEL SECURITY;

--
-- Name: intern_forms Allow public access to form data of published portfolios; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Allow public access to form data of published portfolios" ON public.intern_forms FOR SELECT USING ((user_id IN ( SELECT user_portfolios.user_id
   FROM public.user_portfolios
  WHERE (user_portfolios.is_published = true))));


--
-- Name: user_portfolios Allow public access to published portfolios; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Allow public access to published portfolios" ON public.user_portfolios FOR SELECT USING ((is_published = true));


--
-- Name: user_portfolios Anyone can read published portfolios; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Anyone can read published portfolios" ON public.user_portfolios FOR SELECT USING ((is_published = true));


--
-- Name: intern_forms Users can insert their own form data; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can insert their own form data" ON public.intern_forms FOR INSERT WITH CHECK ((auth.uid() = user_id));


--
-- Name: user_portfolios Users can manage their own portfolio; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can manage their own portfolio" ON public.user_portfolios USING ((auth.uid() = user_id));


--
-- Name: intern_forms Users can read their own form data; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can read their own form data" ON public.intern_forms FOR SELECT USING ((auth.uid() = user_id));


--
-- Name: intern_forms Users can update their own form data; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can update their own form data" ON public.intern_forms FOR UPDATE USING ((auth.uid() = user_id));


--
-- Name: intern_forms; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.intern_forms ENABLE ROW LEVEL SECURITY;

--
-- Name: user_portfolios; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.user_portfolios ENABLE ROW LEVEL SECURITY;

--
-- Name: messages; Type: ROW SECURITY; Schema: realtime; Owner: supabase_realtime_admin
--

ALTER TABLE realtime.messages ENABLE ROW LEVEL SECURITY;

--
-- Name: objects Enable read access for all users; Type: POLICY; Schema: storage; Owner: supabase_storage_admin
--

CREATE POLICY "Enable read access for all users" ON storage.objects FOR SELECT USING (true);


--
-- Name: objects Give anon users access to JPG images in folder 18lmxu5_0; Type: POLICY; Schema: storage; Owner: supabase_storage_admin
--

CREATE POLICY "Give anon users access to JPG images in folder 18lmxu5_0" ON storage.objects FOR SELECT USING (((bucket_id = 'interfolio'::text) AND (storage.extension(name) = 'jpg'::text) AND (lower((storage.foldername(name))[1]) = 'public'::text) AND (auth.role() = 'anon'::text)));


--
-- Name: objects Give anon users access to JPG images in folder 18lmxu5_1; Type: POLICY; Schema: storage; Owner: supabase_storage_admin
--

CREATE POLICY "Give anon users access to JPG images in folder 18lmxu5_1" ON storage.objects FOR INSERT WITH CHECK (((bucket_id = 'interfolio'::text) AND (storage.extension(name) = 'jpg'::text) AND (lower((storage.foldername(name))[1]) = 'public'::text) AND (auth.role() = 'anon'::text)));


--
-- Name: objects Give anon users access to JPG images in folder 18lmxu5_2; Type: POLICY; Schema: storage; Owner: supabase_storage_admin
--

CREATE POLICY "Give anon users access to JPG images in folder 18lmxu5_2" ON storage.objects FOR UPDATE USING (((bucket_id = 'interfolio'::text) AND (storage.extension(name) = 'jpg'::text) AND (lower((storage.foldername(name))[1]) = 'public'::text) AND (auth.role() = 'anon'::text)));


--
-- Name: objects Give anon users access to JPG images in folder 18lmxu5_3; Type: POLICY; Schema: storage; Owner: supabase_storage_admin
--

CREATE POLICY "Give anon users access to JPG images in folder 18lmxu5_3" ON storage.objects FOR DELETE USING (((bucket_id = 'interfolio'::text) AND (storage.extension(name) = 'jpg'::text) AND (lower((storage.foldername(name))[1]) = 'public'::text) AND (auth.role() = 'anon'::text)));


--
-- Name: buckets; Type: ROW SECURITY; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE storage.buckets ENABLE ROW LEVEL SECURITY;

--
-- Name: migrations; Type: ROW SECURITY; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE storage.migrations ENABLE ROW LEVEL SECURITY;

--
-- Name: objects; Type: ROW SECURITY; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE storage.objects ENABLE ROW LEVEL SECURITY;

--
-- Name: s3_multipart_uploads; Type: ROW SECURITY; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE storage.s3_multipart_uploads ENABLE ROW LEVEL SECURITY;

--
-- Name: s3_multipart_uploads_parts; Type: ROW SECURITY; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE storage.s3_multipart_uploads_parts ENABLE ROW LEVEL SECURITY;

--
-- Name: supabase_realtime; Type: PUBLICATION; Schema: -; Owner: postgres
--

CREATE PUBLICATION supabase_realtime WITH (publish = 'insert, update, delete, truncate');


ALTER PUBLICATION supabase_realtime OWNER TO postgres;

--
-- Name: SCHEMA auth; Type: ACL; Schema: -; Owner: supabase_admin
--

GRANT USAGE ON SCHEMA auth TO anon;
GRANT USAGE ON SCHEMA auth TO authenticated;
GRANT USAGE ON SCHEMA auth TO service_role;
GRANT ALL ON SCHEMA auth TO supabase_auth_admin;
GRANT ALL ON SCHEMA auth TO dashboard_user;
GRANT USAGE ON SCHEMA auth TO postgres;


--
-- Name: SCHEMA extensions; Type: ACL; Schema: -; Owner: postgres
--

GRANT USAGE ON SCHEMA extensions TO anon;
GRANT USAGE ON SCHEMA extensions TO authenticated;
GRANT USAGE ON SCHEMA extensions TO service_role;
GRANT ALL ON SCHEMA extensions TO dashboard_user;


--
-- Name: SCHEMA public; Type: ACL; Schema: -; Owner: pg_database_owner
--

GRANT USAGE ON SCHEMA public TO postgres;
GRANT USAGE ON SCHEMA public TO anon;
GRANT USAGE ON SCHEMA public TO authenticated;
GRANT USAGE ON SCHEMA public TO service_role;


--
-- Name: SCHEMA realtime; Type: ACL; Schema: -; Owner: supabase_admin
--

GRANT USAGE ON SCHEMA realtime TO postgres;
GRANT USAGE ON SCHEMA realtime TO anon;
GRANT USAGE ON SCHEMA realtime TO authenticated;
GRANT USAGE ON SCHEMA realtime TO service_role;
GRANT ALL ON SCHEMA realtime TO supabase_realtime_admin;


--
-- Name: SCHEMA storage; Type: ACL; Schema: -; Owner: supabase_admin
--

GRANT USAGE ON SCHEMA storage TO postgres;
GRANT USAGE ON SCHEMA storage TO anon;
GRANT USAGE ON SCHEMA storage TO authenticated;
GRANT USAGE ON SCHEMA storage TO service_role;
GRANT ALL ON SCHEMA storage TO supabase_storage_admin;
GRANT ALL ON SCHEMA storage TO dashboard_user;


--
-- Name: SCHEMA vault; Type: ACL; Schema: -; Owner: supabase_admin
--

GRANT USAGE ON SCHEMA vault TO postgres WITH GRANT OPTION;
GRANT USAGE ON SCHEMA vault TO service_role;


--
-- Name: FUNCTION email(); Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON FUNCTION auth.email() TO dashboard_user;
GRANT ALL ON FUNCTION auth.email() TO postgres;


--
-- Name: FUNCTION jwt(); Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON FUNCTION auth.jwt() TO postgres;
GRANT ALL ON FUNCTION auth.jwt() TO dashboard_user;


--
-- Name: FUNCTION role(); Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON FUNCTION auth.role() TO dashboard_user;
GRANT ALL ON FUNCTION auth.role() TO postgres;


--
-- Name: FUNCTION uid(); Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON FUNCTION auth.uid() TO dashboard_user;
GRANT ALL ON FUNCTION auth.uid() TO postgres;


--
-- Name: FUNCTION algorithm_sign(signables text, secret text, algorithm text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.algorithm_sign(signables text, secret text, algorithm text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.algorithm_sign(signables text, secret text, algorithm text) TO dashboard_user;


--
-- Name: FUNCTION armor(bytea); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.armor(bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.armor(bytea) TO dashboard_user;


--
-- Name: FUNCTION armor(bytea, text[], text[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.armor(bytea, text[], text[]) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.armor(bytea, text[], text[]) TO dashboard_user;


--
-- Name: FUNCTION crypt(text, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.crypt(text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.crypt(text, text) TO dashboard_user;


--
-- Name: FUNCTION dearmor(text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.dearmor(text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.dearmor(text) TO dashboard_user;


--
-- Name: FUNCTION decrypt(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.decrypt(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.decrypt(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION decrypt_iv(bytea, bytea, bytea, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.decrypt_iv(bytea, bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.decrypt_iv(bytea, bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION digest(bytea, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.digest(bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.digest(bytea, text) TO dashboard_user;


--
-- Name: FUNCTION digest(text, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.digest(text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.digest(text, text) TO dashboard_user;


--
-- Name: FUNCTION encrypt(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.encrypt(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.encrypt(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION encrypt_iv(bytea, bytea, bytea, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.encrypt_iv(bytea, bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.encrypt_iv(bytea, bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION gen_random_bytes(integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.gen_random_bytes(integer) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.gen_random_bytes(integer) TO dashboard_user;


--
-- Name: FUNCTION gen_random_uuid(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.gen_random_uuid() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.gen_random_uuid() TO dashboard_user;


--
-- Name: FUNCTION gen_salt(text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.gen_salt(text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.gen_salt(text) TO dashboard_user;


--
-- Name: FUNCTION gen_salt(text, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.gen_salt(text, integer) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.gen_salt(text, integer) TO dashboard_user;


--
-- Name: FUNCTION grant_pg_cron_access(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

REVOKE ALL ON FUNCTION extensions.grant_pg_cron_access() FROM supabase_admin;
GRANT ALL ON FUNCTION extensions.grant_pg_cron_access() TO supabase_admin WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.grant_pg_cron_access() TO dashboard_user;
GRANT ALL ON FUNCTION extensions.grant_pg_cron_access() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION grant_pg_graphql_access(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.grant_pg_graphql_access() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION grant_pg_net_access(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

REVOKE ALL ON FUNCTION extensions.grant_pg_net_access() FROM supabase_admin;
GRANT ALL ON FUNCTION extensions.grant_pg_net_access() TO supabase_admin WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.grant_pg_net_access() TO dashboard_user;
GRANT ALL ON FUNCTION extensions.grant_pg_net_access() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION hmac(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.hmac(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.hmac(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION hmac(text, text, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.hmac(text, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.hmac(text, text, text) TO dashboard_user;


--
-- Name: FUNCTION pg_stat_statements(showtext boolean, OUT userid oid, OUT dbid oid, OUT toplevel boolean, OUT queryid bigint, OUT query text, OUT plans bigint, OUT total_plan_time double precision, OUT min_plan_time double precision, OUT max_plan_time double precision, OUT mean_plan_time double precision, OUT stddev_plan_time double precision, OUT calls bigint, OUT total_exec_time double precision, OUT min_exec_time double precision, OUT max_exec_time double precision, OUT mean_exec_time double precision, OUT stddev_exec_time double precision, OUT rows bigint, OUT shared_blks_hit bigint, OUT shared_blks_read bigint, OUT shared_blks_dirtied bigint, OUT shared_blks_written bigint, OUT local_blks_hit bigint, OUT local_blks_read bigint, OUT local_blks_dirtied bigint, OUT local_blks_written bigint, OUT temp_blks_read bigint, OUT temp_blks_written bigint, OUT blk_read_time double precision, OUT blk_write_time double precision, OUT temp_blk_read_time double precision, OUT temp_blk_write_time double precision, OUT wal_records bigint, OUT wal_fpi bigint, OUT wal_bytes numeric, OUT jit_functions bigint, OUT jit_generation_time double precision, OUT jit_inlining_count bigint, OUT jit_inlining_time double precision, OUT jit_optimization_count bigint, OUT jit_optimization_time double precision, OUT jit_emission_count bigint, OUT jit_emission_time double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pg_stat_statements(showtext boolean, OUT userid oid, OUT dbid oid, OUT toplevel boolean, OUT queryid bigint, OUT query text, OUT plans bigint, OUT total_plan_time double precision, OUT min_plan_time double precision, OUT max_plan_time double precision, OUT mean_plan_time double precision, OUT stddev_plan_time double precision, OUT calls bigint, OUT total_exec_time double precision, OUT min_exec_time double precision, OUT max_exec_time double precision, OUT mean_exec_time double precision, OUT stddev_exec_time double precision, OUT rows bigint, OUT shared_blks_hit bigint, OUT shared_blks_read bigint, OUT shared_blks_dirtied bigint, OUT shared_blks_written bigint, OUT local_blks_hit bigint, OUT local_blks_read bigint, OUT local_blks_dirtied bigint, OUT local_blks_written bigint, OUT temp_blks_read bigint, OUT temp_blks_written bigint, OUT blk_read_time double precision, OUT blk_write_time double precision, OUT temp_blk_read_time double precision, OUT temp_blk_write_time double precision, OUT wal_records bigint, OUT wal_fpi bigint, OUT wal_bytes numeric, OUT jit_functions bigint, OUT jit_generation_time double precision, OUT jit_inlining_count bigint, OUT jit_inlining_time double precision, OUT jit_optimization_count bigint, OUT jit_optimization_time double precision, OUT jit_emission_count bigint, OUT jit_emission_time double precision) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pg_stat_statements(showtext boolean, OUT userid oid, OUT dbid oid, OUT toplevel boolean, OUT queryid bigint, OUT query text, OUT plans bigint, OUT total_plan_time double precision, OUT min_plan_time double precision, OUT max_plan_time double precision, OUT mean_plan_time double precision, OUT stddev_plan_time double precision, OUT calls bigint, OUT total_exec_time double precision, OUT min_exec_time double precision, OUT max_exec_time double precision, OUT mean_exec_time double precision, OUT stddev_exec_time double precision, OUT rows bigint, OUT shared_blks_hit bigint, OUT shared_blks_read bigint, OUT shared_blks_dirtied bigint, OUT shared_blks_written bigint, OUT local_blks_hit bigint, OUT local_blks_read bigint, OUT local_blks_dirtied bigint, OUT local_blks_written bigint, OUT temp_blks_read bigint, OUT temp_blks_written bigint, OUT blk_read_time double precision, OUT blk_write_time double precision, OUT temp_blk_read_time double precision, OUT temp_blk_write_time double precision, OUT wal_records bigint, OUT wal_fpi bigint, OUT wal_bytes numeric, OUT jit_functions bigint, OUT jit_generation_time double precision, OUT jit_inlining_count bigint, OUT jit_inlining_time double precision, OUT jit_optimization_count bigint, OUT jit_optimization_time double precision, OUT jit_emission_count bigint, OUT jit_emission_time double precision) TO dashboard_user;


--
-- Name: FUNCTION pg_stat_statements_info(OUT dealloc bigint, OUT stats_reset timestamp with time zone); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pg_stat_statements_info(OUT dealloc bigint, OUT stats_reset timestamp with time zone) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pg_stat_statements_info(OUT dealloc bigint, OUT stats_reset timestamp with time zone) TO dashboard_user;


--
-- Name: FUNCTION pg_stat_statements_reset(userid oid, dbid oid, queryid bigint); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pg_stat_statements_reset(userid oid, dbid oid, queryid bigint) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pg_stat_statements_reset(userid oid, dbid oid, queryid bigint) TO dashboard_user;


--
-- Name: FUNCTION pgp_armor_headers(text, OUT key text, OUT value text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_armor_headers(text, OUT key text, OUT value text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_armor_headers(text, OUT key text, OUT value text) TO dashboard_user;


--
-- Name: FUNCTION pgp_key_id(bytea); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_key_id(bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_key_id(bytea) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt(bytea, bytea); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt(bytea, bytea, text, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt_bytea(bytea, bytea); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt_bytea(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt_bytea(bytea, bytea, text, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_encrypt(text, bytea); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_encrypt(text, bytea, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_encrypt_bytea(bytea, bytea); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_encrypt_bytea(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_decrypt(bytea, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_decrypt(bytea, text, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_decrypt_bytea(bytea, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_decrypt_bytea(bytea, text, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_encrypt(text, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_encrypt(text, text, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_encrypt_bytea(bytea, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_encrypt_bytea(bytea, text, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgrst_ddl_watch(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgrst_ddl_watch() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION pgrst_drop_watch(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgrst_drop_watch() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION set_graphql_placeholder(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.set_graphql_placeholder() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION sign(payload json, secret text, algorithm text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.sign(payload json, secret text, algorithm text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.sign(payload json, secret text, algorithm text) TO dashboard_user;


--
-- Name: FUNCTION try_cast_double(inp text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.try_cast_double(inp text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.try_cast_double(inp text) TO dashboard_user;


--
-- Name: FUNCTION url_decode(data text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.url_decode(data text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.url_decode(data text) TO dashboard_user;


--
-- Name: FUNCTION url_encode(data bytea); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.url_encode(data bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.url_encode(data bytea) TO dashboard_user;


--
-- Name: FUNCTION uuid_generate_v1(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.uuid_generate_v1() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_generate_v1() TO dashboard_user;


--
-- Name: FUNCTION uuid_generate_v1mc(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.uuid_generate_v1mc() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_generate_v1mc() TO dashboard_user;


--
-- Name: FUNCTION uuid_generate_v3(namespace uuid, name text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.uuid_generate_v3(namespace uuid, name text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_generate_v3(namespace uuid, name text) TO dashboard_user;


--
-- Name: FUNCTION uuid_generate_v4(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.uuid_generate_v4() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_generate_v4() TO dashboard_user;


--
-- Name: FUNCTION uuid_generate_v5(namespace uuid, name text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.uuid_generate_v5(namespace uuid, name text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_generate_v5(namespace uuid, name text) TO dashboard_user;


--
-- Name: FUNCTION uuid_nil(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.uuid_nil() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_nil() TO dashboard_user;


--
-- Name: FUNCTION uuid_ns_dns(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.uuid_ns_dns() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_ns_dns() TO dashboard_user;


--
-- Name: FUNCTION uuid_ns_oid(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.uuid_ns_oid() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_ns_oid() TO dashboard_user;


--
-- Name: FUNCTION uuid_ns_url(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.uuid_ns_url() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_ns_url() TO dashboard_user;


--
-- Name: FUNCTION uuid_ns_x500(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.uuid_ns_x500() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_ns_x500() TO dashboard_user;


--
-- Name: FUNCTION verify(token text, secret text, algorithm text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.verify(token text, secret text, algorithm text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.verify(token text, secret text, algorithm text) TO dashboard_user;


--
-- Name: FUNCTION graphql("operationName" text, query text, variables jsonb, extensions jsonb); Type: ACL; Schema: graphql_public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION graphql_public.graphql("operationName" text, query text, variables jsonb, extensions jsonb) TO postgres;
GRANT ALL ON FUNCTION graphql_public.graphql("operationName" text, query text, variables jsonb, extensions jsonb) TO anon;
GRANT ALL ON FUNCTION graphql_public.graphql("operationName" text, query text, variables jsonb, extensions jsonb) TO authenticated;
GRANT ALL ON FUNCTION graphql_public.graphql("operationName" text, query text, variables jsonb, extensions jsonb) TO service_role;


--
-- Name: FUNCTION get_auth(p_usename text); Type: ACL; Schema: pgbouncer; Owner: supabase_admin
--

REVOKE ALL ON FUNCTION pgbouncer.get_auth(p_usename text) FROM PUBLIC;
GRANT ALL ON FUNCTION pgbouncer.get_auth(p_usename text) TO pgbouncer;
GRANT ALL ON FUNCTION pgbouncer.get_auth(p_usename text) TO postgres;


--
-- Name: FUNCTION apply_rls(wal jsonb, max_record_bytes integer); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO postgres;
GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO anon;
GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO authenticated;
GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO service_role;
GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO supabase_realtime_admin;


--
-- Name: FUNCTION broadcast_changes(topic_name text, event_name text, operation text, table_name text, table_schema text, new record, old record, level text); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.broadcast_changes(topic_name text, event_name text, operation text, table_name text, table_schema text, new record, old record, level text) TO postgres;
GRANT ALL ON FUNCTION realtime.broadcast_changes(topic_name text, event_name text, operation text, table_name text, table_schema text, new record, old record, level text) TO dashboard_user;


--
-- Name: FUNCTION build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO postgres;
GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO anon;
GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO authenticated;
GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO service_role;
GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO supabase_realtime_admin;


--
-- Name: FUNCTION "cast"(val text, type_ regtype); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO postgres;
GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO dashboard_user;
GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO anon;
GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO authenticated;
GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO service_role;
GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO supabase_realtime_admin;


--
-- Name: FUNCTION check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO postgres;
GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO anon;
GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO authenticated;
GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO service_role;
GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO supabase_realtime_admin;


--
-- Name: FUNCTION is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO postgres;
GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO anon;
GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO authenticated;
GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO service_role;
GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO supabase_realtime_admin;


--
-- Name: FUNCTION list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO postgres;
GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO anon;
GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO authenticated;
GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO service_role;
GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO supabase_realtime_admin;


--
-- Name: FUNCTION quote_wal2json(entity regclass); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO postgres;
GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO anon;
GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO authenticated;
GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO service_role;
GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO supabase_realtime_admin;


--
-- Name: FUNCTION send(payload jsonb, event text, topic text, private boolean); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.send(payload jsonb, event text, topic text, private boolean) TO postgres;
GRANT ALL ON FUNCTION realtime.send(payload jsonb, event text, topic text, private boolean) TO dashboard_user;


--
-- Name: FUNCTION subscription_check_filters(); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO postgres;
GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO dashboard_user;
GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO anon;
GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO authenticated;
GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO service_role;
GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO supabase_realtime_admin;


--
-- Name: FUNCTION to_regrole(role_name text); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO postgres;
GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO anon;
GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO authenticated;
GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO service_role;
GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO supabase_realtime_admin;


--
-- Name: FUNCTION topic(); Type: ACL; Schema: realtime; Owner: supabase_realtime_admin
--

GRANT ALL ON FUNCTION realtime.topic() TO postgres;
GRANT ALL ON FUNCTION realtime.topic() TO dashboard_user;


--
-- Name: FUNCTION can_insert_object(bucketid text, name text, owner uuid, metadata jsonb); Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON FUNCTION storage.can_insert_object(bucketid text, name text, owner uuid, metadata jsonb) TO postgres;


--
-- Name: FUNCTION extension(name text); Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON FUNCTION storage.extension(name text) TO postgres;


--
-- Name: FUNCTION filename(name text); Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON FUNCTION storage.filename(name text) TO postgres;


--
-- Name: FUNCTION foldername(name text); Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON FUNCTION storage.foldername(name text) TO postgres;


--
-- Name: FUNCTION get_size_by_bucket(); Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON FUNCTION storage.get_size_by_bucket() TO postgres;


--
-- Name: FUNCTION list_multipart_uploads_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer, next_key_token text, next_upload_token text); Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON FUNCTION storage.list_multipart_uploads_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer, next_key_token text, next_upload_token text) TO postgres;


--
-- Name: FUNCTION list_objects_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer, start_after text, next_token text); Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON FUNCTION storage.list_objects_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer, start_after text, next_token text) TO postgres;


--
-- Name: FUNCTION operation(); Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON FUNCTION storage.operation() TO postgres;


--
-- Name: FUNCTION search(prefix text, bucketname text, limits integer, levels integer, offsets integer, search text, sortcolumn text, sortorder text); Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON FUNCTION storage.search(prefix text, bucketname text, limits integer, levels integer, offsets integer, search text, sortcolumn text, sortorder text) TO postgres;


--
-- Name: FUNCTION update_updated_at_column(); Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON FUNCTION storage.update_updated_at_column() TO postgres;


--
-- Name: FUNCTION _crypto_aead_det_decrypt(message bytea, additional bytea, key_id bigint, context bytea, nonce bytea); Type: ACL; Schema: vault; Owner: supabase_admin
--

GRANT ALL ON FUNCTION vault._crypto_aead_det_decrypt(message bytea, additional bytea, key_id bigint, context bytea, nonce bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION vault._crypto_aead_det_decrypt(message bytea, additional bytea, key_id bigint, context bytea, nonce bytea) TO service_role;


--
-- Name: FUNCTION create_secret(new_secret text, new_name text, new_description text, new_key_id uuid); Type: ACL; Schema: vault; Owner: supabase_admin
--

GRANT ALL ON FUNCTION vault.create_secret(new_secret text, new_name text, new_description text, new_key_id uuid) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION vault.create_secret(new_secret text, new_name text, new_description text, new_key_id uuid) TO service_role;


--
-- Name: FUNCTION update_secret(secret_id uuid, new_secret text, new_name text, new_description text, new_key_id uuid); Type: ACL; Schema: vault; Owner: supabase_admin
--

GRANT ALL ON FUNCTION vault.update_secret(secret_id uuid, new_secret text, new_name text, new_description text, new_key_id uuid) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION vault.update_secret(secret_id uuid, new_secret text, new_name text, new_description text, new_key_id uuid) TO service_role;


--
-- Name: TABLE audit_log_entries; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.audit_log_entries TO dashboard_user;
GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.audit_log_entries TO postgres;
GRANT SELECT ON TABLE auth.audit_log_entries TO postgres WITH GRANT OPTION;


--
-- Name: TABLE flow_state; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.flow_state TO postgres;
GRANT SELECT ON TABLE auth.flow_state TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.flow_state TO dashboard_user;


--
-- Name: TABLE identities; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.identities TO postgres;
GRANT SELECT ON TABLE auth.identities TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.identities TO dashboard_user;


--
-- Name: TABLE instances; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.instances TO dashboard_user;
GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.instances TO postgres;
GRANT SELECT ON TABLE auth.instances TO postgres WITH GRANT OPTION;


--
-- Name: TABLE mfa_amr_claims; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.mfa_amr_claims TO postgres;
GRANT SELECT ON TABLE auth.mfa_amr_claims TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.mfa_amr_claims TO dashboard_user;


--
-- Name: TABLE mfa_challenges; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.mfa_challenges TO postgres;
GRANT SELECT ON TABLE auth.mfa_challenges TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.mfa_challenges TO dashboard_user;


--
-- Name: TABLE mfa_factors; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.mfa_factors TO postgres;
GRANT SELECT ON TABLE auth.mfa_factors TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.mfa_factors TO dashboard_user;


--
-- Name: TABLE one_time_tokens; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.one_time_tokens TO postgres;
GRANT SELECT ON TABLE auth.one_time_tokens TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.one_time_tokens TO dashboard_user;


--
-- Name: TABLE refresh_tokens; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.refresh_tokens TO dashboard_user;
GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.refresh_tokens TO postgres;
GRANT SELECT ON TABLE auth.refresh_tokens TO postgres WITH GRANT OPTION;


--
-- Name: SEQUENCE refresh_tokens_id_seq; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON SEQUENCE auth.refresh_tokens_id_seq TO dashboard_user;
GRANT ALL ON SEQUENCE auth.refresh_tokens_id_seq TO postgres;


--
-- Name: TABLE saml_providers; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.saml_providers TO postgres;
GRANT SELECT ON TABLE auth.saml_providers TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.saml_providers TO dashboard_user;


--
-- Name: TABLE saml_relay_states; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.saml_relay_states TO postgres;
GRANT SELECT ON TABLE auth.saml_relay_states TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.saml_relay_states TO dashboard_user;


--
-- Name: TABLE sessions; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.sessions TO postgres;
GRANT SELECT ON TABLE auth.sessions TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.sessions TO dashboard_user;


--
-- Name: TABLE sso_domains; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.sso_domains TO postgres;
GRANT SELECT ON TABLE auth.sso_domains TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.sso_domains TO dashboard_user;


--
-- Name: TABLE sso_providers; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.sso_providers TO postgres;
GRANT SELECT ON TABLE auth.sso_providers TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.sso_providers TO dashboard_user;


--
-- Name: TABLE users; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.users TO dashboard_user;
GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.users TO postgres;
GRANT SELECT ON TABLE auth.users TO postgres WITH GRANT OPTION;


--
-- Name: TABLE pg_stat_statements; Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON TABLE extensions.pg_stat_statements TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE extensions.pg_stat_statements TO dashboard_user;


--
-- Name: TABLE pg_stat_statements_info; Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON TABLE extensions.pg_stat_statements_info TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE extensions.pg_stat_statements_info TO dashboard_user;


--
-- Name: TABLE intern_forms; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.intern_forms TO anon;
GRANT ALL ON TABLE public.intern_forms TO authenticated;
GRANT ALL ON TABLE public.intern_forms TO service_role;


--
-- Name: TABLE user_portfolios; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.user_portfolios TO anon;
GRANT ALL ON TABLE public.user_portfolios TO authenticated;
GRANT ALL ON TABLE public.user_portfolios TO service_role;


--
-- Name: TABLE messages; Type: ACL; Schema: realtime; Owner: supabase_realtime_admin
--

GRANT ALL ON TABLE realtime.messages TO postgres;
GRANT ALL ON TABLE realtime.messages TO dashboard_user;
GRANT SELECT,INSERT,UPDATE ON TABLE realtime.messages TO anon;
GRANT SELECT,INSERT,UPDATE ON TABLE realtime.messages TO authenticated;
GRANT SELECT,INSERT,UPDATE ON TABLE realtime.messages TO service_role;


--
-- Name: TABLE schema_migrations; Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON TABLE realtime.schema_migrations TO postgres;
GRANT ALL ON TABLE realtime.schema_migrations TO dashboard_user;
GRANT SELECT ON TABLE realtime.schema_migrations TO anon;
GRANT SELECT ON TABLE realtime.schema_migrations TO authenticated;
GRANT SELECT ON TABLE realtime.schema_migrations TO service_role;
GRANT ALL ON TABLE realtime.schema_migrations TO supabase_realtime_admin;


--
-- Name: TABLE subscription; Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON TABLE realtime.subscription TO postgres;
GRANT ALL ON TABLE realtime.subscription TO dashboard_user;
GRANT SELECT ON TABLE realtime.subscription TO anon;
GRANT SELECT ON TABLE realtime.subscription TO authenticated;
GRANT SELECT ON TABLE realtime.subscription TO service_role;
GRANT ALL ON TABLE realtime.subscription TO supabase_realtime_admin;


--
-- Name: SEQUENCE subscription_id_seq; Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON SEQUENCE realtime.subscription_id_seq TO postgres;
GRANT ALL ON SEQUENCE realtime.subscription_id_seq TO dashboard_user;
GRANT USAGE ON SEQUENCE realtime.subscription_id_seq TO anon;
GRANT USAGE ON SEQUENCE realtime.subscription_id_seq TO authenticated;
GRANT USAGE ON SEQUENCE realtime.subscription_id_seq TO service_role;
GRANT ALL ON SEQUENCE realtime.subscription_id_seq TO supabase_realtime_admin;


--
-- Name: TABLE buckets; Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON TABLE storage.buckets TO anon;
GRANT ALL ON TABLE storage.buckets TO authenticated;
GRANT ALL ON TABLE storage.buckets TO service_role;
GRANT ALL ON TABLE storage.buckets TO postgres;


--
-- Name: TABLE objects; Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON TABLE storage.objects TO anon;
GRANT ALL ON TABLE storage.objects TO authenticated;
GRANT ALL ON TABLE storage.objects TO service_role;
GRANT ALL ON TABLE storage.objects TO postgres;


--
-- Name: TABLE s3_multipart_uploads; Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON TABLE storage.s3_multipart_uploads TO service_role;
GRANT SELECT ON TABLE storage.s3_multipart_uploads TO authenticated;
GRANT SELECT ON TABLE storage.s3_multipart_uploads TO anon;
GRANT ALL ON TABLE storage.s3_multipart_uploads TO postgres;


--
-- Name: TABLE s3_multipart_uploads_parts; Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON TABLE storage.s3_multipart_uploads_parts TO service_role;
GRANT SELECT ON TABLE storage.s3_multipart_uploads_parts TO authenticated;
GRANT SELECT ON TABLE storage.s3_multipart_uploads_parts TO anon;
GRANT ALL ON TABLE storage.s3_multipart_uploads_parts TO postgres;


--
-- Name: TABLE secrets; Type: ACL; Schema: vault; Owner: supabase_admin
--

GRANT SELECT,REFERENCES,DELETE,TRUNCATE ON TABLE vault.secrets TO postgres WITH GRANT OPTION;
GRANT SELECT,DELETE ON TABLE vault.secrets TO service_role;


--
-- Name: TABLE decrypted_secrets; Type: ACL; Schema: vault; Owner: supabase_admin
--

GRANT SELECT,REFERENCES,DELETE,TRUNCATE ON TABLE vault.decrypted_secrets TO postgres WITH GRANT OPTION;
GRANT SELECT,DELETE ON TABLE vault.decrypted_secrets TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: auth; Owner: supabase_auth_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON SEQUENCES  TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: auth; Owner: supabase_auth_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON FUNCTIONS  TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: auth; Owner: supabase_auth_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON TABLES  TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: extensions; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA extensions GRANT ALL ON SEQUENCES  TO postgres WITH GRANT OPTION;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: extensions; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA extensions GRANT ALL ON FUNCTIONS  TO postgres WITH GRANT OPTION;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: extensions; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA extensions GRANT ALL ON TABLES  TO postgres WITH GRANT OPTION;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: graphql; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON SEQUENCES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON SEQUENCES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON SEQUENCES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: graphql; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON FUNCTIONS  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON FUNCTIONS  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON FUNCTIONS  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: graphql; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON TABLES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON TABLES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON TABLES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: graphql_public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON SEQUENCES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON SEQUENCES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON SEQUENCES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: graphql_public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON FUNCTIONS  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON FUNCTIONS  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON FUNCTIONS  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: graphql_public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON TABLES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON TABLES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON TABLES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: public; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: public; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: public; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON TABLES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON TABLES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON TABLES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: realtime; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON SEQUENCES  TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: realtime; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON FUNCTIONS  TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: realtime; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON TABLES  TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: storage; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON SEQUENCES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON SEQUENCES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON SEQUENCES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: storage; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON FUNCTIONS  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON FUNCTIONS  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON FUNCTIONS  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: storage; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON TABLES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON TABLES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON TABLES  TO service_role;


--
-- Name: issue_graphql_placeholder; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER issue_graphql_placeholder ON sql_drop
         WHEN TAG IN ('DROP EXTENSION')
   EXECUTE FUNCTION extensions.set_graphql_placeholder();


ALTER EVENT TRIGGER issue_graphql_placeholder OWNER TO supabase_admin;

--
-- Name: issue_pg_cron_access; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER issue_pg_cron_access ON ddl_command_end
         WHEN TAG IN ('CREATE EXTENSION')
   EXECUTE FUNCTION extensions.grant_pg_cron_access();


ALTER EVENT TRIGGER issue_pg_cron_access OWNER TO supabase_admin;

--
-- Name: issue_pg_graphql_access; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER issue_pg_graphql_access ON ddl_command_end
         WHEN TAG IN ('CREATE FUNCTION')
   EXECUTE FUNCTION extensions.grant_pg_graphql_access();


ALTER EVENT TRIGGER issue_pg_graphql_access OWNER TO supabase_admin;

--
-- Name: issue_pg_net_access; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER issue_pg_net_access ON ddl_command_end
         WHEN TAG IN ('CREATE EXTENSION')
   EXECUTE FUNCTION extensions.grant_pg_net_access();


ALTER EVENT TRIGGER issue_pg_net_access OWNER TO supabase_admin;

--
-- Name: pgrst_ddl_watch; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER pgrst_ddl_watch ON ddl_command_end
   EXECUTE FUNCTION extensions.pgrst_ddl_watch();


ALTER EVENT TRIGGER pgrst_ddl_watch OWNER TO supabase_admin;

--
-- Name: pgrst_drop_watch; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER pgrst_drop_watch ON sql_drop
   EXECUTE FUNCTION extensions.pgrst_drop_watch();


ALTER EVENT TRIGGER pgrst_drop_watch OWNER TO supabase_admin;

--
-- PostgreSQL database dump complete
--

--
-- PostgreSQL database cluster dump complete
--

